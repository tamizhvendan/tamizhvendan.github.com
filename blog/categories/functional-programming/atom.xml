<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: functional-programming | Tamizh's Thoughts]]></title>
  <link href="http://blog.tamizhvendan.in/blog/categories/functional-programming/atom.xml" rel="self"/>
  <link href="http://blog.tamizhvendan.in/"/>
  <updated>2015-01-14T11:09:13+05:30</updated>
  <id>http://blog.tamizhvendan.in/</id>
  <author>
    <name><![CDATA[Tamizhvendan S]]></name>
    <email><![CDATA[tamizh88@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Step-3 PhoneCat Recommendation System using F# Agents, SignalR and Rx]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2015/01/02/step-3-phonecat-recommendation-system-using-f-number-agents/"/>
    <updated>2015-01-02T05:44:52+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2015/01/02/step-3-phonecat-recommendation-system-using-f-number-agents</id>
    <content type="html"><![CDATA[<blockquote>
  <p>This is step 3 of my blog series on <a href="/blog/2014/12/10/web-application-development-in-fsharp-using-asp-dot-net-mvc/">Web Application Development in Fsharp using ASP.NET MVC</a></p>
</blockquote>

<p>In the last two steps we have seen how to create a <a href="/blog/2014/12/17/phonecat-backend-using-web-api-and-typeproviders/">web apis</a> and <a href="/blog/2014/12/23/step-2-fsharp-phonecat-views-using-razor/">static razor views</a> in fsharp. In this blog post we are going to see one of my favorite feature in fsharp <a href="http://fsharpforfunandprofit.com/posts/concurrency-actor-model/">“Message based approach to concurrency”</a>.</p>

<h3 id="a-small-flashback">A Small Flashback</h3>
<p>I’ve actually planned to put this blog post for the great fsharp community initiative <a href="https://sergeytihon.wordpress.com/2014/11/24/f-advent-calendar-in-english-2014/">F# Advent Calender</a>. Unfortunately it was not able to get through as I’ve <a href="http://sergeytihon.wordpress.com/2014/11/24/f-advent-calendar-in-english-2014/#comment-4135">nominated myself</a> little late. I always believe there is an opportunity behind every adversity. I didn’t get hung up and I knew this is one of the great topic to blog about. When I decided to blog about it, I needed a sample web application. So, I was creating that sample application and it suddenly strikes! <em>How about a blog series on web application development in fsharp?</em> I’ve immediately started working on it and hence this blog series.</p>

<h3 id="so-what-we-gonna-do-in-this-step">So what we gonna do in this step</h3>
<p>In this blog post we are going to build a recommendation system which keeps track of what phones that the user is viewing, and based on his navigation history, we will be recommending a phone that he might be interested in</p>

<p style="text-align:center"> <strong> User visits "Motorola XOOM™" </strong> </p>
<p><img src="/images/fsharp_phonecat/step_3/Phone_1.png"></p>

<p style="text-align:center"> <strong> User visits "Motorola XOOM™ with Wi-Fi" </strong> </p>
<p><img src="/images/fsharp_phonecat/step_3/Phone_2.png"></p>

<p>Let us start the implementation by defining two high level tasks</p>

<ol>
  <li>Tracking user navigation</li>
  <li>Recommending a phone</li>
</ol>

<h3 id="tracking-user-navigation">1. Tracking user navigation</h3>

<p><img class="center" src="/images/fsharp_phonecat/step_3/Phone_Visit_Workflow.png" width="600" height="500"></p>

<p>The first two components has been already implemented as part of <a href="/blog/2014/12/23/step-2-fsharp-phonecat-views-using-razor/">step-2</a>. So we just need to wire up the other two components. Let’s start from <code>PhoneViewTracker</code></p>

<p>Create a source file in the <strong>Web</strong> project and name it as <code>PhoneViewTracker</code>. Add a function <code>observePhonesViewed</code> which will be invoked when you a user visits a phone.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>module PhoneViewTracker =     
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>    
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  let observePhonesViewed anonymousId phoneIdBeingVisited =
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    StorageAgent.Post (SavePhoneVisit (anonymousId, phoneIdBeingVisited))
</pre></div>
</div>
</div>

<p>The <code>anonymousId</code> is a <a href="http://msdn.microsoft.com/en-us/library/system.web.httprequest.anonymousid%28v=vs.110%29.aspx">http property</a> which represents a unique identifier for the given user session</p>

<p>Upon receiving the <code>anonymousId</code> and <code>phoneIdBeingVisited</code> we will be posting a message to the <code>StorageAgent</code> to save this visit. Both the agent and the message doesn’t exist now, so lets create them</p>

<p>Create a source file in the <strong>Domain</strong> project and name it as <code>UserNavigationHistory</code> and add the following</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace PhoneCat.Domain
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>open System.Reactive.Subjects
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>open System.Collections.Generic
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>type Agent&lt;'T&gt; = MailboxProcessor&lt;'T&gt;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>module UserNavigationHistory =  
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  type StorageAgentMessage =
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    | SavePhoneVisit of string * string
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>  let private storageAgentFunc (agent : Agent&lt;StorageAgentMessage&gt;) =  
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    let rec loop (dict : Dictionary&lt;string, list&lt;string&gt;&gt;) = async { 
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>      let! storageAgentMessage = agent.Receive()
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>      match storageAgentMessage with
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>      | SavePhoneVisit (anonymousId, phoneIdBeingVisited) -&gt; 
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>          if dict.ContainsKey(anonymousId) then
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>            let phoneIdsVisited = phoneIdBeingVisited :: dict.[anonymousId]
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>            dict.[anonymousId] &lt;- phoneIdsVisited
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>          else
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>            dict.Add(anonymousId, [phoneIdBeingVisited])
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>      return! loop dict      
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>    }
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>    loop (new Dictionary&lt;string, list&lt;string&gt;&gt;())
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>  let StorageAgent = Agent.Start(storageAgentFunc)
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>
</pre></div>
</div>
</div>

<p>Storage Agent is an F# Agent which stores the user navigation history in an in-memory dictionary. It can be replaced by any key-value store like <a href="http://redis.io/">redis</a> but for experimentation I’ve preferred to use F# Agents.</p>

<p>The <code>StorageAgentMessage</code> is a <a href="http://fsharpforfunandprofit.com/posts/discriminated-unions/">dicriminated union</a> represents possible messages that the <code>StorageAgent</code> can process. Right now it has only message <code>SavePhoneVisit</code> which takes a tuple representing the <code>anonymousId</code> and the <code>phoneIdBeingVisited</code></p>

<p>The <code>StorageAgent</code> is a typical F# Agent which waits for the incoming <code>StorageAgentMessage</code> and upon receiving it stores the visit in the in-memory dictionary. </p>

<p>The next step is wiring the <code>PhoneViewTracker.observePhonesViewed</code> function with the <code>PhoneController.Show</code> action method. We can call the function directly that will create a strongly coupled code. We can even directly post the message to the agent. But that also makes the code tightly coupled. </p>

<p>What we are actually trying to implement here is a <strong>User Phone Visit Stream</strong>. Whenever the user visits a phone, we just want to notifiy somebody to keep track of it and move on. And its where <a href="http://msdn.microsoft.com/en-in/data/gg577609.aspx">Reactive Extensions aka Rx</a> comes into the picture. If you are new to Reactive Programming or Rx, I strongly recommend you to go through <a href="https://gist.github.com/staltz/868e7e9bc2a7b8c1f754">this excellent article</a> by <a href="http://staltz.com/">André Staltz</a></p>

<p>Install the <a href="https://www.nuget.org/packages/Rx-Main/">Rx Nuget Package</a> in the <em>Web</em> project. With Rx in the kitty the next step is to make the User’s phone visit as event and subscribe this event with the <code>PhoneViewTracker</code></p>

<p>The first step is to make the <code>PhoneController</code> as observable. Modify the already created <code>PhoneController</code> as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>type PhoneController(phones : seq&lt;Phone&gt;) =
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  inherit Controller()
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  let subject = new Subject&lt;string&gt;()
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  interface IObservable&lt;string&gt; with
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    member this.Subscribe observer = subject.Subscribe observer
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  member this.Show (id : string) = 
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    let phone = phones |&gt; Seq.find (fun p -&gt; p.Id = id) |&gt; PhoneViewModel.ToPhoneViewModel
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    subject.OnNext id 
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    this.View(phone)
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>  override this.Dispose disposing =
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    if disposing then 
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>      subject.OnCompleted()
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>      subject.Dispose()      
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    base.Dispose disposing
</pre></div>
</div>
</div>

<p>One of the great feature of F# is its seamless interoperability with C# libraries. As you seen in the above code snippet we have just made the <code>PhoneController</code> into an observable by implementing the interface <a href="http://msdn.microsoft.com/en-us/library/dd990377%28v=vs.110%29.aspx">IObservable</a>. </p>

<p>We have created a private <a href="http://msdn.microsoft.com/en-us/library/hh242970%28v=vs.103%29.aspx">Rx Subject</a> and made it responsible for pushing the notification which contains the phone id that is being visited.</p>

<p>But wait how do we configure the subscription between this controller and the <code>PhoneViewTracker</code> ? Thanks to the CompositionRoot that we have <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/2/Web/Infrastructure.fs#L28-L32">created in the step-2</a>. As we have full control over the creation of controller its just a matter of two lines to achieve it.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>type CompositionRoot(phones : seq&lt;PhoneTypeProvider.Root&gt;) =          
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    inherit DefaultControllerFactory() with
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>      override this.GetControllerInstance(requestContext, controllerType) = 
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        // ...
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        else if controllerType = typeof&lt;PhoneController&gt; then          
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>          let phones' = phones |&gt; Seq.map TypeProviders.ToCatalogPhone
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>          let observer = PhoneViewTracker.observePhonesViewed (requestContext.HttpContext.Request.AnonymousID)
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>          let phoneController = new PhoneController(phones')
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>          let subscription = phoneController.Subscribe observer                    
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>          phoneController :&gt; IController
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        // ...
</pre></div>
</div>
</div>
<p>We are leveraging the ASP.NET’s <a href="http://msdn.microsoft.com/en-us/library/fsykd036.aspx">Anonymous Identification Module</a> which help us in creating a unique anonymous id for every user session. We can retrieve it from the <a href="http://msdn.microsoft.com/en-us/library/system.web.httprequest.anonymousid.aspx">HttpRequest</a> as mentioned in the above snippet</p>

<p><a href="http://msdn.microsoft.com/en-in/library/91ka2e6a(v=vs.85).aspx">Anonymous identification of user session</a> are not enabled by default, so add the following entry in the <strong>Web.config</strong> file</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="tag">&lt;configuration&gt;</span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  <span class="comment">&lt;!-- Existing Code ignored for brevity ... --&gt;</span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  <span class="tag">&lt;system.web&gt;</span>
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    <span class="comment">&lt;!-- Existing Code ignored for brevity... --&gt;</span>
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>    <span class="tag">&lt;anonymousIdentification</span> <span class="attribute-name">enabled</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">true</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>  <span class="tag">&lt;/system.web&gt;</span>
<span class="line-numbers"><a href="#n7" name="n7">7</a></span><span class="tag">&lt;/configuration&gt;</span>
</pre></div>
</div>
</div>

<p>With the help of the partial application of functions as we did it in the previous steps, we have created a partial function called <code>observer</code> which has the signature <code>string -&gt; unit</code>. Then we have subscribed to <code>PhoneController</code> using the <code>Subscribe</code> method and with this we are done with saving an user visit. </p>

<h3 id="recommending-a-phone">2. Recommending a phone</h3>

<p><strong>Workflow</strong></p>

<p><img class="center" src="/images/fsharp_phonecat/step_3/Phone_Recommendation_Workflow.png" width="600" height="500"></p>

<ol>
  <li>User initiates the recommendation request using SignalR</li>
  <li>Upon receiving it, Recommendation SignalR hub sends a recommendation request message to Storage Agent with the user Anonymous Id and SignlaR connection Id of the given user</li>
  <li>Storage Agent then fetches the phone visit history of the given user based on the incoming anonymous id and pass it to the Recommendation Agent along with the SignalR connection id.</li>
  <li>Recommendation Agent responds to this by computing the recommendation and publish the result (Either recommended phone id or none) in the Recommendation observable</li>
  <li>Recommendation hub receives this recommendation result, send the response back to the corresponding SignalR client.</li>
</ol>

<p>The beauty of this entire workflow is all are message driven and asynchronous by default.  </p>

<p>Let’s start from Recommendation SignalR hub. The first step is installing SingalR from <a href="https://www.nuget.org/packages/Microsoft.AspNet.SignalR/2.1.2">the nuget</a>.</p>

<p>After installing create a source file in the <strong>Web</strong> project and name it as <code>Startup</code> then add the following code as per the SignalR convention.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>namespace PhoneCat.Web
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>open Owin
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>type Startup() = 
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>  member x.Configuration(app : IAppBuilder) = 
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>    app.MapSignalR() |&gt; ignore
<span class="line-numbers"><a href="#n8" name="n8">8</a></span>    ()
</pre></div>
</div>
</div>

<p>Then add an app setting in the <em>Web.config</em> file and configure the SignalR to use this <code>Startup</code> class</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="tag">&lt;configuration&gt;</span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  <span class="tag">&lt;appSettings&gt;</span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    <span class="comment">&lt;!-- Other keys.. --&gt;</span>
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    <span class="tag">&lt;add</span> <span class="attribute-name">key</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">owin:AppStartup</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">value</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">PhoneCat.Web.Startup</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  <span class="tag">&lt;/appSettings&gt;</span>
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>  <span class="comment">&lt;!-- other configuration items.. --&gt;</span>
<span class="line-numbers"><a href="#n7" name="n7">7</a></span><span class="tag">&lt;/configuration&gt;</span>
</pre></div>
</div>
</div>

<p>With SignalR added to the system, the next step is to create <code>RecommendationHub</code>. Add a source file in <strong>Web</strong> project and name it as <code>Hubs</code>.</p>

<p>Then create a <code>RecommendationHub</code> class with a public method <code>GetRecommendation</code> which will be invoked by the SignalR client to initiate recommendation process.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>type RecommendationHub() =
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>    inherit Hub ()
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    member this.GetRecommendation () =             
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>      let encodedAnonymousId = this.Context.Request.Cookies.[&quot;.ASPXANONYMOUS&quot;].Value
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>      let anonymousId = decode encodedAnonymousId
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>      let connectionId = this.Context.ConnectionId
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>      StorageAgent.Post (GetRecommendation(anonymousId, connectionId))
<span class="line-numbers"><a href="#n8" name="n8">8</a></span>      &quot;Recommendation initiated&quot;
</pre></div>
</div>
</div>

<p>Then anonymous id of the user session is actually persisted in the <a href="http://msdn.microsoft.com/en-in/library/91ka2e6a%28v=vs.85%29.aspx">request cookies by Asp.Net</a> in an encoded format. In the <code>GetRecommendation</code> method we will be retrieving this encoded anonymous id from the cookie and decode it. Then we need to get the SignalR connection id which available in the base class <code>Hub</code>. After getting both the anonymous id and the connection id, send a <code>GetRecommendation</code> message to the <code>StorageAgent</code> with these information. Finally send a response to the SignalR client as “Recommendation initiated”.</p>

<p>The <code>decode</code> function is not added yet so let’s add them. Thanks to <a href="http://stackoverflow.com/a/2481110/159850">this stackoverflow answer</a> we just need to convert the code from C# to F#</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>let private decode encodedAnonymousId =
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    let decodeMethod = 
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>      typeof&lt;AnonymousIdentificationModule&gt;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        .GetMethod(&quot;GetDecodedValue&quot;, BindingFlags.Static ||| BindingFlags.NonPublic)
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    let anonymousIdData = decodeMethod.Invoke(null, [| encodedAnonymousId |]);
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    let field = 
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>      anonymousIdData.GetType()
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        .GetField(&quot;AnonymousId&quot;, BindingFlags.Instance ||| BindingFlags.NonPublic);
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    field.GetValue(anonymousIdData) :?&gt; string
</pre></div>
</div>
</div>

<p>We have used a special F# operator here <code>:?&gt;</code> which is a dynamic down cast operator which casts a base class to a sub-class of it. You can read <a href="http://msdn.microsoft.com/en-us/library/dd233220.aspx">this msdn documentation</a> to know more about F# casting and conversions.</p>

<p>The <code>GetRecommendation</code> message is not added yet, so let’s add them too. Modify <code>StorageAgentMessage</code> created before as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>  type StorageAgentMessage =
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>    | SavePhoneVisit of string * string
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    | GetRecommendation of string * string
</pre></div>
</div>
</div>

<p>The final step of this pipeline is to Update the <code>StorageAgent</code> to handle this <code>GetRecommendation</code> message. Modify the <code>storageAgentFunc</code> in the <code>UserNavigationHistory</code> as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span> let private storageAgentFunc (agent : Agent&lt;StorageAgentMessage&gt;) =  
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    let rec loop (dict : Dictionary&lt;string, list&lt;string&gt;&gt;) = async { 
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>      let! storageAgentMessage = agent.Receive()
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>      match storageAgentMessage with
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>      | SavePhoneVisit (anonymousId, phoneIdBeingVisited) -&gt; 
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>          // .. existing code ignored for brevity ..
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>      | GetRecommendation (anonymousId, connectionId) -&gt;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>          if dict.ContainsKey(anonymousId) then
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>            let phoneIdsVisited = dict.[anonymousId]
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>            RecommendationAgent.Post (connectionId,phoneIdsVisited)
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>      return! loop dict
</pre></div>
</div>
</div>

<p>Handling of the <code>GetRecommendation</code> message is very straight forward. Just get the phone ids being visited by the given anonymous id from the in memory dictionary and send a message consists of connection id and this phone ids visited to the <code>RecommendationAgent</code> which we will be creating next.</p>

<p>Create a source file with the name <code>Recommendations</code> in the <strong>Domain</strong> project and add the <code>RecommendationAgent</code> below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>[&lt;AutoOpen&gt;]
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>module Recommendation =
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  let private recommendationAgentFunc (inbox : Agent&lt;string*List&lt;string&gt;&gt;) =
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    let rec messageLoop () = async {
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>      let! connectionId, visitedPhoneIds = inbox.Receive()     
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>      if (Seq.length visitedPhoneIds) &gt;= 2 then
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        suggestRecommendation connectionId (visitedPhoneIds |&gt; Seq.take 2 |&gt; Seq.toList)
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>      return! messageLoop()
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    }
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    messageLoop ()
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  let RecommendationAgent = Agent.Start recommendationAgentFunc
</pre></div>
</div>
</div>

<p>In order to keep this blog post simple I’ve used my own ‘Hello World’ kind of algorithm which picks the latest two phone ids being visited and suggests recommendation based on it. In a real world you would be replacing this toddler algorithm with more sophisticated algorithms like <a href="http://en.wikipedia.org/wiki/Association_rule_learning">Association Rule Learning</a>. I am planning to implement this algorithm at later stages of this blog series.</p>

<p>Then the next step is to implement the <code>suggestRecommendation</code> function which picks a hardcoded recommendation and publish the result using Rx. To do this add the <a href="https://www.nuget.org/packages/Rx-Main/">Rx Nuget Package</a> in the <strong>Domain</strong> project and add the  <code>suggestRecommendation</code> function in the <code>Recommendation</code> module</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>let RecommendationPipe = new Subject&lt;string*string option&gt;()
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  let private suggestRecommendation connectionId visitedPhoneIds = 
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    match visitedPhoneIds with
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>    | [&quot;motorola-xoom-with-wi-fi&quot;; &quot;motorola-xoom&quot;] -&gt; RecommendationPipe.OnNext (connectionId, Some &quot;motorola-atrix-4g&quot;)
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>    | [&quot;dell-streak-7&quot;; &quot;dell-venue&quot;] -&gt; RecommendationPipe.OnNext (connectionId, Some &quot;nexus-s&quot;)
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>    | _ -&gt; RecommendationPipe.OnNext (connectionId, None)
</pre></div>
</div>
</div>

<p>The implementation is a very straight forward pattern matching. If last visited two items are (“motorola-xoom-with-wi-fi”, “motorola-xoom”), send the recommendation as “motorola-atrix-4g”, else if they are (“dell-streak-7”,”dell-venue”) then recommend “nexus-s”. If none of the condition matches then send none. Thanks to the <a href="http://fsharpforfunandprofit.com/posts/the-option-type/">option type</a> which expresses this result in type safe manner.</p>

<p>With all these infrastructure in place, all we need to do is to just subscribe to this <code>RecommendationPipe</code> and send the suggestion to the user via SignalR</p>

<p>Let’s add a observer for this pipe in the <strong>Web</strong> project. Open <code>Hubs</code> module in the <strong>Web</strong> project and add the following code</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>let private getUrl (phoneId : string) httpContext =
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    let routeValueDictionary = new RouteValueDictionary()
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    routeValueDictionary.Add(&quot;controller&quot;, &quot;Phone&quot;)
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    routeValueDictionary.Add(&quot;action&quot;, &quot;Show&quot;)
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    routeValueDictionary.Add(&quot;id&quot;, phoneId)
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    let requestContext = new RequestContext(new HttpContextWrapper(httpContext), new RouteData());
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    let virtualPathData = RouteTable.Routes.GetVirtualPath(requestContext, routeValueDictionary);
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    virtualPathData.VirtualPath
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>let notifyRecommendation httpContext phones (connectionId, recommendedPhoneId) =
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    let phones' = phones |&gt; Seq.map TypeProviders.ToPhone
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    match recommendedPhoneId with 
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    | Some phoneId -&gt;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>      let recommendedPhone = Phones.getPhoneById phones' phoneId
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>      let phoneUrl = getUrl phoneId httpContext
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>      let hubContext = GlobalHost.ConnectionManager.GetHubContext&lt;RecommendationHub&gt;()
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>      hubContext.Clients.Client(connectionId)?showRecommendation(recommendedPhone, phoneUrl) 
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    | None -&gt; ()
</pre></div>
</div>
</div>

<p>The <code>notifyRecommendation</code> function checks whether the incoming recommendedPhoneId has value or not. If it has value, it just picks the <code>Phone</code> record corresponding to the given phoneId and get the url for the recommended phone. With all these data in place, we just need to send the response to the using via SignalR.</p>

<p>You would have a noticed a weird <code>?</code> symbol which is actually part of the <a href="https://www.nuget.org/packages/ImpromptuInterface.FSharp/">ImpromptuInterface.FSharp</a>. This library adds provisions to use <a href="http://msdn.microsoft.com/en-IN/library/dd264736.aspx">C# dynamic types</a> in F#</p>

<p>They are two missing pieces. One is <code>Phones.getPhoneById</code> which we are not having. Let’s add them. Open <code>Phones</code> module in <strong>Domain</strong> project and add it as mentioned below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>let getPhoneById (phones : seq&lt;Phone&gt;) phoneId =
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>    phones |&gt; Seq.find (fun p -&gt; p.Id = phoneId)
</pre></div>
</div>
</div>

<p>The final step is wiring the <code>RecommendationPipe</code> with the <code>notifyRecommendation</code>. Open <code>Global.asax.fs</code> and update it as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>type Global() = 
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  // .. existing code ignore for brevity ..
<span class="line-numbers"><a href="#n3" name="n3">3</a></span> member x.Application_Start() =
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    let phones = GitHubRepository.getPhones()
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>    // .. existing code ignore for brevity ..
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>    let notificationObserver = Hubs.notifyRecommendation HttpContext.Current phones
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>    Recommendation.RecommendationPipe.Subscribe notificationObserver |&gt; ignore
<span class="line-numbers"><a href="#n8" name="n8">8</a></span>    ()
</pre></div>
</div>
</div>

<p>Partial application of function is a very handy thing which actually replaces its counterpart Dependency Injection in the OOP. We just provided the first two arguments of <code>notifyRecommendation</code> and created a new function with the signature <code>string * string option -&gt; unit</code> which is the expected observer signature for the <code>RecommendationPipe</code>.</p>

<h4 id="the-front-end-ui">The Front End UI</h4>
<p>The front end for this is a typical SignalR-Javascript client code which you can find it the <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/3/Web/Scripts/recommendation.js">github repository</a>. I’ve intentionally leaving the front-end part of this application as it would be extends the scope of the blog post. Moreover if you go through the source code in the github repository you can easily understand</p>

<h3 id="summary">Summary</h3>
<p>F# is just so awesome with so much expressive functional programming features. Rx, Agents and SignalR add more powers to it and enable you to create a scalable functional reactive architecture. I’d like give credits two incredible resources on this subject Mark Seemann’s Pluralsight course on <a href="http://www.pluralsight.com/courses/functional-architecture-fsharp">Functional Architecture with F#</a> and Kevin Ashton’s excellent blog post on <a href="http://namelessinteractive.com/blog/Full_Stack_FSharp_%E2%80%93_The_Long_Version_(Part_1)">Full Stack F#</a> which helped me a lot in coming out with this blog post.</p>

<p>Last but not the least, Thanks to <a href="https://sergeytihon.wordpress.com">Sergey Tihon</a> for the words of encouragement to write the blog post on this topic.</p>

<p>You can find the source code of this step in <a href="https://github.com/tamizhvendan/fsharp-phonecat/tree/3">the github repository</a>. </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Step-2 Fsharp-PhoneCat Views using Razor]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2014/12/23/step-2-fsharp-phonecat-views-using-razor/"/>
    <updated>2014-12-23T19:47:20+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2014/12/23/step-2-fsharp-phonecat-views-using-razor</id>
    <content type="html"><![CDATA[<blockquote>
  <p>This is step 2 of my blog series on <a href="/blog/2014/12/10/web-application-development-in-fsharp-using-asp-dot-net-mvc/">Web Application Development in Fsharp using ASP.NET MVC</a></p>
</blockquote>

<p>In the <a href="/blog/2014/12/17/phonecat-backend-using-web-api-and-typeproviders/">last blog post</a> we have created web-api endpoints which serve the data for the home page and in this blog post we are going to create views of the phones and manufacturers using <a href="http://en.wikipedia.org/wiki/ASP.NET_Razor_view_engine">Razor</a>.</p>

<h3 id="phone-view">Phone View</h3>
<p><img src="/images/fsharp_phonecat/step_2/Phone.png"></p>

<p>As we did it in the step-1 we are going to start with the controller which serves the phone view. Let’s get started by creating a source file in <strong>Web</strong> project under the folders <em>Controllers</em> with the name <code>PhoneController</code></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>type PhoneController(phones : seq&lt;Phone&gt;) =
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  inherit Controller()
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  member this.Show (id : string) = 
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    let phone = phones |&gt; Seq.find (fun p -&gt; p.Id = id) |&gt; PhoneViewModel.ToPhoneViewModel 
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>    this.View(phone)
</pre></div>
</div>
</div>

<p>The action method <code>Show</code> just picks the phone with the given id, converts the selected phone to a view model and returns the view.</p>

<p>The <code>phones</code> data which is being passed to the controller is actually a domain model representing the data that are required to show in the UI. Let’s create it in the <em>Domain</em> project. Create a source file in the <strong>Domain</strong> project and name it as <code>Catalog</code>.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace PhoneCat.Domain
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>open PhoneCat.Domain.Measures
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>module Catalog =    
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  type Display = {
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    ScreenResolution : string
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    ScreenSize : float&lt;inch&gt;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    TouchScreen : bool
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  }
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  type Storage = {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    Flash : float&lt;MB&gt;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    Ram : float&lt;MB&gt;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>  }
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>  type Android = {
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    OS : string
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    UI : string
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>  }
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>  type Camera = {
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    Features : seq&lt;string&gt;
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>    Primary : string
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>  }
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>  type Phone = {
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>    Id : string
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>    Name : string
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>    Description : string
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>    Android : Android
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>    Camera : Camera
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>    Display : Display
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>    Weight : float&lt;g&gt;
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>    Storage : Storage
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>    Images : seq&lt;string&gt;
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>  }
</pre></div>
</div>
</div>
<p>It’s a <a href="http://fsharpforfunandprofit.com/series/understanding-fsharp-types.html">typical type definition</a> in fsharp which describes the domain model <code>Phone</code>. Also if you remember we have already created a type with the same name <code>Phone</code> in <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/1/Domain/Production.fs#L29-L33">the previous step</a>. Though they share the name both are being used for different purposes. One for showing all the details of a phone and other one is for showing only few details about a phone. </p>

<p>This is what we call us <a href="http://martinfowler.com/bliki/BoundedContext.html">bounded context in DDD</a>. In fsharp we can easily achieve it using modules with less verbosity.</p>

<p>We have also used another awesome feature of fsharp called <a href="http://fsharpforfunandprofit.com/posts/units-of-measure/">units-of-measure</a> which help us <a href="http://en.wikipedia.org/wiki/Mars_Climate_Orbiter#Cause_of_failure">avoid failures in unit-coversion</a> by providing strong typed data.</p>

<p>In the later posts we will be extending the domain based on theses measure types right now it just expresses the domain correct. These measure types are not created yet so lets create them by adding a source file in <strong>Domain</strong> project with the name <code>Measures</code></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace PhoneCat.Domain
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>module Measures = 
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  [&lt;Measure&gt;] type inch
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  [&lt;Measure&gt;] type g
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  [&lt;Measure&gt;] type MB
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  let private toUOM (measureString : string) stringToReplace (uom : float&lt;_&gt;) = 
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    let value = 
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>      if measureString = &quot;&quot; then 0.
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>      else measureString.Replace(stringToReplace, &quot;&quot;) |&gt; float
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    value |&gt; ((*) uom)
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>  
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>  let toInch (inchStr : string) = toUOM inchStr &quot;inches&quot; 1.0&lt;inch&gt;
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>  let toGram (weightStr : string) = toUOM weightStr &quot;grams&quot; 1.0&lt;g&gt;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>  let toMB (storageStr : string) = toUOM storageStr &quot;MB&quot; 1.0&lt;MB&gt;
</pre></div>
</div>
</div>

<p>We have defined types to represents measures in inch, gram and megabytes. We have also added few utility methods to translate the raw string to strongly typed data which does the following</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>&quot;200.5inches&quot; to 200.5&lt;inch&gt;
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>&quot;1200MB&quot; to 1200.&lt;MB&gt;
</pre></div>
</div>
</div>
<p>With the domain model in place the next step is to populate this domain model from the data-store. To do it we are going to reuse the PhoneTypeProvider that we have <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/1/DataAccess/TypeProviders.fs#L25">created in the step-1</a>. Since it has all the properties that we needed, we just need to add a function which does the mapping.</p>

<p>Open <code>TypeProviders</code> and add the below function</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>let ToCatalogPhone(phone : PhoneTypeProvider.Root) = 
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  let android = { OS = phone.Android.Os; UI = phone.Android.Ui }
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>      
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  let camera = 
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    { Features = phone.Camera.Features
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>      Primary = phone.Camera.Primary }        
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>      
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  let display = 
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    { ScreenResolution = phone.Display.ScreenResolution
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>      ScreenSize = toInch phone.Display.ScreenSize
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>      TouchScreen = phone.Display.TouchScreen }
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>  let storage = 
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    { Flash = toMB phone.Storage.Flash
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>      Ram = toMB phone.Storage.Ram}
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>  { Id = phone.Id
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    Name = phone.Name
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    Description = phone.Description
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    Android = android
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    Camera = camera
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    Display = display
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    Weight = toGram phone.SizeAndWeight.Weight
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>    Storage = storage 
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>    Images = phone.Images}
</pre></div>
</div>
</div>
<p>We are leveraging the utility functions <code>toGram</code>, <code>toMB</code> defined above as part of measure types and do seamless mapping of domain model from data store.</p>

<p>The next step is wiring the controller with the domain model and the data-store. We are going to follow the same <strong>Composition Root</strong> design as we <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/1/Web/Infrastructure.fs#L19-38">did in step-1</a></p>

<p>Add a source file in the <em>Web</em> project with the name <code>MvcInfrastructure</code> and add the following code</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace PhoneCat.Web
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>open PhoneCat.DataAccess
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>open PhoneCat.Domain
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>open PhoneCat.Web.Controllers
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>open System
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>open System.Web.Mvc
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>module MvcInfrastructure = 
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  type CompositionRoot(phones : seq&lt;PhoneTypeProvider.Root&gt;) = 
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    inherit DefaultControllerFactory() with
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>      override this.GetControllerInstance(requestContext, controllerType) = 
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        if controllerType = typeof&lt;HomeController&gt; then 
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>          let homeController = new HomeController()
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>          homeController :&gt; IController
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        else if controllerType = typeof&lt;PhoneController&gt; then
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>          let phones' = phones |&gt; Seq.map TypeProviders.ToCatalogPhone
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>          let phoneController = new PhoneController(phones')
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>          phoneController :&gt; IController
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>        else
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>          raise &lt;| ArgumentException((sprintf &quot;Unknown controller type requested: %A&quot; controllerType))
</pre></div>
</div>
</div>

<p>Similar to step-1 we are creating the composition root by passing the phones data and doing the wiring of different components.</p>

<p>Since we have created our custom ControllerFactory, we need to update the MVC configuration to use it when the framework creates the controllers.</p>

<p>Update the ```Global.asax.fs`` file as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>member x.Application_Start() =
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  let phones = GitHubRepository.getPhones()
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  AreaRegistration.RegisterAllAreas()
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  GlobalConfiguration.Configure(new Action&lt;HttpConfiguration&gt;(fun config -&gt; Global.RegisterWebApi(config, phones)))
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  Global.RegisterFilters(GlobalFilters.Filters)
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>  Global.RegisterRoutes(RouteTable.Routes)
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>  ControllerBuilder.Current.SetControllerFactory(MvcInfrastructure.CompositionRoot(phones))
<span class="line-numbers"><a href="#n8" name="n8">8</a></span>  BundleConfig.RegisterBundles BundleTable.Bundles
</pre></div>
</div>
</div>
<p>In the last step the we have retrieved the phones data <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/1/Web/Global.asax.fs#L65">inside the RegisterWebApi method</a> and in this step we have moved it outside so that it can be used by both MVC Controllers and Web-Api controllers.</p>

<p>We have also changed the signature of RegisterWebApi method. In the <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/1/Web/Global.asax.fs#L51">earlier step</a> it gets the configuration parameter alone and now it has two parameters <code>httpConfiguration</code> and <code>phones</code></p>

<p>The next pending task in Phone View is translating the Phone Domain model to Phone View Model. Add the Phone View model in the <code>PhoneController</code> created before and update it us below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>type PhoneViewModel = 
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    Name : string
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    Description : string
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    Os : string
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    Ui : string
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    Flash : string
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    Ram : string
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    Weight : string
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    ScreenResolution : string
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    ScreenSize : string
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    TouchScreen : string
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    Primary : string
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    Features : seq&lt;string&gt;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    Images : seq&lt;string&gt;    
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>  }
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>  with static member ToPhoneViewModel(phone : Phone) =
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    let roundToDigits (value:float) = String.Format(&quot;{0:0.00}&quot;, value)
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    let concatWithSpace str2 str1 = str1 + &quot; &quot; + str2
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    let uomToString (measureValue: float&lt;_&gt;) measureName =
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>      measureValue |&gt; float |&gt; roundToDigits |&gt; concatWithSpace measureName
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>    { 
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>      Name = phone.Name
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>      Description = phone.Description
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>      Os = phone.Android.OS
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>      Ui = phone.Android.UI
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>      Flash = phone.Storage.Flash |&gt; int |&gt; sprintf &quot;%d MB&quot;
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>      Ram =  phone.Storage.Ram |&gt; int |&gt; sprintf &quot;%d MB&quot;
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>      Weight = uomToString phone.Weight &quot;grams&quot;
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>      ScreenResolution = phone.Display.ScreenResolution
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>      ScreenSize = uomToString phone.Display.ScreenSize &quot;inches&quot;
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>      TouchScreen = if phone.Display.TouchScreen then &quot;Yes&quot; else &quot;No&quot;
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>      Primary = phone.Camera.Primary
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>      Features = phone.Camera.Features
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>      Images = phone.Images
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>    }
</pre></div>
</div>
</div>
<p>With all in place, we just need to create a razor view with the name <code>Show.cshtml</code> inside the <strong>View</strong> -&gt; <strong>Phone</strong> directory of <em>Web</em> project and update it <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/2/Web/Views/Phone/Show.cshtml">as mentioned here.</a> </p>

<p>That’s it. Phone View is up and running! Click the Phone Links in the Home Page it will take you to the Phones View Page.</p>

<h3 id="manufacturers-view">Manufacturers View</h3>
<p><img src="/images/fsharp_phonecat/step_2/Manufacturer.png"><br />
Manufactures View follows the similar steps that we have used to create the Phone View. It displays the Phones manufactured by a selected manufacturer in the home page.</p>

<p>Let’s start from the controller. Create a controller in the <strong>Web</strong> project with the name <code>ManufacturerController</code></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace PhoneCat.Web.Controllers
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>open System.Web
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>open System.Web.Mvc
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>open PhoneCat.Domain
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>open System
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>type ManufacturerViewModel = {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  Name : string
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  Phones : seq&lt;Phone&gt;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>}
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>with static member ToManufacturerViewModel (name, phones) =
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>      {Name = ManufacturerName.ToString name; Phones = phones}
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>type ManufacturerController 
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>  (
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    getPhones : ManufacturerName -&gt; (ManufacturerName * seq&lt;Phone&gt;)
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>  ) =
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>  inherit Controller()
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>  
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>  member this.Show (id : string) = 
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    let viewModel = 
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>      id 
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>      |&gt; ManufacturerName.ToManufacturerName
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>      |&gt; getPhones
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>      |&gt; ManufacturerViewModel.ToManufacturerViewModel
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>    this.View(viewModel)
</pre></div>
</div>
</div>

<p>The <code>ManufacturerController</code> depends on the function <code>getPhones</code> which gives the Phones manufactured by the given manufacturer. The action method <code>Show</code> converts given id to the manufaturer name,  gets the Phones, converts them to <code>ManufacturerViewModel</code> and renders the view.</p>

<p>The domain model <code>Phone</code> mentioned here is the one that we have <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/1/Domain/Production.fs#L29-L33">already created in step-1</a>. The <code>getPhones</code> domain function is yet to be created. </p>

<p>Open <code>Phones</code> file in the <em>Domain</em> project and add the <code>getPhonesOfManufacturer</code> function.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>let getPhonesOfManufacturer (phones : seq&lt;Phone&gt;) (manufacturerName) =
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>    let phones' = 
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>      phones
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>      |&gt; Seq.filter (fun p -&gt; ManufacturerName.ToManufacturerName p.Name = manufacturerName)
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>    (manufacturerName, phones')
</pre></div>
</div>
</div>
<p>The <code>getPhonesOfManufacturer</code> function takes a sequence of phones and a manufacturer name, filters them for the given manufacturer and return a <a href="http://fsharpforfunandprofit.com/posts/tuples/">tuple</a> that contain the manufacturer name and the sequence of phones.</p>

<p>As we have already created the data-store functions which serves the required data, we just need to wire up the controller.</p>

<p>Update <code>MvcInfrastructure</code> file in the <em>Web</em> project to create <code>ManufacturerController</code></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>module MvcInfrastructure = 
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  type CompositionRoot(phones : seq&lt;PhoneTypeProvider.Root&gt;) = 
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    inherit DefaultControllerFactory() with
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>      override this.GetControllerInstance(requestContext, controllerType) = 
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        // ... Existing code ignored for brevity 
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        else if controllerType = typeof&lt;ManufacturerController&gt; then
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>          let getPhonesByManufactuerName = phones |&gt; Seq.map TypeProviders.ToPhone |&gt; Phones.getPhonesOfManufacturer
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>          let manufacturerController = new ManufacturerController(getPhonesByManufactuerName)
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>          manufacturerController :&gt; IController
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        else
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>          raise &lt;| ArgumentException((sprintf &quot;Unknown controller type requested: %A&quot; controllerType))
</pre></div>
</div>
</div>

<p>Thanks to the <a href="http://fsharpforfunandprofit.com/posts/partial-application/">partial function</a> we have partially applied the first parameter alone for the <code>Phones.getPhonesOfManufacturer</code> function which has the signature </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>seq&lt;Phone&gt; -&gt; ManufacturerName -&gt; seq&lt;Phone&gt;
</pre></div>
</div>
</div>
<p>and created a new function on the fly with the signature </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>ManufacturerName -&gt; seq&lt;Phone&gt;
</pre></div>
</div>
</div>
<p>which is the exactly the function that is needed by the <code>ManufacturerController</code></p>

<p>The final step is to create a razor view with the name <code>Show.cshtml</code> inside the <strong>View</strong> -&gt; <strong>Manufacturer</strong> directory of <strong>Web</strong> project and update it <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/2/Web/Views/Manufacturer/Show.cshtml">as mentioned here.</a> </p>

<h3 id="summary">Summary</h3>
<p>In this blog post we have seen how to create MVC Razor views in fsharp. You can find the <a href="https://github.com/tamizhvendan/fsharp-phonecat/tree/2">source code in the github repository</a>. In the later posts we will be adding more interactivity. Stay tuned !!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Step 1 - Phonecat backend using Web Api and TypeProviders]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2014/12/17/phonecat-backend-using-web-api-and-typeproviders/"/>
    <updated>2014-12-17T17:31:44+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2014/12/17/phonecat-backend-using-web-api-and-typeproviders</id>
    <content type="html"><![CDATA[<blockquote>
  <p>This is step 1 of my blog series on <a href="/blog/2014/12/10/web-application-development-in-fsharp-using-asp-dot-net-mvc/">Web Application Development in Fsharp using ASP.NET MVC</a></p>
</blockquote>

<p>In the <a href="/blog/2014/12/10/step-0-setting-up-the-fsharp-phonecat-solution/">last blog post</a> we have created the basic home page of phone cat with the placeholders and in this post we are going it wire the home page with the backend web apis.</p>

<p><img src="/images/fsharp_phonecat/step_1/home_page.png"></p>

<p>As the above screenshot indicates we are going to develop three web api endpoints which serve the data to the front-end and we are going to use the existing json data available in <a href="https://github.com/angular/angular-phonecat/tree/master/app/phones">angular-phonecat</a> repository as our backend data store.</p>

<p>Initially I’ve planned to include TDD steps in this post but to keep it simple I am ignoring it. If you are interested in the tests that I’ve written check the <a href="https://github.com/tamizhvendan/fsharp-phonecat/tree/1">source code.</a></p>

<h3 id="promotions-api">Promotions Api</h3>

<p>Let’s start with the promotions api which serves the data of three recently launched mobile phones. The first step is to create an ApiController called “PromotionsController”. You can create it by right clicking on the “Controllers” directory in the <strong>Web</strong> project and select <strong>Add -&gt; Source file</strong>. In the dialog box, name it as “PromotionsController”</p>

<p>After creating, update the controller with the dependencies as mentioned below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace Web.Controllers
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>open System.Web.Http
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>open PhoneCat.Domain
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>[&lt;RoutePrefix(&quot;api/promotions&quot;)&gt;]
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>type PromotionsController
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  (
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    getPromotions : seq&lt;PhoneIndex&gt; -&gt; seq&lt;PromotionPhone&gt;,
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    phoneIndexes: seq&lt;PhoneIndex&gt;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>  ) =
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  inherit ApiController()
</pre></div>
</div>
</div>

<p>The <code>PromotionsController</code> has two dependencies. </p>

<ul>
  <li>
    <p><code>getPromotions</code> is a function a that takes a sequence of a domain model <code>PhoneIndex</code> and returns the sequence of domain model <code>PromotionPhone</code> which represents the phones that are recently launched.</p>
  </li>
  <li>
    <p><code>phoneIndexes</code> is a sequence of domain model <code>PhoneIndex</code> that represents the phones available in the backend data store.</p>
  </li>
</ul>

<p>These domain models currently not exists, so add them in the domain project as mentioned below</p>

<p>Right click on the domain project and select <strong>Add -&gt; Source file</strong>. In the dialog box, name it as “Promotions”. It creates a fsharp module with the name <code>Promotions</code> and add the <code>PromotionPhone</code> domain model</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace PhoneCat.Domain
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>[&lt;AutoOpen&gt;]
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>module Promotions = 
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  type PromotionPhone = {
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    Id : string
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    ImageUrl : string
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    Name : string
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  }
</pre></div>
</div>
</div>
<p>Similarly, create an another source file called <code>Production</code> and add the domain model <code>PhoneIndex</code></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace PhoneCat.Domain
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>[&lt;AutoOpen&gt;]
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>module Production = 
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  type PhoneIndex =
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    { Id : string
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>      Name : string
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>      ImageUrl : string
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>      Age : int }
</pre></div>
</div>
</div>

<p>The <code>Age</code> property represents the age of the phone since its launch (so lower is younger!). Now the domain models are ready, the next step is to create an end point to expose it. </p>

<p>Let’s add a action method in PromotionsController which does the same</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>  [&lt;Route(&quot;&quot;)&gt;]
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  member this.Get () = 
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    getPromotions phoneIndexes
</pre></div>
</div>
</div>

<p>The scaffolding is ready and the next step is to add the domain method <code>getPromotions</code> which does the actual business logic of giving recently launched phones.</p>

<p>Add the <code>getPromotions</code> function in the <code>Promotions</code> file as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>let getPromotions (phoneIndexes : seq&lt;PhoneIndex&gt;) = 
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  phoneIndexes 
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  |&gt; Seq.filter (fun phone -&gt; phone.Age &lt; 3) 
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  |&gt; Seq.map (fun phone -&gt; {Id = phone.Id; Name = phone.Name; ImageUrl = phone.ImageUrl})
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>
</pre></div>
</div>
</div>

<p>The <code>getPromotions</code> just filters the phones with the age less than 3 and map them to the corresponding <code>PromotionPhone</code> types.</p>

<p>Now its time to get the actual data from the data store. As I have mentioned earlier we will be using <a href="https://github.com/angular/angular-phonecat/tree/master/app/phones">angular-phonecat</a> repository as our data store. To access the data we will be using <a href="http://fsharp.github.io/FSharp.Data/library/JsonProvider.html">JsonTypeProvider</a>.</p>

<p>In the <em>DataAccess</em> project install the nuget package <a href="https://www.nuget.org/packages/FSharp.Data">FSharp.Data</a> and add a source file <code>TypeProviders</code>. Then update it with the type provider for Phone Index</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace PhoneCat.DataAccess
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>open FSharp.Data
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>open PhoneCat.Domain
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>[&lt;AutoOpen&gt;]
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>module TypeProviders =
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  [&lt;Literal&gt;]
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  let private samplePhoneIndexes = &quot;&quot;&quot;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  [{
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>      &quot;age&quot;: 1,
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>      &quot;id&quot;: &quot;id0&quot;,
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>      &quot;imageUrl&quot;: &quot;id0.jpg&quot;,
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>      &quot;name&quot;: &quot;Name0&quot;,
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>      &quot;snippet&quot;: &quot;Sample Snippet0&quot;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>  },{
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>      &quot;age&quot;: 2,
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>      &quot;id&quot;: &quot;id1&quot;,
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>      &quot;imageUrl&quot;: &quot;id1.jpg&quot;,
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>      &quot;name&quot;: &quot;Name1&quot;,
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>      &quot;snippet&quot;: &quot;Sample Snippet2&quot;
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>  }]
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>  &quot;&quot;&quot;
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>  
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>  type PhoneIndexTypeProvider = JsonProvider&lt;samplePhoneIndexes&gt;
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>  let ToPhoneIndex (phoneIndex : PhoneIndexTypeProvider.Root) =
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>    { Id = phoneIndex.Id; Name = phoneIndex.Name; Age = phoneIndex.Age; ImageUrl = phoneIndex.ImageUrl }
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>
</pre></div>
</div>
</div>

<p>The <code>ToPhoneIndex</code> is a utility function which converts the data store model <code>PhoneIndexTypeProvider.Root</code> to the domain model <code>PhoneIndex</code></p>

<p>Now we got the type provide for <code>PhoneIndex</code>, the next step is populating it from the github repository. To do that add a source file <code>GitHubRepository</code> and update it as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>namespace PhoneCat.DataAccess
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>open PhoneCat.Domain
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>module GitHubRepository = 
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  [&lt;Literal&gt;]
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  let private gitHubRepoUrl = &quot;https://raw.githubusercontent.com/angular/angular-phonecat/master/app/phones/&quot;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  let private phoneIndexes = PhoneIndexTypeProvider.Load(gitHubRepoUrl + &quot;phones.json&quot;)
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  let getPhoneIndexes () = phoneIndexes
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>
</pre></div>
</div>
</div>

<p>That’s it! just three line of code to get the data from the <a href="https://raw.githubusercontent.com/angular/angular-phonecat/master/app/phones/phones.json">angular-phonecat repo</a> and map to the equivalent strongly typed models  </p>

<h4 id="composition-root">Composition Root</h4>

<p>Now we need to wire up the controller with the domain and the data access. We can use a <a href="http://www.hanselman.com/blog/ListOfNETDependencyInjectionContainersIOC.aspx">Dependency Injection Container</a> to achieve it. In fact it used to be my default decision. But after reading this <a href="http://blog.ploeh.dk/2012/11/06/WhentouseaDIContainer/">wonderful blog post</a> by <a href="https://twitter.com/ploeh">Mark Seeman</a> I have actually started rethinking about dependency injection. In this sample application we are going to use the <a href="http://blog.ploeh.dk/2011/07/28/CompositionRoot/">Composition Root</a> as suggested by Mark Seeman.</p>

<p>In the <em>Web</em> project create a source file with the name <code>Infrastructure</code> and add the following composition root</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace PhoneCat.Web
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>open System
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>open System.Web.Http.Dispatcher
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>open System.Web.Http.Controllers
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>open Web.Controllers
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>open PhoneCat.DataAccess
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>open PhoneCat.Domain
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>module Infrastructure =       
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  type CompositionRoot 
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    (
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>      phoneIndexes : seq&lt;PhoneIndexTypeProvider.Root&gt;  
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    ) =                
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    interface IHttpControllerActivator with           
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>      member this.Create(request, controllerDescriptor, controllerType) =
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>          
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>        let phoneIndexes' = phoneIndexes |&gt; Seq.map TypeProviders.ToPhoneIndex
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>        if controllerType = typeof&lt;PromotionsController&gt; then
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>            let promotionsController = new PromotionsController(getPromotions, phoneIndexes')
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>            promotionsController :&gt; IHttpController
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>        else
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>            raise &lt;| ArgumentException((sprintf &quot;Unknown controller type requested: %A&quot; controllerType))
</pre></div>
</div>
</div>

<p>We have actually created a custom implementation of <code>IHttpControllerActivator</code> as mentioned <a href="http://blog.ploeh.dk/2012/09/28/DependencyInjectionandLifetimeManagementwithASP.NETWebAPI/">here</a> which takes care of initializing the controllers by wiring the data store and the domain functions with the controller</p>

<p>The only pending task is tell ASP.NET Web Api to use this composition root. Update the <em>Global.asax.fs</em> file as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>static member RegisterWebApi(config: HttpConfiguration) =
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>       
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  // existing configuration will be here
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  // Additional Web API settings
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>  let phoneIndexes = GitHubRepository.getPhoneIndexes()
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>  config.Services.Replace(typeof&lt;IHttpControllerActivator&gt;, CompositionRoot(phoneIndexes))
</pre></div>
</div>
</div>
<p>We have done an optimization by getting the phone indexes from the github when the application is starting, so that any requests to the application doesn’t get the data from github (typical enterprise performance improvement!).</p>

<h3 id="manufacturers-api">Manufacturers Api</h3>

<p>We are going to create the Manufacturers Api in the same way as Promotions Api. Let’s start from <code>ManufacturersController</code></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace Web.Controllers
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>open System.Web.Http
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>open PhoneCat.Domain
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>type ManufacturerViewModel = { Name : string }
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>[&lt;RoutePrefix(&quot;api/manufactures&quot;)&gt;]
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>type ManufacturersController
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  (
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    getManufacturerNames : seq&lt;Phone&gt; -&gt; seq&lt;ManufacturerName&gt;,
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    phones : seq&lt;Phone&gt;              
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>  ) = 
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>  inherit ApiController()
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>  [&lt;Route(&quot;&quot;)&gt;]
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>  member this.Get () =
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    getManufacturerNames phones
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    |&gt; Seq.distinct
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    |&gt; Seq.map (fun name -&gt; {Name = ManufacturerName.ToString name})
</pre></div>
</div>
</div>

<p>As <code>PromotionsController</code>, <code>ManufacturersController</code> has also two dependencies.</p>

<ul>
  <li>
    <p><code>getManufacturerNames</code> is a function takes a sequence of domain model <code>Phone</code> and returns the sequence of domain model <code>ManufacturerName</code> which represents the manufacturer names of the given phones.</p>
  </li>
  <li>
    <p><code>phones</code> is a sequence of domain model ```Phone`` that represents the phones available in the backend data store</p>
  </li>
</ul>

<p>The <code>Get</code> method in the <code>ManufacturersController</code> returns the manufacturer names for the given phones</p>

<p>The <code>ManufacturerViewModel</code> is just a DTO that is used to share the data across the wire.</p>

<p>The next step is to add the domain models. In the <code>Production</code> file of <em>Domain</em> project add the following</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>type ManufacturerName = 
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  Samsung | Motorola | Dell | LG | TMobile | Sanyo | Unknown
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  static member ToString = function           
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>      | Samsung -&gt; &quot;Samsung&quot;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>      | Motorola -&gt; &quot;Motorola&quot;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>      | Dell -&gt; &quot;Dell&quot;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>      | LG -&gt; &quot;LG&quot;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>      | TMobile -&gt; &quot;T-Mobile&quot;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>      | Sanyo -&gt; &quot;Sanyo&quot;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>      | Unknown -&gt; &quot;Unknown&quot;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>  static member ToManufacturerName (name : string) =
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>      match name.ToLower() with
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>      | n when n.Contains(&quot;samsung&quot;) -&gt; Samsung
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>      | n when n.Contains(&quot;motorola&quot;) -&gt; Motorola
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>      | n when n.Contains(&quot;dell&quot;) -&gt; Dell
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>      | n when n.Contains(&quot;lg&quot;) -&gt; LG
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>      | n when n.Contains(&quot;t-mobile&quot;) -&gt; TMobile
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>      | n when n.Contains(&quot;sanyo&quot;) -&gt; Sanyo
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>      | n when n.Contains(&quot;nexus&quot;) -&gt; Samsung
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>      | _ -&gt; Unknown
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>type Phone = 
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>  { Id : string
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>    Name : string
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>    Description : string
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>    ImageUrl : string }
</pre></div>
</div>
</div>
<p>As the backend data-store doesn’t directly gives the manufacturer name, we will be adding two <strong>static</strong> members that derives the manufacturer name from the phone name. The <code>ToString</code> function translates to the domain model to its equivalent string version</p>

<p>After defining the domain models, add the business logic for the getting the manufacturer names from the phone in the new source file <code>Phones</code> of the <em>Domain</em> project.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace PhoneCat.Domain
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>[&lt;AutoOpen&gt;]
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>module Phones =    
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  let getManufacturerNames (phones : seq&lt;Phone&gt;) = 
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    phones
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    |&gt; Seq.map (fun p -&gt; ManufacturerName.ToManufacturerName p.Name)
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
</pre></div>
</div>
</div>
<p>The <code>getManufacturerNames</code> is a straight forward function that map given the phones to its equivalent manufacture names.</p>

<p>The next step would be fetching the phones from the data-store. </p>

<p>Let’s start by defining a type provider for the phone. Update the <code>TypeProviders</code> module in the <em>DataAccess</em> project as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>[&lt;Literal&gt;]
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>let private samplePhoneJson = &quot;&quot;&quot;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>{
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  &quot;additionalFeatures&quot;: &quot;Trackball&quot;, 
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  &quot;android&quot;: {
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>      &quot;os&quot;: &quot;Android 2.2&quot;, 
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>      &quot;ui&quot;: &quot;&quot;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  }, 
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  &quot;availability&quot;: [
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>      &quot;Sprint&quot;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>  ], 
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  &quot;battery&quot;: {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>      &quot;standbyTime&quot;: &quot;&quot;, 
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>      &quot;talkTime&quot;: &quot;4 hours&quot;, 
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>      &quot;type&quot;: &quot;Lithium Ion (Li-Ion) (1130 mAH)&quot;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>  }, 
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>  &quot;camera&quot;: {
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>      &quot;features&quot;: [
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>          &quot;Video&quot;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>      ], 
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>      &quot;primary&quot;: &quot;3.2 megapixels&quot;
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>  }, 
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>  &quot;connectivity&quot;: {
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>      &quot;bluetooth&quot;: &quot;Bluetooth 2.1&quot;, 
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>      &quot;cell&quot;: &quot;CDMA2000 1xEV-DO Rev.A&quot;, 
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>      &quot;gps&quot;: true, 
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>      &quot;infrared&quot;: false, 
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>      &quot;wifi&quot;: &quot;802.11 b/g&quot;
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>  }, 
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>  &quot;description&quot;: &quot;Zio uses CDMA2000 1xEV-DO rev&quot;, 
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>  &quot;display&quot;: {
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>      &quot;screenResolution&quot;: &quot;WVGA (800 x 480)&quot;, 
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>      &quot;screenSize&quot;: &quot;3.5 inches&quot;, 
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>      &quot;touchScreen&quot;: true
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>  }, 
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>  &quot;hardware&quot;: {
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>      &quot;accelerometer&quot;: true, 
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>      &quot;audioJack&quot;: &quot;3.5mm&quot;, 
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>      &quot;cpu&quot;: &quot;600MHz Qualcomm MSM7627&quot;, 
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>      &quot;fmRadio&quot;: false, 
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>      &quot;physicalKeyboard&quot;: false, 
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>      &quot;usb&quot;: &quot;USB 2.0&quot;
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>  }, 
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>  &quot;id&quot;: &quot;sanyo-zio&quot;, 
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>  &quot;images&quot;: [
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>      &quot;img/phones/sanyo-zio.0.jpg&quot;, 
<span class="line-numbers"><a href="#n47" name="n47">47</a></span>      &quot;img/phones/sanyo-zio.1.jpg&quot;, 
<span class="line-numbers"><a href="#n48" name="n48">48</a></span>      &quot;img/phones/sanyo-zio.2.jpg&quot;
<span class="line-numbers"><a href="#n49" name="n49">49</a></span>  ], 
<span class="line-numbers"><strong><a href="#n50" name="n50">50</a></strong></span>  &quot;name&quot;: &quot;SANYO ZIO&quot;, 
<span class="line-numbers"><a href="#n51" name="n51">51</a></span>  &quot;sizeAndWeight&quot;: {
<span class="line-numbers"><a href="#n52" name="n52">52</a></span>      &quot;dimensions&quot;: [
<span class="line-numbers"><a href="#n53" name="n53">53</a></span>          &quot;58.6 mm (w)&quot;, 
<span class="line-numbers"><a href="#n54" name="n54">54</a></span>          &quot;116.0 mm (h)&quot;, 
<span class="line-numbers"><a href="#n55" name="n55">55</a></span>          &quot;12.2 mm (d)&quot;
<span class="line-numbers"><a href="#n56" name="n56">56</a></span>      ], 
<span class="line-numbers"><a href="#n57" name="n57">57</a></span>      &quot;weight&quot;: &quot;105.0 grams&quot;
<span class="line-numbers"><a href="#n58" name="n58">58</a></span>  }, 
<span class="line-numbers"><a href="#n59" name="n59">59</a></span>  &quot;storage&quot;: {
<span class="line-numbers"><strong><a href="#n60" name="n60">60</a></strong></span>      &quot;flash&quot;: &quot;130MB&quot;, 
<span class="line-numbers"><a href="#n61" name="n61">61</a></span>      &quot;ram&quot;: &quot;256MB&quot;
<span class="line-numbers"><a href="#n62" name="n62">62</a></span>  }
<span class="line-numbers"><a href="#n63" name="n63">63</a></span>}
<span class="line-numbers"><a href="#n64" name="n64">64</a></span>
<span class="line-numbers"><a href="#n65" name="n65">65</a></span>&quot;&quot;&quot;
<span class="line-numbers"><a href="#n66" name="n66">66</a></span>
<span class="line-numbers"><a href="#n67" name="n67">67</a></span>type PhoneTypeProvider = JsonProvider&lt;samplePhoneJson&gt;
<span class="line-numbers"><a href="#n68" name="n68">68</a></span>
<span class="line-numbers"><a href="#n69" name="n69">69</a></span>let ToPhone (phone : PhoneTypeProvider.Root) =
<span class="line-numbers"><strong><a href="#n70" name="n70">70</a></strong></span>    { Id = phone.Id; Name = phone.Name; Description = phone.Description; ImageUrl = phone.Images.[0] }
</pre></div>
</div>
</div>
<p>Like <code>ToPhoneIndex</code> utility function,  <code>ToPhone</code> converts the data store model <code>PhoneTypeProvider.Root</code> to the domain model <code>Phone</code></p>

<p>Unlike the phone index, <a href="https://github.com/angular/angular-phonecat/tree/master/app/phones">angular-phonecat</a> repository stores the details of each phones in a seperate json file with the naming convention of <strong>{phoneId}.json</strong>. So, in order to get the details of all the phones, we need to fire multiple requests to get the details. Thanks to <a href="http://blogs.msdn.com/b/dsyme/archive/2010/01/09/async-and-parallel-design-patterns-in-f-parallelizing-cpu-and-i-o-computations.aspx">fsharp async workflow</a> we can easily pull all the data parallelly and populate the strongly typed domain models from them.</p>

<p>Update the <code>GitHubRepository</code> module with the code to populate the data from the data store.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace PhoneCat.DataAccess
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>open PhoneCat.Domain
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>module GitHubRepository = 
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  [&lt;Literal&gt;]
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  let private gitHubRepoUrl = &quot;https://raw.githubusercontent.com/angular/angular-phonecat/master/app/phones/&quot;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  let private phoneIndexes = PhoneIndexTypeProvider.Load(gitHubRepoUrl + &quot;phones.json&quot;)
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>  let private phoneIds = phoneIndexes |&gt; Seq.map (fun p -&gt; p.Id)
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>  let private pMap ids =
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>      seq {for id in ids -&gt; async { return id, PhoneTypeProvider.Load(gitHubRepoUrl + id + &quot;.json&quot;) }}
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>      |&gt; Async.Parallel
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>      |&gt; Async.RunSynchronously
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>  let private phones = pMap phoneIds |&gt; Map.ofSeq
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>  let getPhoneIndexes () = phoneIndexes
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>  let getPhones () = phones |&gt; Seq.map (fun p -&gt; p.Value)
</pre></div>
</div>
</div>
<p>Expressiveness is one of the reason behind my fsharp addiction. Just see the above code we have done some much thing with just few lines of code. We have fetched the details of all the phones using their ids from phone index and created an in-memory map.</p>

<p>The <code>getPhones</code> function returns the strongly typed <code>PhoneTypeProvider</code> models from the in-memory map.</p>

<p>The last thing is to wire up all the things and create the <code>ManufacturersController</code>. Update the <code>CompositionRoot</code> type in the <code>Infrastructure</code> module with the below code</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>type CompositionRoot 
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  (
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    phones : seq&lt;PhoneTypeProvider.Root&gt;,
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    phoneIndexes : seq&lt;PhoneIndexTypeProvider.Root&gt;  
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  ) =                
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  interface IHttpControllerActivator with
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  member this.Create(request, controllerDescriptor, controllerType) =
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    let phones' = phones |&gt; Seq.map TypeProviders.ToPhone
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    let phoneIndexes' = phoneIndexes |&gt; Seq.map TypeProviders.ToPhoneIndex
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    if controllerType = typeof&lt;PromotionsController&gt; then
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        let promotionsController = 
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>          new PromotionsController(getPromotions, phoneIndexes')
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        promotionsController :&gt; IHttpController
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    else if controllerType = typeof&lt;ManufacturersController&gt; then
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>        let manufacturersController = 
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>          new ManufacturersController(getManufacturerNames, phones')
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>        manufacturersController :&gt; IHttpController 
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    else
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>        raise &lt;| ArgumentException((sprintf &quot;Unknown controller type requested: %A&quot; controllerType))
</pre></div>
</div>
</div>

<p>And update the <em>Global.asax.fs</em> as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>static member RegisterWebApi(config: HttpConfiguration) =
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>       
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  // existing configuration will be here
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  // Additional Web API settings
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>  let phones = GitHubRepository.getPhones()
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>  let phoneIndexes = GitHubRepository.getPhoneIndexes()
<span class="line-numbers"><a href="#n8" name="n8">8</a></span>  config.Services.Replace(typeof&lt;IHttpControllerActivator&gt;, CompositionRoot(phones, phoneIndexes))
</pre></div>
</div>
</div>

<h3 id="top-selling-phones-api">Top Selling Phones Api</h3>

<p>Create <code>PhonesController</code> in the <em>Web</em> project and add the api to return the top selling phones</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace Web.Controllers
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>open System.Web.Http
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>open PhoneCat.Domain
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>[&lt;RoutePrefix(&quot;api/phones&quot;)&gt;]
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>type PhonesController
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  (
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    getTopSellingPhones : int -&gt; seq&lt;Phone&gt; -&gt; seq&lt;Phone&gt;,
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    phones : seq&lt;Phone&gt;              
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>  ) = 
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  inherit ApiController()
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>  [&lt;Route(&quot;topselling&quot;)&gt;]
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>  member this.GetTopSelling () =
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    getTopSellingPhones 3 phones
</pre></div>
</div>
</div>

<p>The <code>getTopSellingPhones</code> picks given count of phones from the given phones and return them.</p>

<p>In the <code>Phones</code> module of <em>Domain</em> project add the function <code>getTopSellingPhones</code></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>let getTopSellingPhones (phonesSold : seq&lt;PhoneSold&gt;) phoneCount (phones : seq&lt;Phone&gt;) = 
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  phonesSold
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  |&gt; Seq.map (fun p -&gt; p.Quantity, (phones |&gt; Seq.find (fun p' -&gt; p'.Id = p.Id)))
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  |&gt; Seq.sortBy (fun x -&gt; -(fst x))
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  |&gt; Seq.take phoneCount
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>  |&gt; Seq.map snd
</pre></div>
</div>
</div>

<p>The <code>PhoneSold</code> domain model represents how much quantity of each phone has been sold. The <code>getTopSellingPhones</code> sorts the given phones in the descending order based on the quantity being sold and return the given count of the phones from the sorting result</p>

<p>Right now the <code>PhoneSold</code> domain model is not added. So add them in the new module <code>Purchases</code> in the <em>Domain</em> project as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>namespace PhoneCat.Domain
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>[&lt;AutoOpen&gt;]
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>module Purchases =    
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  type PhoneSold = {
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>    Id : string
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>    Quantity : int
<span class="line-numbers"><a href="#n8" name="n8">8</a></span>  } 
</pre></div>
</div>
</div>

<p>The angular data-store doesn’t provide quantity sold information, so we need to get it from somewhere else. To keep it simple, we are going add an <code>InMemoryInventory</code> in <em>DataAccess</em> project as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace PhoneCat.DataAccess
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>open PhoneCat.Domain
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>module InMemoryInventory =
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  let getPhonesSold () = [
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    { Id = &quot;motorola-xoom-with-wi-fi&quot;; Quantity = 10}
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    { Id = &quot;motorola-atrix-4g&quot;; Quantity = 24}
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    { Id = &quot;nexus-s&quot;; Quantity = 4}
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    { Id = &quot;samsung-galaxy-tab&quot;; Quantity = 41}
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    { Id = &quot;sanyo-zio&quot;; Quantity = 31}
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    { Id = &quot;motorola-xoom&quot;; Quantity = 6}
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  ]
</pre></div>
</div>
</div>

<p>As previous api’s we need wire things up and create the controller in the <code>CompositeRoot</code></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span> else if controllerType = typeof&lt;PhonesController&gt; then                    
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  let getTopSellingPhones = Phones.getTopSellingPhones (InMemoryInventory.getPhonesSold())                    
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  let phonesController = new PhonesController(getTopSellingPhones, phones') 
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  phonesController :&gt; IHttpController
</pre></div>
</div>
</div>
<p>We have used <a href="http://fsharpforfunandprofit.com/posts/partial-application/">partial application</a> of the <code>Phones.getTopSellingPhones</code> function here. Its signature is <code>seq&lt;PhoneSold&gt; -&gt; int -&gt; seq&lt;Phone&gt; -&gt; seq&lt;Phone&gt;</code><br />
but the controller expects the function with the signature <code>int -&gt; seq&lt;Phone&gt; -&gt; seq&lt;Phone&gt;</code>.</p>

<p>The expression</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>let getTopSellingPhones = Phones.getTopSellingPhones (InMemoryInventory.getPhonesSold())      
</pre></div>
</div>
</div>
<p>actually does this.</p>

<h3 id="front-end">Front-End</h3>

<p>As front-end is out of the scope of this blog post I am not covering it here. I’ve actually developed it using knockout.js.</p>

<h2 id="summary">Summary</h2>

<p>We have covered a quite a large ground here by creating three web-api endpoints in fsharp using Web Api 2. In the later posts we will be adding error handling and making it robust. The source code for this step can be found in the <a href="https://github.com/tamizhvendan/fsharp-phonecat/tree/1">github repository</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Step 0 - Setting up the fsharp-phonecat Solution]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2014/12/10/step-0-setting-up-the-fsharp-phonecat-solution/"/>
    <updated>2014-12-10T22:15:50+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2014/12/10/step-0-setting-up-the-fsharp-phonecat-solution</id>
    <content type="html"><![CDATA[<blockquote>
  <p>This is step 0 of my blog series on <a href="/blog/2014/12/10/web-application-development-in-fsharp-using-asp-dot-net-mvc/">Web Application Development in Fsharp using ASP.NET MVC</a></p>
</blockquote>

<p>In this blog post, we are going to set up the visual studio solution and create the high level project structure for the <em>fsharp-phonecat</em> application. </p>

<p><strong>Let’s get started!</strong></p>

<h4 id="setting-up-visual-studio-solution">Setting Up Visual Studio Solution</h4>

<p>The first step is to create an blank visual studio solution and name it as <strong>PhoneCat</strong></p>

<p><img class="center" src="/images/fsharp_phonecat/step_0/BlankSolution.png" width="700" height="700"></p>

<p>After creating the blank solution create two fsharp class libraries and name it as <strong>Domain</strong> and <strong>DataAccess</strong> respectively.</p>

<p><img class="center" src="/images/fsharp_phonecat/step_0/ClassLibrary.png" width="700" height="700"></p>

<p>Do delete the sample fsharp files Domain1.fs, DataAccess1.fs and Script.fsx that are created by default while creating the class libraries</p>

<p>Then create a ASP.NET MVC web project using <a href="https://visualstudiogallery.msdn.microsoft.com/39ae8dec-d11a-4ac9-974e-be0fdadec71b">F# MVC 5 template</a> and name it as <em>Web</em></p>

<p><img class="center" src="/images/fsharp_phonecat/step_0/WebProject.png" width="700" height="700"></p>

<p><img class="center" src="/images/fsharp_phonecat/step_0/MVC5.png"></p>

<p>We are going to use TDD, so create test projects for each of the above projects created and name it as <strong>Domain.Tests</strong>, <strong>DataAccess.Tests</strong> and <strong>Web.Tests</strong> respectively.</p>

<p>The final project structure would look like</p>

<p><img class="center" src="/images/fsharp_phonecat/step_0/ProjectStructure.png"></p>

<p>F# MVC 5 template comes with a default Bootstrap theme and we are going to extend it by using e-commerce theme from <a href="http://startbootstrap.com/template-overviews/shop-homepage/">Start Bootstrap</a>. Download the theme and add <em>shop-homepage.css</em> to the Content directory of <strong>Web</strong> project. After adding it update <em>Global.asax.fs</em> to include this css file while bundling.</p>

<p>``` fsharp BundleConfig after adding shop-homepage.css<br />
type BundleConfig() =<br />
    static member RegisterBundles (bundles:BundleCollection) =<br />
        bundles.Add(ScriptBundle(“~/bundles/jquery”)<br />
            .Include([|”~/Scripts/jquery-{version}.js”|]))</p>

<pre><code>    bundles.Add(ScriptBundle("~/bundles/modernizr")
        .Include([|"~/Scripts/modernizr-*"|]))

    bundles.Add(ScriptBundle("~/bundles/bootstrap")
        .Include("~/Scripts/bootstrap.js", 
                    "~/Scripts/respond.js"))

    bundles.Add(StyleBundle("~/Content/css")
        .Include("~/Content/bootstrap.css",
                    "~/Content/site.css",
                    "~/Content/shop-homepage.css")) ``` 
</code></pre>

<p>Now the stage is set for awesomeness. Update <strong>_Layout.cshtml</strong> and <strong>Index.cshtml</strong> as mentioned in the bootstrap theme and run the web project.</p>

<p><img class="center" src="/images/fsharp_phonecat/step_0/HomePage.png" width="800" height="800"></p>

<p>You can checkout the code <a href="https://github.com/tamizhvendan/fsharp-phonecat/tree/0">here</a>. In the <a href="/blog/2014/12/17/phonecat-backend-using-web-api-and-typeproviders/">next-post</a> we will be wiring up the backend. Stay tuned !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Application Development in Fsharp using ASP.NET MVC]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2014/12/10/web-application-development-in-fsharp-using-asp-dot-net-mvc/"/>
    <updated>2014-12-10T17:07:48+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2014/12/10/web-application-development-in-fsharp-using-asp-dot-net-mvc</id>
    <content type="html"><![CDATA[<h3 id="introduction">Introduction</h3>

<p>Fsharp is my new favorite language in recent times and I’ve been learning it for the last six months. I always believe the best way to learn a language / technology / framework is to create something using it and also learning from the mistakes while creating it. So, here is my attempt to create a sample web application in fsharp using ASP.NET MVC framework. In this series of blog posts I’m going to share my experience on creating “phone-cat” web application inspired from the <a href="https://github.com/angular/angular-phonecat">angular-phonecat</a>. </p>

<p>As it is my maiden attempt to create a relatively large web application in fsharp, if you find something that can be improved, feel free to share <em>I’m willing to learn from you.</em></p>

<h3 id="blog-series-links">Blog Series Links</h3>

<ul>
  <li><strong>Step 0</strong> - <a href="/blog/2014/12/10/step-0-setting-up-the-fsharp-phonecat-solution/">Setting up the fsharp-phonecat Solution</a></li>
  <li><strong>Step 1</strong> - <a href="/blog/2014/12/17/phonecat-backend-using-web-api-and-typeproviders/">Creating Web Api endpoints for fsharp-phonecat using Web Api 2</a></li>
  <li><strong>Step 2</strong> - <a href="/blog/2014/12/23/step-2-fsharp-phonecat-views-using-razor/">Creating ASP.NET MVC Razor Views for fsharp-phonecat</a></li>
  <li><strong>Step 3</strong> - <a href="/blog/2015/01/02/step-3-phonecat-recommendation-system-using-f-number-agents/">PhoneCat Recommendation System using F# Agents, SignalR and Rx</a></li>
  <li><strong>Step 4</strong> - <a href="/blog/2015/01/06/step-4-build-automation-using-fake/">Build Automation using Fake</a></li>
</ul>

<h4 id="upcoming-posts">Upcoming Posts</h4>

<ul>
  <li>Event Sourcing using EventStore</li>
  <li>Advanced Search using FSParsec</li>
  <li>Data Access Layer using No-Sql</li>
  <li>Integration testing using TickSpec and canopy</li>
  <li>Documentation generation using FSharp.Formatting</li>
</ul>
]]></content>
  </entry>
  
</feed>
