<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: fsharp | P3 Programmer]]></title>
  <link href="http://blog.tamizhvendan.in/blog/categories/fsharp/atom.xml" rel="self"/>
  <link href="http://blog.tamizhvendan.in/"/>
  <updated>2015-04-26T15:42:12+05:30</updated>
  <id>http://blog.tamizhvendan.in/</id>
  <author>
    <name><![CDATA[Tamizhvendan S]]></name>
    <email><![CDATA[tamizh88@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My Takeaways]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2015/04/25/my-takeaways/"/>
    <updated>2015-04-25T15:09:02+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2015/04/25/my-takeaways</id>
    <content type="html"><![CDATA[<blockquote>
  <p>This is the concluding part of my blog series on <a href="/blog/2014/12/10/web-application-development-in-fsharp-using-asp-dot-net-mvc/">Web Application Development in Fsharp using ASP.NET MVC</a></p>
</blockquote>

<p>I would like to begin this blog post by thanking <a href="https://twitter.com/jsonmez">John Sonmez</a> for his inspirational video on <a href="http://simpleprogrammer.com/2014/01/09/importance-finishing-started/">the importance of finishing what you started</a>. I haven’t written any blog series <a href="/blog/2014/12/10/web-application-development-in-fsharp-using-asp-dot-net-mvc/">like this</a> before, so during this course, I was about to give up but the statement </p>

<p style="text-align:center"> <strong> Finish what you started </strong> </p>

<p>kept me going. Thank you John, I have learned a great lesson in my life from you.</p>

<p>Back to the business, In this blog post I am going to share my key takeaways on developing a complete web application in fsharp using ASP.NET MVC</p>

<h2 id="enterprise-application-development-in-fsharp">Enterprise application development in fsharp</h2>

<p>As a learner of F#, I have spent lots of time in listening to <a href="https://vimeo.com/channels/c4fsharp">the great talks</a> by the vibrant <a href="http://c4fsharp.net/">fsharp community</a>. Though those talks are great, I was intrigued, how these individual pieces would work together in creating a complete enterprise application. Is it really possible? </p>

<p>Developing this complete <a href="https://github.com/tamizhvendan/fsharp-phonecat">fsharp-phonecat</a> application answered my questions and I am sure it answered yours too. It may appear hard because of less sources and functional paradigm, but once you figured it out, it would be a cakewalk.</p>

<p>The bottom line is <strong>we can create a complete enterprise application in fsharp</strong>. As a matter of fact, there is a book written on this subject, <a href="http://www.amazon.com/gp/product/1617291323/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1617291323&amp;linkCode=as2&amp;tag=bor0b-20&amp;linkId=SYG2CSFARCGD5KUL">F# Deep Dives</a></p>

<p>If you are not convinced yet, read <a href="http://fsharp.org/testimonials/">these testimonials</a> from the commercial users of F#. </p>

<h2 id="leveraging-the-existing-net-ecosystem">Leveraging the existing .NET ecosystem</h2>

<p>In my perspective F# is a <em>pragmatic functional programming language</em>. In addition to lot of elegant features of the language, it works seamlessly with the existing .NET libraries. This one characteristic I would say is a blessing. You can say, ‘This feature is really cool’, but at the end of the day it should help you to get the job done. F# is not only cool, It can help you too!</p>

<p>In the sample application we have leveraged the <a href="/blog/2014/12/17/phonecat-backend-using-web-api-and-typeproviders/">Web Api 2</a>, <a href="/blog/2014/12/23/step-2-fsharp-phonecat-views-using-razor/">Razor Views</a>, <a href="/blog/2015/02/04/step-6-authentication-using-owin-middleware-and-asp-dot-net-identity/">Asp.Net Identity</a> and the Asp.Net framework itself. So, you can do whatever you are doing in C# in F#! ( With less lines of code <i class='emoji smile'></i>)</p>

<h2 id="using-f-in-your-existing-c-codebase">Using F# in your existing C# Codebase</h2>

<p>As F# is a <a href="http://en.wikipedia.org/wiki/List_of_CLI_languages#CLI_languages">CLI Language</a> it can be added to your existing C# solution. All you need to do just create a new F# project in the solution and this project can work seamlessly with the other projects in the solution. </p>

<p>In the sample application, we have a <a href="/blog/2015/01/18/step-5-advanced-search-dsl-using-fparsec/">created a parser</a> for a search criteria DSL using <a href="http://www.quanttec.com/fparsec/">FParsec</a>. Doing this in C# would be very hard. So we can easily wrap this F# implementation in a class library and use it from any C# codebase. </p>

<p>In the <a href="/blog/2015/01/06/step-4-build-automation-using-fake/">step-5</a> we have automated build process using <a href="http://fsharp.github.io/FAKE/">FAKE</a> which is <em>far</em> better than its counterpart verbose MSBuild xml files. This can be used in any .NET projects!</p>

<h2 id="less-is-beautiful">Less is beautiful</h2>

<p>Another cool aspect of F# is you will be writing less lines of code to achieve complex things. It took only <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/5/Domain/SearchParser.fs#L10-L44">35 lines of code</a> to create a parser for a DSL. </p>

<p><a href="http://fsharpforfunandprofit.com/rop/">Railway Oriented Programming</a> by <a href="https://twitter.com/ScottWlaschin">Scott Wlaschin</a> is an absolute gem. If you would like to know what F# brings to your plate, I strongly suggest you to listen his talk on <a href="http://fsharpforfunandprofit.com/fppatterns/">Functional Design Patterns</a>. The way you see programming will never be the same after you have seen this presentation. </p>

<h2 id="summary">Summary</h2>

<p>In nutshell, F# is just an awesome programming language to create applications. I hope you would have enjoyed this series. If you have any suggestions, kindly leave a comment.</p>

<p>I would like to conclude this post with the below formula</p>

<p style="text-align:center"> <strong> Python + .NET = F# </strong> </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Step-10 Refactoring Composition Root]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2015/04/02/step-10-refactoring-composition-root/"/>
    <updated>2015-04-02T17:07:23+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2015/04/02/step-10-refactoring-composition-root</id>
    <content type="html"><![CDATA[<blockquote>
  <p>This is step 10 of my blog series on <a href="/blog/2014/12/10/web-application-development-in-fsharp-using-asp-dot-net-mvc/">Web Application Development in Fsharp using ASP.NET MVC</a></p>
</blockquote>

<p> </p>

<p>In the fsharp-phonecat application that we are creating as part of this series, to <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/9/Web/MvcInfrastructure.fs#L14-L48">create the controller instances</a>, we are using <a href="http://blog.ploeh.dk/2014/06/10/pure-di/">Pure DI</a>. Though this <a href="http://blog.ploeh.dk/2011/07/28/CompositionRoot/">composition root</a> solves the problem of <a href="http://blog.ploeh.dk/2012/11/06/WhentouseaDIContainer/">dependency injection</a>, the quality of the code is not up to the mark. </p>

<p>In this blog post we are going to refactor this and make it shorter and more F# idiomatic.</p>

<h3 id="the-current-state-of-getcontrollerinstance-method">The current state of GetControllerInstance method</h3>

<p><img class="border center" src="/images/fsharp_phonecat/step_10/if_else_tangle.png"></p>

<p> 
 </p>

<p>It’s if full of <strong>if..else if.. else if.. else</strong> and the method is too long</p>

<p>As depicted in the above screenshot, the <code>GetControllerInstance</code> method does the following three things for all the controller types in the application</p>

<ul>
  <li>Checks the incoming controller type</li>
  <li>Creates the requested controller instance</li>
  <li>Returns the created controller instance</li>
</ul>

<p><img class="border center" src="/images/fsharp_phonecat/step_10/home_controller_creation.png"></p>

<p>This can be refactored to a function</p>

<p><img class="border center" src="/images/fsharp_phonecat/step_10/home_controller_function.png"></p>

<p>The function takes a type and returns an <a href="http://fsharpforfunandprofit.com/posts/the-option-type/">Option type</a> of <code>IController</code></p>

<p>Let’s do the same for an another controller creation which is little complex than this.</p>

<p><img class="border center" src="/images/fsharp_phonecat/step_10/phone_controller_function.png"></p>

<p>Here in this case to create an instance of <code>PhoneController</code> we need two additional parameters, Phones sequence and anonymous id of the session.</p>

<p>With these functions in place, the <code>GetControllerInstance</code> method would look like as below</p>

<p><img class="border center" src="/images/fsharp_phonecat/step_10/match_with_some_and_none.png"></p>

<p>Though the functions that have created has reduced the size of the method, it has introduced an another problem (<a href="http://raynos.github.io/presentation/shower/controlflow.htm?full#PyramidOfDoom">Pyramid Of Doom</a>) as indicated by the arrow in the screenshot. </p>

<p>We can get rid of this using a bind function as we did in <a href="/blog/2015/03/02/step-7-validation-and-error-handling-using-rop/">validation step using rop</a>.</p>

<p>The downside of the <a href="http://fsharpforfunandprofit.com/posts/computation-expressions-bind/">bind function</a> is it’s not generic and we can’t reuse the existing bind function that we have created for doing validation.</p>

<p>So, going with this approach would lead to adding more code which is not in alignment with the objective of this refactoring.</p>

<p>What can we do ??</p>

<p> 
 
 
 
 
 
 
 
 
 
 
 </p>

<p>The answer is <strong><a href="http://en.wikibooks.org/wiki/F_Sharp_Programming/Active_Patterns">Active Patterns</a></strong></p>

<blockquote>
  <p>Active Patterns allow programmers to wrap arbitrary values in a union-like data structure for easy pattern matching. For example, its possible wrap objects with an active pattern, so that you can use objects in pattern matching as easily as any other union type -    <em>F# Programming WikiBook</em></p>
</blockquote>

<p>We are going to use <a href="http://en.wikibooks.org/wiki/F_Sharp_Programming/Active_Patterns#Partial_Active_Patterns">Partial Active Patterns</a> to refactor the composition root.</p>

<h3 id="creating-partial-active-patterns">Creating Partial Active Patterns</h3>

<p>Let’s start by creating a partial active pattern for <code>HomeController</code></p>

<p><img class="border center" src="/images/fsharp_phonecat/step_10/home_controller_active_pattern.png"></p>

<p>As described in the screenshot, it’s very similar to the <code>createHomeController</code> function and the only difference is the addition of the <em>Banana Clips</em> (yellow ellipses). The <code>_</code> symbol makes the active pattern partial.  </p>

<p>The partial active patterns always returns an <code>Option</code> type. </p>

<p>Partial active patterns support defining pattern with multiple parameters. So we can change the <code>createPhoneController</code> function as below</p>

<p><img class="border center" src="/images/fsharp_phonecat/step_10/phone_controller_active_pattern.png"></p>

<p>Great! We are almost done with the refactoring. The pending step is leveraging these partial active patterns in the <code>GetControllerInstance</code> method.</p>

<p>It’s where the <strong>beauty of pattern matching</strong> reveals!</p>

<p><img class="border center" src="/images/fsharp_phonecat/step_10/home_controller_pattern_matching.png"></p>

<p>What’s happening here? </p>

<ul>
  <li>Based on the Active Pattern Name (<code>HomeController</code>), the control goes to the corresponding active pattern</li>
  <li>The value we are matching (<code>controllerType</code>) passed as argument.</li>
  <li>The value returned by the active pattern (instance of <code>HomeController</code>) is assigned to the <code>homeController</code> literal in the match expression</li>
  <li>If none of the pattern has met the matching criteria, it executes the default match (raising the exception)</li>
</ul>

<p>It does the same thing for the Active Patterns with multiple parameters</p>

<p><img class="border center" src="/images/fsharp_phonecat/step_10/phone_controller_pattern_matching.png"></p>

<p>The only thing to note here is, the value against which we are matching is always passed as a last argument.</p>

<p>That’s it!!</p>

<p>After completing the creation of partial active patterns for all the other controller types in the application, the <code>GetControllerInstance</code> would be shorter like this</p>

<p><img class="border center" src="/images/fsharp_phonecat/step_10/composition_root_final.png"></p>

<p> 
 
 
 
 
 
 
 </p>

<p><img class="border center" src="/images/fsharp_phonecat/step_10/awesomeness.gif"></p>

<h3 id="summary">Summary</h3>

<p>Moving from C# to F#, it’s not just change in syntax! It’s much more than that. The perfect analogy for this refactoring is the classic proverb <em>When in Rome, do as the Romans do</em>. You can find the complete source code of this step in the <a href="https://github.com/tamizhvendan/fsharp-phonecat/tree/10">phonecat github repository</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Step-9 Adding Checkout]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2015/03/28/step-9-adding-checkout/"/>
    <updated>2015-03-28T13:07:20+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2015/03/28/step-9-adding-checkout</id>
    <content type="html"><![CDATA[<blockquote>
  <p>This is step 9 of my blog series on <a href="/blog/2014/12/10/web-application-development-in-fsharp-using-asp-dot-net-mvc/">Web Application Development in Fsharp using ASP.NET MVC</a></p>
</blockquote>

<p>In the <a href="/blog/2015/03/20/step-8-adding-shopping-cart/">last blog post</a> we have added the shopping cart feature to our phonecat application and in this blog post we are going to implement the checkout feature.</p>

<p>Implementing the checkout feature involves two steps.<br />
  1. Adding a View Cart Page<br />
  2. Processing the Checkout and creating an order</p>

<h3 id="adding-a-view-cart-page">Adding a View Cart Page</h3>

<p><img class="border" src="/images/fsharp_phonecat/step_9/view-cart.png"></p>

<p>As we have done in the previous posts, let’s begin by extending our shopping cart domain. The first step is to add a function to retrieve the items in the shopping cart. </p>

<p>Open <code>ShoppingCart</code> module in the <strong>Domain</strong> project and update it as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>let getItems cart =
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  match cart with
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  | Empty -&gt; Seq.empty
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  | Active items -&gt; items |&gt; List.toSeq
</pre></div>
</div>
</div>

<p>The above function retrieves the phone ids present in the cart. In order to show a detailed checkout page, we need to get the associated phone details of these phone ids. Right now we don’t have this capability in our app so let’s add them.</p>

<p>Open <code>Phones</code> module in the <strong>Domain</strong> project and add the below functions</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>let contains x = Seq.exists ((=) x)
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>let getPhonesByIds (phones : seq&lt;Phone&gt;) phoneIds =  
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  phones |&gt; Seq.filter (fun p -&gt; contains p.Id phoneIds)
</pre></div>
</div>
</div>

<p>The <code>contains</code> function is a utility function which checks whether the given element is present in a <code>seq</code> or not and the <code>getPhonesByIds</code> function filters phones in the system by the incoming phone ids and returns the requested ones.</p>

<p>Now we have all the bare bones and the next step is defining a controller to serve the View Cart Page.</p>

<p>Add a new Source file <code>CheckoutController</code> in the <strong>Web</strong> project under <em>Controllers</em> directory and update it as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>type CheckoutController
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  (
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>      getPhones : seq&lt;string&gt; -&gt; seq&lt;Phone&gt;,
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>      cart : Cart
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  ) = 
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  inherit Controller ()
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  member this.ViewCart () =
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    cart
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    |&gt; getItems 
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    |&gt; getPhones
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    |&gt; this.View
</pre></div>
</div>
</div>

<p>The <code>ViewCart</code> action method uses the two functions that we have defined before and renders the <code>ViewCart</code> view. Add a new razor view with the name <code>ViewCart</code> in the <em>Views\Checkout</em> Directory and update it <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/9/Web/Views/Checkout/ViewCart.cshtml#L1-L30">as described here</a>. </p>

<p>The final step in rendering this view is gluing the components together in the <code>CheckoutController</code> controller instance creation. </p>

<p>To get the cart associated with the given session id we have added <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/8/Web/Infrastructure.fs#L41-L45">a piece of logic</a> in the last step which checks the presence of <code>Cart</code> for the given anonymous id in the <code>CartStorage</code> and creates the cart if it doesn’t contain. Since we need the same logic here, let’s move this logic to a function <code>getOrCreate</code> in the <code>CartStorage</code> module and reuse it in both the places</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>let getOrCreate anonymousId =
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  match get anonymousId with
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  | Some cart -&gt; cart
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  | None -&gt; create anonymousId ShoppingCart.Empty
</pre></div>
</div>
</div>
<p>Then open <code>MvcInfrastructure</code> module in the <strong>Web</strong> project and update it as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>type CompositionRoot(phones : seq&lt;PhoneTypeProvider.Root&gt;) =          
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  inherit DefaultControllerFactory() with
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    override this.GetControllerInstance(requestContext, controllerType) = 
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    // ... existing code ...
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    else if controllerType = typeof&lt;CheckoutController&gt; then
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>      let anonymousID = requestContext.HttpContext.Request.AnonymousID
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>      let shoppingCart = CartStorage.getOrCreate anonymousID
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>      let getPhonesByIds = phones |&gt; Seq.map TypeProviders.ToPhone |&gt; Phones.getPhonesByIds
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>      let checkoutController = new CheckoutController(getPhonesByIds, shoppingCart)
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>      checkoutController :&gt; IController
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    // ... existing code ...
</pre></div>
</div>
</div>

<p>The composition of <code>CheckoutController</code> is similar to that of other controllers in the application. We get the cart associated with the given anonymous id and then create a partial applied function of <code>Phones.getPhonesByIds</code> by passing the first argument (phones in the app) alone.</p>

<p>That’s it. The Cart View is up and running!</p>

<h3 id="processing-the-checkout">Processing the Checkout</h3>

<p>As mentioned in the beginning, the next step after displaying the shopping cart page is processing the checkout and creating an order. </p>

<p>Let’s begin by defining the domain for Orders.</p>

<p>Create a source file with the name <code>Orders</code> in the <strong>Domain</strong> project and add the following types</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>module Orders =
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  type OrderRequest = {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    UserId : string
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    ProductIds : ProductId seq
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  }
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  type OrderConfirmed = {
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    OrderId : string
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    UserId : string
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    ProductIds : ProductId seq
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  }
</pre></div>
</div>
</div>

<p>The <code>OrderRequest</code> type represents the order being placed by the user and the <code>OrderConfirmed</code> type represents the successful order creation.</p>

<p>To Keep things simple, we are just going to see the order confirmation and we are intentionally leaving out error handling and validation. We can easily <a href="/blog/2015/03/02/step-7-validation-and-error-handling-using-rop/">add them as we did</a>  it in the user registration step and I leave it you as an exercise.</p>

<p>The next step is storing the incoming order. </p>

<p>Create a source file with the name <code>OrderStorage</code> in the <strong>DataAccess</strong> project and add the following function</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>module OrderStorage =  
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  let placeOrder (orderRequest : OrderRequest) =
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    let orderId = Guid.NewGuid().ToString()
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    {OrderId = orderId; UserId = orderRequest.UserId; ProductIds = orderRequest.ProductIds}
</pre></div>
</div>
</div>

<p>Here we are just faked the implementation of order storage by generating a new <code>Guid</code> and returning it as Order Id</p>

<p>Now it’s time for adding a <code>OrderController</code> in the <strong>Web</strong> project to handle the checkout and creating the order using the components defined above.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>type OrderController
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  (
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    cart : Cart,
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    placeOrder : OrderRequest -&gt; OrderConfirmed,
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    updateCart : Cart -&gt; Cart
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  ) =
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  inherit Controller ()
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  [&lt;Authorize&gt;]
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  member this.Checkout () =
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    let identity = base.User.Identity :?&gt; ClaimsIdentity
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    let userId = identity.FindFirst(ClaimTypes.Name).Value
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    let orderConfirmed = placeOrder { UserId = userId; ProductIds = getItems cart}
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    updateCart Cart.Empty |&gt; ignore
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    this.View(orderConfirmed);
</pre></div>
</div>
</div>

<p>The checkout method is straightforward. We get the <code>UserId</code> from the <code>User.Identity</code> property and place the order using it. Upon successful order confirmation, we are clearing the shopping cart and rendering the <code>Checkout</code> view.</p>

<p><img class="border" src="/images/fsharp_phonecat/step_9/order-confirmation.png"></p>

<p>The important thing to notice here the <code>Authorize</code> attribute. Just like any other e-commerce portal, we are not allowing anonymous check out here. The presence of <a href="https://msdn.microsoft.com/en-us/library/system.web.mvc.authorizeattribute%28v=vs.118%29.aspx">this authorize attribute</a> ensures that only logged in users are checking out and in case if they are not logged in it would redirect the user to the login page.</p>

<p>The last step is updating the composition root to create the <code>OrderController</code> instance.</p>

<p>Open <code>MvcInfrasturcture</code> and update it as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>type CompositionRoot(phones : seq&lt;PhoneTypeProvider.Root&gt;) =          
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  inherit DefaultControllerFactory() with
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    override this.GetControllerInstance(requestContext, controllerType) = 
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    // ... existing code ...
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    else if controllerType = typeof&lt;OrderController&gt; then
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>      let anonymousID = requestContext.HttpContext.Request.AnonymousID
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>      let shoppingCart = CartStorage.getOrCreate anonymousID
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>      let updateCart = CartStorage.update anonymousID
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>      let orderController = new OrderController(shoppingCart, OrderStorage.placeOrder, updateCart)
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>      orderController :&gt; IController
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    // ... existing code ...
</pre></div>
</div>
</div>

<p>We are done!</p>

<h3 id="summary">Summary</h3>

<p>We have come a long way from just setting up the visual studio project to a complete prototype of an e-commerce site and I hope you would have enjoyed this series of blog post. In the next blog post we are going to refactor the <code>CompositionRoot</code>which is getting clumsy with a series of <code>if..else if..</code> expressions using Active Patterns and I will be wrapping this series by an another post which will be reflecting back on what I have learned by writing this blog series.</p>

<p>You can find the source code of this step in the <a href="https://github.com/tamizhvendan/fsharp-phonecat/tree/9">fsharp-phonecat github repository</a></p>

<p>Thanks for reading!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Step-8 Adding Shopping Cart]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2015/03/20/step-8-adding-shopping-cart/"/>
    <updated>2015-03-20T11:49:35+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2015/03/20/step-8-adding-shopping-cart</id>
    <content type="html"><![CDATA[<blockquote>
  <p>This is step 8 of my blog series on <a href="/blog/2014/12/10/web-application-development-in-fsharp-using-asp-dot-net-mvc/">Web Application Development in Fsharp using ASP.NET MVC</a></p>
</blockquote>

<p>In the <a href="/blog/2015/03/02/step-7-validation-and-error-handling-using-rop/">last blog post</a> we have seen how to do validation and error handling in fsharp and in this blog post we are going to add shopping cart feature to the phone-cat application that we are developing in this blog series. To keep this blog post simple, we are going to see only adding an item to shopping cart. Remvoing an item from shopping cart is a straightforward implementation and I leave it to you as an exercise</p>

<p><img src="/images/fsharp_phonecat/step_8/cart_intro.png"></p>

<h3 id="the-shopping-cart-domain">The Shopping Cart Domain</h3>

<p>Let’s start with defining the domain model for handling shopping cart. Create a source file <code>ShoppingCart</code> in the <strong>Domain</strong> project and add the following code</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>module ShoppingCart =    
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  type ProductId = string
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  type Cart =
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    | Empty
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    | Active of ProductId List
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  let addItem cart productId =
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    match cart with
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    | Empty -&gt; Active [productId]
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    | Active items -&gt; Active (productId :: items)
</pre></div>
</div>
</div>

<p>The <code>ProductId</code> is an alias of <code>string</code> type represents the id of the phone.</p>

<p>The <code>Cart</code> is a <code>Sum</code> type represents the two possible states of Shopping Cart. The <code>Cart</code> would be either empty or contain product ids that has been added to the cart.</p>

<p>We have added a function which adds a product id to the cart. It just checks the state of the cart and based on the state it either creates the cart with <code>Active</code> state or appends the product id to the existing list.</p>

<p>Thanks to the strong fsharp type system, we have modeled the domain with less lines of code.</p>

<h3 id="persisting-shopping-cart">Persisting Shopping Cart</h3>

<p>Now we have the domain logic to represent the shopping cart and adding items to it. The next step is persisting the cart. We can persist it anywhere as the domain model is persistent ignorant. To keep things simple, we will be persisting it in-memory. </p>

<p>As we did during the <a href="/blog/2015/01/02/step-3-phonecat-recommendation-system-using-f-number-agents/">recommendation step</a> we will be using a dictionary to store the cart with Asp.Net’s <a href="http://msdn.microsoft.com/en-us/library/system.web.httprequest.anonymousid%28v=vs.110%29.aspx">anonymousId</a> as the key. </p>

<p>Create a source file <code>CartStorage</code> in the <strong>DataAccess</strong> project and update it as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>module CartStorage =  
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  let private inMemoryStorage = 
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    new Dictionary&lt;string, Cart&gt;()
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  let create anonymousId cart = 
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    inMemoryStorage.Add(anonymousId, cart)
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    cart
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  let update anonymousId cart =
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    inMemoryStorage.Remove(anonymousId) |&gt; ignore
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    create anonymousId cart
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>  let get anonymousId =
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    match inMemoryStorage.ContainsKey(anonymousId) with
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    | true -&gt; Some inMemoryStorage.[anonymousId] 
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    | _ -&gt; None
</pre></div>
</div>
</div>

<p>The code is very straight forward to understand. It contains typical CRUD operations of a shopping cart using an in-memory dictionary object.</p>

<h3 id="shopping-cart-api">Shopping Cart Api</h3>

<p>It’s time to code the api for the shopping cart. Let’s add a source file <code>ShoppingCartController</code> in the <strong>Web</strong> project and update it as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>[&lt;RoutePrefix(&quot;api/cart&quot;)&gt;]
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>type ShoppingCartController 
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  (
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    cart : Cart,
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    updateCart : Cart -&gt; Cart
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  ) =
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  inherit ApiController () 
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  [&lt;Route(&quot;&quot;)&gt;]
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  member this.Get() = cart
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  [&lt;HttpPost&gt;]
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>  [&lt;Route(&quot;add&quot;)&gt;]
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>  member this.AddItem([&lt;FromBody&gt;]productId : string) = 
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    addItem cart productId |&gt; updateCart
</pre></div>
</div>
</div>

<p>The <code>ShoppingCartController</code> has two dependencies.<br />
  1. <code>Cart</code> - Cart associated with the current session<br />
  2. <code>updateCart</code> - a function to update the cart</p>

<p>To keep it simple, I haven’t added error handling or validation here. The action method <code>Get</code> returns the cart and the action method <code>AddItem</code> adds the item to the cart and then update the cart in the storage.</p>

<h3 id="wiring-things-up">Wiring things up</h3>

<p>Now we have all the pieces to add shopping cart to our application and the final step is tying them together. As we did it in other steps we need to do it in the composition root. Open <code>Infrastructure</code> in the <strong>Web</strong> project and update it as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>type CompositionRoot 
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  (
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    // ... Exisitng Code ...
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  ) = 
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  interface IHttpControllerActivator with           
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    member this.Create(request, controllerDescriptor, controllerType) =
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>      // ... Exisiting Code ...
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>      else if controllerType = typeof&lt;ShoppingCartController&gt; then                  
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        let anonymousID = HttpContext.Current.Request.AnonymousID
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        let shoppingCart = 
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>          match CartStorage.get anonymousID with
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>          | Some cart -&gt; cart
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>          | None -&gt; CartStorage.create anonymousID ShoppingCart.Empty
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>                                                                                  
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        let shoppingCartController = new ShoppingCartController(shoppingCart, CartStorage.update anonymousID)
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        shoppingCartController :&gt; IHttpController
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>      // ... Existing Code ...
</pre></div>
</div>
</div>

<p>Here before the creating an instance of <code>ShoppingCartController</code> we retrieve the anonymous id from the incoming request and get the cart associated with the anonymous id from the storage. In case if the cart is not available, we are creating one. For the <code>update</code> function, we pass the partially applied <code>update</code> function of <code>CartStorage</code>.</p>

<p>That’s it!!</p>

<h3 id="the-front-end-code">The front-end code</h3>

<p>In the front end, we just call the <code>ShoppingCartController</code> action methods using plain jQuery ajax methods and update the UI. Since it is out of the scope of this blog post I haven’t covered it here and you can find <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/8/Web/Scripts/site.js">the code here</a>.</p>

<h3 id="summary">Summary</h3>

<p>In this blog post we have seen how to implement shopping cart in a web application written in fsharp. I leave some exercises for you to extend it to use some other storage and also to add validation and error handling. You can find the source code in the <a href="https://github.com/tamizhvendan/fsharp-phonecat/tree/8">github phonecat repository</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Step-7 Validation and Error Handling using ROP]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2015/03/02/step-7-validation-and-error-handling-using-rop/"/>
    <updated>2015-03-02T12:30:33+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2015/03/02/step-7-validation-and-error-handling-using-rop</id>
    <content type="html"><![CDATA[<blockquote>
  <p>This is step 7 of my blog series on <a href="/blog/2014/12/10/web-application-development-in-fsharp-using-asp-dot-net-mvc/">Web Application Development in Fsharp using ASP.NET MVC</a></p>
</blockquote>

<p>In the <a href="/blog/2015/02/04/step-6-authentication-using-owin-middleware-and-asp-dot-net-identity/">last blog post</a> we have seen how to register a new user using the Asp.Net Identity Management framework. Validating the incoming data before updating the backend datastore and handling error while saving are typical tasks in a web application. In this blog post we are going to see how to achieve these things in a web application written in fsharp. As mentioned in the last blog post we will be adding validation logic for new user registration using <a href="http://fsharpforfunandprofit.com/rop/">Railway oriented Programming</a> aka <em>ROP</em>.</p>

<h3 id="cleanup">Cleanup</h3>

<p>Before adding the validation,  let’s do some cleanup and make it ready for adding validation. </p>

<p>Create a new source file <code>UserStorage</code> in the <strong>Identity</strong> project and move the user manager creation logic from <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/6/Web/MvcInfrastructure.fs#L15-L20">MvcInfrastructure</a> to here.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>[&lt;AutoOpen&gt;]
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>module UserStorage =   
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  let createUserManager () =
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    let userStore = new UserStore&lt;User&gt;(new UserDbContext())
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    let userManager = new UserManager&lt;User&gt;(userStore) 
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    let userValidator = new UserValidator&lt;User&gt;(userManager)
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    userValidator.AllowOnlyAlphanumericUserNames &lt;- false   
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    userManager.UserValidator &lt;- userValidator
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    userManager
</pre></div>
</div>
</div>

<p>Create a Request record type in <code>Users</code> that represents the request for creating a new user</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>type CreateUserRequest = {Name: string; Password: string; Email : string}
</pre></div>
</div>
</div>

<p>Then move the user creation logic from Authentication Controller’s <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/6/Web/Controllers/AuthenticationController.fs#L62-L65">Register action method</a> to <code>UserStorage</code> and update it to use <code>CreateUserRequest</code>.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>let createUser (userManager : UserManager&lt;User&gt;) createUserRequest =
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>    
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  let user = new User(Name = createUserRequest.Name, 
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>                      UserName = createUserRequest.Email, 
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>                      Email = createUserRequest.Email)
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>  
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>  userManager.Create(user, createUserRequest.Password)
<span class="line-numbers"><a href="#n8" name="n8">8</a></span>    
</pre></div>
</div>
</div>

<p>Finally, update the <code>Register</code> action method in <code>AuthenticationController</code> to use the above function</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>[&lt;HttpPost&gt;]
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>[&lt;ValidateAntiForgeryToken&gt;]
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>member this.Register(registerViewModel : RegisterViewModel) : ActionResult =
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  let createUserRequest : CreateUserRequest = {
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    Name = registerViewModel.Name; 
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    Email = registerViewModel.Email; 
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    Password = registerViewModel.Password 
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  }
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  let userCreateResult = Users.createUser userManager createUserRequest
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  if (userCreateResult.Succeeded) then
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    signin userManager base.Request user      
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    this.RedirectToAction(&quot;Index&quot;, &quot;Home&quot;) :&gt; ActionResult
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>  else
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    userCreateResult.Errors
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    |&gt; Seq.iter(fun err -&gt; this.ModelState.AddModelError(&quot;&quot;, err))
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    this.View(registerViewModel) :&gt; ActionResult
</pre></div>
</div>
</div>

<p>With this we are wrapping the cleanup work and all set for adding validation.</p>

<h3 id="adding-validation">Adding Validation</h3>

<p>The first step in ROP is defining the “two tracks”. The track <code>Success</code> represents a successful operation (here its validation) and the other track <code>Failure</code> represents the failure while executing an operation. Usually these “two tracks” will be defined using a discriminated union.</p>

<p>Create a source file <code>Rop</code> in the <strong>Identity</strong> project and update it as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>module Rop = 
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  type Error = {Property : string; Message : string}
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  type Result&lt;'a&gt; = 
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    | Success of 'a
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>    | Failure of Error
</pre></div>
</div>
</div>

<p>The <code>Error</code> type provides the metadata associated with the error.</p>

<p>Let’s start writing validation rules from validating Name. Create a source file <code>NameValidation</code> in <strong>Identity</strong> project and add the following code</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>module NameValidation = 
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  let validateNameEmptiness createUserRequest =
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    if (createUserRequest.Name &lt;&gt; null &amp;&amp; 
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>          createUserRequest.Name &lt;&gt; String.Empty) then
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>      Success createUserRequest
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    else
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>      Failure { Property = &quot;Name&quot;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>                Message = &quot;Name is required&quot;}       
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  let validateNameLength createUserRequest =
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    if (createUserRequest.Name.Length &lt;= 50) then
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        Success createUserRequest
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    else
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>      Failure { Property = &quot;Name&quot; 
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>                Message = &quot;Name should not contain more than 50 characters&quot;}
</pre></div>
</div>
</div>

<p>Hope these rules are self-explanatory. We are just validating the name for emptiness and length, and based on the result we are returning either the <code>Success</code> track or <code>Failure</code> track.</p>

<p>Next, add validation rules for Password. Similar to Name Validation add a source file with the name <code>PasswordValidation</code> and update it as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>module PasswordValidation = 
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  let validatePasswordEmptiness createUserRequest = 
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    if (createUserRequest.Password &lt;&gt; null &amp;&amp; 
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>          createUserRequest.Password &lt;&gt; String.Empty) then 
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>      Success createUserRequest
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    else 
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>      Failure { Property = &quot;Password&quot;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>                Message = &quot;Password is required&quot; }
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  let validatePasswordLength createUserRequest = 
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    if (createUserRequest.Password.Length &lt;= 10) then 
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>      Success createUserRequest
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    else 
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>      Failure { Property = &quot;Password&quot;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>                Message = &quot;Password should not contain more than 10 characters&quot; }
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>  
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>  let validatePasswordStrength  = 
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    let specialCharacters = [ &quot;*&quot;; &quot;&amp;&quot;; &quot;%&quot;; &quot;$&quot; ]
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    let hasSpecialCharacters (str : String) = 
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>      specialCharacters |&gt; List.exists (fun c -&gt; str.Contains(c))
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    let errorMessage = 
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>      &quot;Password should contain atleast one of the special characters &quot; 
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>        + String.Join(&quot;,&quot;, specialCharacters)
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>    validate 
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>      (fun createUserRequest -&gt; 
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>        hasSpecialCharacters createUserRequest.Password) 
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>      &quot;Password&quot; 
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>      errorMessage
</pre></div>
</div>
</div>

<p>In addition to the two validation rules that we have seen in <code>NameValidation</code> here we have added one more validation to verify the presence of special characters in the <code>Password</code>.</p>

<p>There is a pattern in all the validation rules that we have seen so far. </p>

<p><img class="center" src="/images/fsharp_phonecat/step_7/validation_pattern.png" width="450" height="450"></p>

<p>Let’s extract this pattern out of these validation rules and reduce the lines of code!</p>

<p>Create a new source file <code>Validation</code> and add the write this pattern as a function</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>module Validation =  
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  let validate isValid property message createUserRequest =
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    if isValid createUserRequest then
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>      Success createUserRequest
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>    else
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>      Failure {Property = property; Message = message}      
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>
</pre></div>
</div>
</div>
<p>The <code>validate</code> function represents the outer box of the above diagram which takes four inputs</p>

<ul>
  <li>A function to validate the createUserRequest <code>isValid</code> which has the signature
<code>'a -&gt; bool</code> that represents the validation rule</li>
  <li>A string to show which property is invalid in the error <code>property</code></li>
  <li>A string representing the error <code>message</code></li>
  <li>The last is the incoming userCreateRequest <code>createUserRequest</code></li>
</ul>

<p><em>Note: Property and Message parameters are not shown in the diagram just to express the pattern clearly</em></p>

<p>We also need a small utility function to check the emptiness of the string. So add it in <code>Validation</code></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>let isNonEmptyString str = str &lt;&gt; null &amp;&amp; str &lt;&gt; String.Empty
</pre></div>
</div>
</div>

<p>With these functions in place we can refactor the validation rules that we written before.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>module NameValidation = 
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  let validateNameEmptiness =
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    validate 
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>      (fun createUserRequest -&gt; isNonEmptyString createUserRequest.Name) 
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>      &quot;Name&quot; 
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>      &quot;Name is required&quot;        
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  let validateNameLength  =
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    validate 
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>      (fun createUserRequest -&gt; createUserRequest.Name.Length &lt;= 50) 
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>      &quot;Name&quot; 
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>      &quot;Name should not contain more than 50 characters&quot;
</pre></div>
</div>
</div>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>module PasswordValidation = 
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  let validatePasswordEmptiness =
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    validate 
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>      (fun createUserRequest -&gt; isNonEmptyString createUserRequest.Password) 
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>      &quot;Password&quot; 
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>      &quot;Password is required&quot;     
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  let validatePasswordLength = 
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    validate 
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>      (fun createUserRequest -&gt; createUserRequest.Name.Length &lt;= 10) 
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>      &quot;Password&quot; 
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>      &quot;Password should not contain more than 10 characters&quot;    
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>  
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>  let hasSpecialCharacters specialCharacters (str : String) = 
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    specialCharacters |&gt; List.exists (fun c -&gt; str.Contains(c))
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>  
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>  let validatePasswordStrength  = 
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    let specialCharacters = [ &quot;*&quot;; &quot;&amp;&quot;; &quot;%&quot;; &quot;$&quot; ]
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    let errorMessage = 
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>      &quot;Password should contain atleast one of the special characters &quot; 
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>        + String.Join(&quot;,&quot;, specialCharacters)
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    validate 
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>      (fun createUserRequest -&gt; 
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>        hasSpecialCharacters specialCharacters createUserRequest.Password) 
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>      &quot;Password&quot; 
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>      errorMessage
</pre></div>
</div>
</div>
<p>Much cleaner than the previous version, isn’t it?</p>

<p>The final validation is Email validation. It is very similar to the other validations that we have seen so far. One extra validation is verifying the uniqueness of the email id being used to register.</p>

<p>Create a new source file <code>EmailValidation</code> and add the validations</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>module EmailValidation =   
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  let isUniqueEmailAddr (userManager : UserManager&lt;User&gt;) emailAddr =
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    let user = userManager.FindByName(emailAddr)
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    user = null 
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  let isValidEmailAddress emailAddr =
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    let emailAddrRegex = 
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>      @&quot;\A(?:[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+)&quot; +
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        &quot;*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?)\Z&quot;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    Regex.IsMatch(emailAddr, emailAddrRegex, RegexOptions.IgnoreCase)
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  let validateEmailEmptiness =
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    validate 
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>      (fun createUserRequest -&gt; isNonEmptyString createUserRequest.Email) 
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>      &quot;Email&quot; 
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>      &quot;Email is required&quot;    
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>  let validateEmailUniqueness isUniqueEmailAddr createUserRequest =
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    validate 
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>      (fun createUserRequest -&gt; isUniqueEmailAddr createUserRequest.Email) 
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>      &quot;Email&quot; 
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>      &quot;Email address already exists&quot;    
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>  let validateEmailCorrectness =
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>    validate 
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>      (fun createUserRequest -&gt; isValidEmailAddress createUserRequest.Email) 
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>      &quot;Email&quot; 
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>      &quot;Email address is invalid&quot;
</pre></div>
</div>
</div>

<h3 id="putting-all-the-validations-together">Putting all the validations together</h3>

<p>So far we have seen individual property validation rules. It’s time to put all these pieces together and validate the <code>CreateUserRequest</code> as a whole.</p>

<p>Create a source file <code>UserValidation</code> and update it as below</p>

<p><img src="/images/fsharp_phonecat/step_7/uservalidation_match.png"></p>

<p>Wait.. Wait.. I know how do you feel here.. It’s too much code! Can we do it in a better way? </p>

<h3 id="using-railway-oriented-programming-rop">Using Railway Oriented Programming (ROP)</h3>

<p>Thanks to ROP, we can make the mighty code smaller and more readable. I am going ahead with an assumption that you are aware of ROP. In case if you are not aware of it then watch this <a href="http://vimeo.com/97344498">excellent presentation</a> by <a href="https://twitter.com/ScottWlaschin">Scott Wlaschin</a></p>

<p><img class="center" src="/images/fsharp_phonecat/step_7/bind_function.png" width="350" height="500"></p>

<p>The crux of ROP is the bind function which composes two functions where the output type of one function is not matching with that of the input. If you want to know more this bind function, do visit this <a href="http://adit.io./posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html">awesome blog post</a> by <a href="https://twitter.com/_egonschiele">Aditya</a>. In this blog post he explains about the bind function under the title <strong>Monads</strong></p>

<p>Let’s start by adding this bind function in the module <code>Rop</code> that we have already created.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>let bind f1 f2 x =
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  match f1 str with
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  | Success x -&gt; f2 x
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  | Failure err -&gt; Failure err
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>let inline (&gt;&gt;=) f1 f2 = bind f1 f2
</pre></div>
</div>
</div>

<p>The bind function here calls the function <code>f1</code> with the given input <code>x</code> if it succeeds, then executes the second function <code>f2</code> with <code>x</code>. In case if the execution of <code>f1</code> resulted in failure then it just passes without executing the second function. </p>

<p>The infix operator <code>&gt;&gt;=</code> is an alias of bind function. </p>

<p>With the help of this bind function, we can rewrite the <code>validateCreateUserRequest</code> function in a better way as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>module UserValidation = 
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  let validateCreateUserRequest userManager  = 
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>      validateEmailEmptiness 
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        &gt;&gt;= validateEmailCorrectness
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        &gt;&gt;= validateEmailUniqueness (isUniqueEmailAddr userManager)
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        &gt;&gt;= validateNameEmptiness
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        &gt;&gt;= validateNameLength
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        &gt;&gt;= validatePasswordEmptiness
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        &gt;&gt;= validatePasswordLength
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        &gt;&gt;= validatePasswordStrength
</pre></div>
</div>
</div>

<p>It’s awesome! Isn’t it? If you are still wondering what’s happening here! Watch the Scott’s presentation one more time.</p>

<h3 id="adding-validation-before-saving">Adding validation before saving</h3>

<p>Now we have the validation infrastructure in place. So, let’s go ahead and add it before creating a new user in the backend. As part of this refactoring we are also going to do error handling of new user creation. </p>

<p>Create a new private function in <code>UserStorage</code> to create a new user with error handling</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>let private createUser' (userManager : UserManager&lt;User&gt;) createUserRequest =
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  try
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    let user = new User(Name = createUserRequest.Name, 
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>                        UserName = createUserRequest.Email, 
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>                        Email = createUserRequest.Email)
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    let identityResult = userManager.Create(user, createUserRequest.Password)
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    if identityResult.Succeeded then
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>      Success createUserRequest
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    else
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>      let errors = String.concat &quot;,&quot; identityResult.Errors
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>      Failure { Property = &quot;&quot;; 
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>                Message = errors}
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>  with
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    | _ -&gt;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>      Failure { Property = &quot;&quot;; 
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>                Message = &quot;An unexpected error happened while creating new user&quot;}
</pre></div>
</div>
</div>

<p>Like validation rules defined before this new <code>createUser'</code> function is also outputs “two tracks”, Success if the user creation is successful others it outputs Failure. Because of this change in function signature <br />
(<code>UserManager&lt;User&gt; -&gt; CreateUserRequest -&gt; Result&lt;CreateUserRequest&gt;</code>) we can fit this easily into the bind function.</p>

<p>Modify the existing <code>CreateUser</code> function to use this</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>let createUser (userManager : UserManager&lt;User&gt;) =
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>      validateCreateUserRequest userManager &gt;&gt;= createUser' userManager
</pre></div>
</div>
</div>

<p>Thanks to <a href="http://fsharpforfunandprofit.com/posts/partial-application/">Partial application</a> we have created new functions on the fly by passing only the partial parameters (<code>UserManager</code> in this case) and make it fit with less code. </p>

<p>Since we have changed the signature of the <code>createUser</code> function from <code>UserManager&lt;User&gt; -&gt; CreateUserRequest -&gt; IdentityResult</code> to <code>UserManager&lt;User&gt; -&gt; CreateUserRequest -&gt; Result&lt;CreateUserRequest&gt;</code> we need to change the <code>Register</code> action method in the <code>AuthenticationController</code>.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>[&lt;HttpPost&gt;]
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>[&lt;ValidateAntiForgeryToken&gt;]
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>member this.Register(registerViewModel : RegisterViewModel) : ActionResult =
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  let createUserRequest : CreateUserRequest = {
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    Name = registerViewModel.Name; 
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    Email = registerViewModel.Email; 
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    Password = registerViewModel.Password 
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  }
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  match UserStorage.createUser userManager createUserRequest with
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  | Failure error -&gt;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    this.ModelState.AddModelError(error.Property, error.Message)
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    this.View(registerViewModel) :&gt; ActionResult
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>  | Success createUserRequest' -&gt;                      
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    let user = userManager.Find(createUserRequest'.Email, createUserRequest'.Password)        
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    signin userManager base.Request user      
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    this.RedirectToAction(&quot;Index&quot;, &quot;Home&quot;) :&gt; ActionResult
</pre></div>
</div>
</div>

<p>That’s it, we are ready to go!</p>

<h3 id="summary">Summary</h3>

<p>In this blog post we have seen how to add validations and error handling in fsharp using ROP. Though it is little hard to get this kind of functional thinking, it offers a great deal of expressiveness and flexibility to your codebase. Just like any other skills if you practice it for quite time you can also master it. You can find the source code associated with this step in the <a href="https://github.com/tamizhvendan/fsharp-phonecat/tree/7">github repository</a></p>
]]></content>
  </entry>
  
</feed>
