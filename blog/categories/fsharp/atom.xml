<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: fsharp | P3 Programmer]]></title>
  <link href="http://blog.tamizhvendan.in/blog/categories/fsharp/atom.xml" rel="self"/>
  <link href="http://blog.tamizhvendan.in/"/>
  <updated>2015-04-30T15:01:09+05:30</updated>
  <id>http://blog.tamizhvendan.in/</id>
  <author>
    <name><![CDATA[Tamizhvendan S]]></name>
    <email><![CDATA[tamizh88@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Some tips for Using C# Libraries in F#]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2015/04/30/some-tips-for-using-c-number-libraries-in-f-number/"/>
    <updated>2015-04-30T11:19:53+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2015/04/30/some-tips-for-using-c-number-libraries-in-f-number</id>
    <content type="html"><![CDATA[<p>In my <a href="/blog/2015/04/25/my-takeaways/">last blog post</a> on what I’ve learned while developing a complete web application in fsharp, I’ve mentioned that we can leverage all the libraries that were written for csharp in fsharp. </p>

<p>Fsharp is a hybrid programming language which supports both functional programming and object oriented programming. Though you can write an application completely in a functional way, when you need to integrate with other .NET languages, you may need to use some OO features.</p>

<p>As both the languages has its own design and principles (immutable types, not allowing null, etc.,), the integration of these is not straightforward in certain scenarios. In this blog post you are going to learn how to handle these tricky scenarios. </p>

<h2 id="allownullliteral-attribute">AllowNullLiteral Attribute</h2>

<p>When you <a href="http://fsharpforfunandprofit.com/posts/classes/">create a class in F#</a>, by default, we can’t explicitly assign a null value to an instance of the class unlike C#. You will get a compiler error when you do it. It’s a great feature and it helps in getting rid of Null Reference exceptions. </p>

<p><img class="center" src="/images/fs_cs_interop/NullError.png"></p>

<p>But in certain cases, we may need to assign a null value to a class. For example, let us take the <a href="https://msdn.microsoft.com/en-us/library/dn497475(v=vs.108).aspx">Find method</a> in the Asp.Net identity framework. It returns a user with the specified username and password or null if there is a no match. </p>

<p>When you try to use this in a fsharp code, you will be getting a compiler error</p>

<p><img class="center" src="/images/fs_cs_interop/UserNullError.png"></p>

<p>It’s where <a href="https://msdn.microsoft.com/en-us/library/ee353608.aspx?f=255&amp;MSPPError=-2147217396">AllowNullLiteral attribute</a> comes into the picture. If you want to make a class type to allow null literal as one of its value, you need to decorate that class with the AllowNullLiteral attribute.</p>

<p><img class="center" src="/images/fs_cs_interop/AllowNullAttr.png"></p>

<h2 id="climutable-attribute">CLIMutable Attribute</h2>

<p>When a fsharp Record type is compiled, it has been translated to a Common Language Infrastructure (CLI) representation of a typical <a href="http://blog.pluralsight.com/domain-driven-design-in-csharp-implementing-immutable-value-objects">value object declaration</a> in C#.</p>

<p><img class="center border" src="/images/fs_cs_interop/Record_Type_Compilation.png"></p>

<p>The important thing to notice here is there is no default constructor! </p>

<p>Certain libraries and frameworks requires a class to contain default constructor. For example, the <a href="http://www.asp.net/web-api/overview/formats-and-model-binding/parameter-binding-in-aspnet-web-api">model binding</a> feature in Asp.Net framework expects the class with a default constructor to bind the incoming request to a parameter in the action method. You will get a run-time error if the class doesn’t contain default constructor.</p>

<p>So, if we need to have a default constructor for a fsharp record type when it get compiled, we need to decorate the record type with the <a href="https://msdn.microsoft.com/en-us/library/hh289724.aspx">CLIMutable attribute</a></p>

<p>The Ppesence of this attribute enables the compiler to generate the default constructor and the property setters when the code gets compiled to IL</p>

<p><img class="center border" src="/images/fs_cs_interop/Record_Type_Attr_Compilation.png"></p>

<h2 id="using-dynamic-types">Using Dynamic Types</h2>

<p>In C#, we can create a <a href="https://msdn.microsoft.com/en-IN/library/dd264736.aspx">dynamic type</a> which bypasses static type checking and helps to hold the data together without declaring any types. </p>

<p>The <a href="http://stackoverflow.com/questions/14896013/how-viewbag-in-asp-net-mvc-works">ViewBag feature</a> in Asp.Net MVC is a one of the best examples of using dynamic types. It allows you to put any arbitary data in it and use them in the razor views.</p>

<p>There is no straightforward way to access the dynamic types in fsharp.</p>

<p><img class="center border" src="/images/fs_cs_interop/ViewBagError.png"></p>

<p>If we would like to access dynamic types in fsharp we need to use the <a href="https://www.nuget.org/packages/ImpromptuInterface.FSharp/">ImpromptuInterface.FSharp</a> nuget package.</p>

<p>This package defines the <code>?</code> operator, which provides the implementation for accessing dynamic types.</p>

<p><img class="center border" src="/images/fs_cs_interop/Dynamic_Operator.png"></p>

<h2 id="summary">Summary</h2>

<p>In this blog post we have seen three tips which can help us while using C# libraries in F#. If you know any other interoperability tips, kindly leave a comment below. </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Takeaways]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2015/04/25/my-takeaways/"/>
    <updated>2015-04-25T15:09:02+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2015/04/25/my-takeaways</id>
    <content type="html"><![CDATA[<blockquote>
  <p>This is the concluding part of my blog series on <a href="/blog/2014/12/10/web-application-development-in-fsharp-using-asp-dot-net-mvc/">Web Application Development in Fsharp using ASP.NET MVC</a></p>
</blockquote>

<p>I would like to begin this blog post by thanking <a href="https://twitter.com/jsonmez">John Sonmez</a> for his inspirational video on <a href="http://simpleprogrammer.com/2014/01/09/importance-finishing-started/">the importance of finishing what you started</a>. I haven’t written any blog series <a href="/blog/2014/12/10/web-application-development-in-fsharp-using-asp-dot-net-mvc/">like this</a> before, so during this course, I was about to give up but the statement </p>

<p style="text-align:center"> <strong> Finish what you started </strong> </p>

<p>kept me going. Thank you John, I have learned a great lesson in my life from you.</p>

<p>Back to the business, In this blog post I am going to share my key takeaways on developing a complete web application in fsharp using ASP.NET MVC</p>

<h2 id="enterprise-application-development-in-fsharp">Enterprise application development in fsharp</h2>

<p>As a learner of F#, I have spent lots of time in listening to <a href="https://vimeo.com/channels/c4fsharp">the great talks</a> by the vibrant <a href="http://c4fsharp.net/">fsharp community</a>. Though those talks are great, I was intrigued, how these individual pieces would work together in creating a complete enterprise application. Is it really possible? </p>

<p>Developing this complete <a href="https://github.com/tamizhvendan/fsharp-phonecat">fsharp-phonecat</a> application answered my questions and I am sure it answered yours too. It may appear hard because of less sources and functional paradigm, but once you figured it out, it would be a cakewalk.</p>

<p>The bottom line is <strong>we can create a complete enterprise application in fsharp</strong>. As a matter of fact, there is a book written on this subject, <a href="http://www.amazon.com/gp/product/1617291323/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1617291323&amp;linkCode=as2&amp;tag=bor0b-20&amp;linkId=SYG2CSFARCGD5KUL">F# Deep Dives</a></p>

<p>If you are not convinced yet, read <a href="http://fsharp.org/testimonials/">these testimonials</a> from the commercial users of F#. </p>

<h2 id="leveraging-the-existing-net-ecosystem">Leveraging the existing .NET ecosystem</h2>

<p>In my perspective F# is a <em>pragmatic functional programming language</em>. In addition to lot of elegant features of the language, it works seamlessly with the existing .NET libraries. This one characteristic I would say is a blessing. You can say, ‘This feature is really cool’, but at the end of the day it should help you to get the job done. F# is not only cool, It can help you too!</p>

<p>In the sample application we have leveraged the <a href="/blog/2014/12/17/phonecat-backend-using-web-api-and-typeproviders/">Web Api 2</a>, <a href="/blog/2014/12/23/step-2-fsharp-phonecat-views-using-razor/">Razor Views</a>, <a href="/blog/2015/02/04/step-6-authentication-using-owin-middleware-and-asp-dot-net-identity/">Asp.Net Identity</a> and the Asp.Net framework itself. So, you can do whatever you are doing in C# in F#! ( With less lines of code <i class='emoji smile'></i>)</p>

<h2 id="using-f-in-your-existing-c-codebase">Using F# in your existing C# Codebase</h2>

<p>As F# is a <a href="http://en.wikipedia.org/wiki/List_of_CLI_languages#CLI_languages">CLI Language</a> it can be added to your existing C# solution. All you need to do just create a new F# project in the solution and this project can work seamlessly with the other projects in the solution. </p>

<p>In the sample application, we have a <a href="/blog/2015/01/18/step-5-advanced-search-dsl-using-fparsec/">created a parser</a> for a search criteria DSL using <a href="http://www.quanttec.com/fparsec/">FParsec</a>. Doing this in C# would be very hard. So we can easily wrap this F# implementation in a class library and use it from any C# codebase. </p>

<p>In the <a href="/blog/2015/01/06/step-4-build-automation-using-fake/">step-5</a> we have automated build process using <a href="http://fsharp.github.io/FAKE/">FAKE</a> which is <em>far</em> better than its counterpart verbose MSBuild xml files. This can be used in any .NET projects!</p>

<h2 id="less-is-beautiful">Less is beautiful</h2>

<p>Another cool aspect of F# is you will be writing less lines of code to achieve complex things. It took only <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/5/Domain/SearchParser.fs#L10-L44">35 lines of code</a> to create a parser for a DSL. </p>

<p><a href="http://fsharpforfunandprofit.com/rop/">Railway Oriented Programming</a> by <a href="https://twitter.com/ScottWlaschin">Scott Wlaschin</a> is an absolute gem. If you would like to know what F# brings to your plate, I strongly suggest you to listen his talk on <a href="http://fsharpforfunandprofit.com/fppatterns/">Functional Design Patterns</a>. The way you see programming will never be the same after you have seen this presentation. </p>

<h2 id="summary">Summary</h2>

<p>In nutshell, F# is just an awesome programming language to create applications. I hope you would have enjoyed this series. If you have any suggestions, kindly leave a comment.</p>

<p>I would like to conclude this post with the below formula</p>

<p style="text-align:center"> <strong> Python + .NET = F# </strong> </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Step-10 Refactoring Composition Root]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2015/04/02/step-10-refactoring-composition-root/"/>
    <updated>2015-04-02T17:07:23+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2015/04/02/step-10-refactoring-composition-root</id>
    <content type="html"><![CDATA[<blockquote>
  <p>This is step 10 of my blog series on <a href="/blog/2014/12/10/web-application-development-in-fsharp-using-asp-dot-net-mvc/">Web Application Development in Fsharp using ASP.NET MVC</a></p>
</blockquote>

<p> </p>

<p>In the fsharp-phonecat application that we are creating as part of this series, to <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/9/Web/MvcInfrastructure.fs#L14-L48">create the controller instances</a>, we are using <a href="http://blog.ploeh.dk/2014/06/10/pure-di/">Pure DI</a>. Though this <a href="http://blog.ploeh.dk/2011/07/28/CompositionRoot/">composition root</a> solves the problem of <a href="http://blog.ploeh.dk/2012/11/06/WhentouseaDIContainer/">dependency injection</a>, the quality of the code is not up to the mark. </p>

<p>In this blog post we are going to refactor this and make it shorter and more F# idiomatic.</p>

<h3 id="the-current-state-of-getcontrollerinstance-method">The current state of GetControllerInstance method</h3>

<p><img class="border center" src="/images/fsharp_phonecat/step_10/if_else_tangle.png"></p>

<p> 
 </p>

<p>It’s if full of <strong>if..else if.. else if.. else</strong> and the method is too long</p>

<p>As depicted in the above screenshot, the <code>GetControllerInstance</code> method does the following three things for all the controller types in the application</p>

<ul>
  <li>Checks the incoming controller type</li>
  <li>Creates the requested controller instance</li>
  <li>Returns the created controller instance</li>
</ul>

<p><img class="border center" src="/images/fsharp_phonecat/step_10/home_controller_creation.png"></p>

<p>This can be refactored to a function</p>

<p><img class="border center" src="/images/fsharp_phonecat/step_10/home_controller_function.png"></p>

<p>The function takes a type and returns an <a href="http://fsharpforfunandprofit.com/posts/the-option-type/">Option type</a> of <code>IController</code></p>

<p>Let’s do the same for an another controller creation which is little complex than this.</p>

<p><img class="border center" src="/images/fsharp_phonecat/step_10/phone_controller_function.png"></p>

<p>Here in this case to create an instance of <code>PhoneController</code> we need two additional parameters, Phones sequence and anonymous id of the session.</p>

<p>With these functions in place, the <code>GetControllerInstance</code> method would look like as below</p>

<p><img class="border center" src="/images/fsharp_phonecat/step_10/match_with_some_and_none.png"></p>

<p>Though the functions that have created has reduced the size of the method, it has introduced an another problem (<a href="http://raynos.github.io/presentation/shower/controlflow.htm?full#PyramidOfDoom">Pyramid Of Doom</a>) as indicated by the arrow in the screenshot. </p>

<p>We can get rid of this using a bind function as we did in <a href="/blog/2015/03/02/step-7-validation-and-error-handling-using-rop/">validation step using rop</a>.</p>

<p>The downside of the <a href="http://fsharpforfunandprofit.com/posts/computation-expressions-bind/">bind function</a> is it’s not generic and we can’t reuse the existing bind function that we have created for doing validation.</p>

<p>So, going with this approach would lead to adding more code which is not in alignment with the objective of this refactoring.</p>

<p>What can we do ??</p>

<p> 
 
 
 
 
 
 
 
 
 
 
 </p>

<p>The answer is <strong><a href="http://en.wikibooks.org/wiki/F_Sharp_Programming/Active_Patterns">Active Patterns</a></strong></p>

<blockquote>
  <p>Active Patterns allow programmers to wrap arbitrary values in a union-like data structure for easy pattern matching. For example, its possible wrap objects with an active pattern, so that you can use objects in pattern matching as easily as any other union type -    <em>F# Programming WikiBook</em></p>
</blockquote>

<p>We are going to use <a href="http://en.wikibooks.org/wiki/F_Sharp_Programming/Active_Patterns#Partial_Active_Patterns">Partial Active Patterns</a> to refactor the composition root.</p>

<h3 id="creating-partial-active-patterns">Creating Partial Active Patterns</h3>

<p>Let’s start by creating a partial active pattern for <code>HomeController</code></p>

<p><img class="border center" src="/images/fsharp_phonecat/step_10/home_controller_active_pattern.png"></p>

<p>As described in the screenshot, it’s very similar to the <code>createHomeController</code> function and the only difference is the addition of the <em>Banana Clips</em> (yellow ellipses). The <code>_</code> symbol makes the active pattern partial.  </p>

<p>The partial active patterns always returns an <code>Option</code> type. </p>

<p>Partial active patterns support defining pattern with multiple parameters. So we can change the <code>createPhoneController</code> function as below</p>

<p><img class="border center" src="/images/fsharp_phonecat/step_10/phone_controller_active_pattern.png"></p>

<p>Great! We are almost done with the refactoring. The pending step is leveraging these partial active patterns in the <code>GetControllerInstance</code> method.</p>

<p>It’s where the <strong>beauty of pattern matching</strong> reveals!</p>

<p><img class="border center" src="/images/fsharp_phonecat/step_10/home_controller_pattern_matching.png"></p>

<p>What’s happening here? </p>

<ul>
  <li>Based on the Active Pattern Name (<code>HomeController</code>), the control goes to the corresponding active pattern</li>
  <li>The value we are matching (<code>controllerType</code>) passed as argument.</li>
  <li>The value returned by the active pattern (instance of <code>HomeController</code>) is assigned to the <code>homeController</code> literal in the match expression</li>
  <li>If none of the pattern has met the matching criteria, it executes the default match (raising the exception)</li>
</ul>

<p>It does the same thing for the Active Patterns with multiple parameters</p>

<p><img class="border center" src="/images/fsharp_phonecat/step_10/phone_controller_pattern_matching.png"></p>

<p>The only thing to note here is, the value against which we are matching is always passed as a last argument.</p>

<p>That’s it!!</p>

<p>After completing the creation of partial active patterns for all the other controller types in the application, the <code>GetControllerInstance</code> would be shorter like this</p>

<p><img class="border center" src="/images/fsharp_phonecat/step_10/composition_root_final.png"></p>

<p> 
 
 
 
 
 
 
 </p>

<p><img class="border center" src="/images/fsharp_phonecat/step_10/awesomeness.gif"></p>

<h3 id="summary">Summary</h3>

<p>Moving from C# to F#, it’s not just change in syntax! It’s much more than that. The perfect analogy for this refactoring is the classic proverb <em>When in Rome, do as the Romans do</em>. You can find the complete source code of this step in the <a href="https://github.com/tamizhvendan/fsharp-phonecat/tree/10">phonecat github repository</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Step-9 Adding Checkout]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2015/03/28/step-9-adding-checkout/"/>
    <updated>2015-03-28T13:07:20+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2015/03/28/step-9-adding-checkout</id>
    <content type="html"><![CDATA[<blockquote>
  <p>This is step 9 of my blog series on <a href="/blog/2014/12/10/web-application-development-in-fsharp-using-asp-dot-net-mvc/">Web Application Development in Fsharp using ASP.NET MVC</a></p>
</blockquote>

<p>In the <a href="/blog/2015/03/20/step-8-adding-shopping-cart/">last blog post</a> we have added the shopping cart feature to our phonecat application and in this blog post we are going to implement the checkout feature.</p>

<p>Implementing the checkout feature involves two steps.<br />
  1. Adding a View Cart Page<br />
  2. Processing the Checkout and creating an order</p>

<h3 id="adding-a-view-cart-page">Adding a View Cart Page</h3>

<p><img class="border" src="/images/fsharp_phonecat/step_9/view-cart.png"></p>

<p>As we have done in the previous posts, let’s begin by extending our shopping cart domain. The first step is to add a function to retrieve the items in the shopping cart. </p>

<p>Open <code>ShoppingCart</code> module in the <strong>Domain</strong> project and update it as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>let getItems cart =
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  match cart with
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  | Empty -&gt; Seq.empty
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  | Active items -&gt; items |&gt; List.toSeq
</pre></div>
</div>
</div>

<p>The above function retrieves the phone ids present in the cart. In order to show a detailed checkout page, we need to get the associated phone details of these phone ids. Right now we don’t have this capability in our app so let’s add them.</p>

<p>Open <code>Phones</code> module in the <strong>Domain</strong> project and add the below functions</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>let contains x = Seq.exists ((=) x)
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>let getPhonesByIds (phones : seq&lt;Phone&gt;) phoneIds =  
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  phones |&gt; Seq.filter (fun p -&gt; contains p.Id phoneIds)
</pre></div>
</div>
</div>

<p>The <code>contains</code> function is a utility function which checks whether the given element is present in a <code>seq</code> or not and the <code>getPhonesByIds</code> function filters phones in the system by the incoming phone ids and returns the requested ones.</p>

<p>Now we have all the bare bones and the next step is defining a controller to serve the View Cart Page.</p>

<p>Add a new Source file <code>CheckoutController</code> in the <strong>Web</strong> project under <em>Controllers</em> directory and update it as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>type CheckoutController
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  (
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>      getPhones : seq&lt;string&gt; -&gt; seq&lt;Phone&gt;,
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>      cart : Cart
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  ) = 
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  inherit Controller ()
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  member this.ViewCart () =
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    cart
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    |&gt; getItems 
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    |&gt; getPhones
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    |&gt; this.View
</pre></div>
</div>
</div>

<p>The <code>ViewCart</code> action method uses the two functions that we have defined before and renders the <code>ViewCart</code> view. Add a new razor view with the name <code>ViewCart</code> in the <em>Views\Checkout</em> Directory and update it <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/9/Web/Views/Checkout/ViewCart.cshtml#L1-L30">as described here</a>. </p>

<p>The final step in rendering this view is gluing the components together in the <code>CheckoutController</code> controller instance creation. </p>

<p>To get the cart associated with the given session id we have added <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/8/Web/Infrastructure.fs#L41-L45">a piece of logic</a> in the last step which checks the presence of <code>Cart</code> for the given anonymous id in the <code>CartStorage</code> and creates the cart if it doesn’t contain. Since we need the same logic here, let’s move this logic to a function <code>getOrCreate</code> in the <code>CartStorage</code> module and reuse it in both the places</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>let getOrCreate anonymousId =
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  match get anonymousId with
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  | Some cart -&gt; cart
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  | None -&gt; create anonymousId ShoppingCart.Empty
</pre></div>
</div>
</div>
<p>Then open <code>MvcInfrastructure</code> module in the <strong>Web</strong> project and update it as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>type CompositionRoot(phones : seq&lt;PhoneTypeProvider.Root&gt;) =          
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  inherit DefaultControllerFactory() with
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    override this.GetControllerInstance(requestContext, controllerType) = 
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    // ... existing code ...
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    else if controllerType = typeof&lt;CheckoutController&gt; then
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>      let anonymousID = requestContext.HttpContext.Request.AnonymousID
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>      let shoppingCart = CartStorage.getOrCreate anonymousID
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>      let getPhonesByIds = phones |&gt; Seq.map TypeProviders.ToPhone |&gt; Phones.getPhonesByIds
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>      let checkoutController = new CheckoutController(getPhonesByIds, shoppingCart)
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>      checkoutController :&gt; IController
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    // ... existing code ...
</pre></div>
</div>
</div>

<p>The composition of <code>CheckoutController</code> is similar to that of other controllers in the application. We get the cart associated with the given anonymous id and then create a partial applied function of <code>Phones.getPhonesByIds</code> by passing the first argument (phones in the app) alone.</p>

<p>That’s it. The Cart View is up and running!</p>

<h3 id="processing-the-checkout">Processing the Checkout</h3>

<p>As mentioned in the beginning, the next step after displaying the shopping cart page is processing the checkout and creating an order. </p>

<p>Let’s begin by defining the domain for Orders.</p>

<p>Create a source file with the name <code>Orders</code> in the <strong>Domain</strong> project and add the following types</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>module Orders =
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  type OrderRequest = {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    UserId : string
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    ProductIds : ProductId seq
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  }
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  type OrderConfirmed = {
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    OrderId : string
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    UserId : string
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    ProductIds : ProductId seq
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  }
</pre></div>
</div>
</div>

<p>The <code>OrderRequest</code> type represents the order being placed by the user and the <code>OrderConfirmed</code> type represents the successful order creation.</p>

<p>To Keep things simple, we are just going to see the order confirmation and we are intentionally leaving out error handling and validation. We can easily <a href="/blog/2015/03/02/step-7-validation-and-error-handling-using-rop/">add them as we did</a>  it in the user registration step and I leave it you as an exercise.</p>

<p>The next step is storing the incoming order. </p>

<p>Create a source file with the name <code>OrderStorage</code> in the <strong>DataAccess</strong> project and add the following function</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>module OrderStorage =  
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  let placeOrder (orderRequest : OrderRequest) =
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    let orderId = Guid.NewGuid().ToString()
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    {OrderId = orderId; UserId = orderRequest.UserId; ProductIds = orderRequest.ProductIds}
</pre></div>
</div>
</div>

<p>Here we are just faked the implementation of order storage by generating a new <code>Guid</code> and returning it as Order Id</p>

<p>Now it’s time for adding a <code>OrderController</code> in the <strong>Web</strong> project to handle the checkout and creating the order using the components defined above.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>type OrderController
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  (
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    cart : Cart,
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    placeOrder : OrderRequest -&gt; OrderConfirmed,
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    updateCart : Cart -&gt; Cart
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  ) =
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  inherit Controller ()
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  [&lt;Authorize&gt;]
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  member this.Checkout () =
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    let identity = base.User.Identity :?&gt; ClaimsIdentity
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    let userId = identity.FindFirst(ClaimTypes.Name).Value
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    let orderConfirmed = placeOrder { UserId = userId; ProductIds = getItems cart}
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    updateCart Cart.Empty |&gt; ignore
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    this.View(orderConfirmed);
</pre></div>
</div>
</div>

<p>The checkout method is straightforward. We get the <code>UserId</code> from the <code>User.Identity</code> property and place the order using it. Upon successful order confirmation, we are clearing the shopping cart and rendering the <code>Checkout</code> view.</p>

<p><img class="border" src="/images/fsharp_phonecat/step_9/order-confirmation.png"></p>

<p>The important thing to notice here the <code>Authorize</code> attribute. Just like any other e-commerce portal, we are not allowing anonymous check out here. The presence of <a href="https://msdn.microsoft.com/en-us/library/system.web.mvc.authorizeattribute%28v=vs.118%29.aspx">this authorize attribute</a> ensures that only logged in users are checking out and in case if they are not logged in it would redirect the user to the login page.</p>

<p>The last step is updating the composition root to create the <code>OrderController</code> instance.</p>

<p>Open <code>MvcInfrasturcture</code> and update it as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>type CompositionRoot(phones : seq&lt;PhoneTypeProvider.Root&gt;) =          
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  inherit DefaultControllerFactory() with
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    override this.GetControllerInstance(requestContext, controllerType) = 
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    // ... existing code ...
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    else if controllerType = typeof&lt;OrderController&gt; then
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>      let anonymousID = requestContext.HttpContext.Request.AnonymousID
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>      let shoppingCart = CartStorage.getOrCreate anonymousID
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>      let updateCart = CartStorage.update anonymousID
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>      let orderController = new OrderController(shoppingCart, OrderStorage.placeOrder, updateCart)
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>      orderController :&gt; IController
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    // ... existing code ...
</pre></div>
</div>
</div>

<p>We are done!</p>

<h3 id="summary">Summary</h3>

<p>We have come a long way from just setting up the visual studio project to a complete prototype of an e-commerce site and I hope you would have enjoyed this series of blog post. In the next blog post we are going to refactor the <code>CompositionRoot</code>which is getting clumsy with a series of <code>if..else if..</code> expressions using Active Patterns and I will be wrapping this series by an another post which will be reflecting back on what I have learned by writing this blog series.</p>

<p>You can find the source code of this step in the <a href="https://github.com/tamizhvendan/fsharp-phonecat/tree/9">fsharp-phonecat github repository</a></p>

<p>Thanks for reading!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Step-8 Adding Shopping Cart]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2015/03/20/step-8-adding-shopping-cart/"/>
    <updated>2015-03-20T11:49:35+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2015/03/20/step-8-adding-shopping-cart</id>
    <content type="html"><![CDATA[<blockquote>
  <p>This is step 8 of my blog series on <a href="/blog/2014/12/10/web-application-development-in-fsharp-using-asp-dot-net-mvc/">Web Application Development in Fsharp using ASP.NET MVC</a></p>
</blockquote>

<p>In the <a href="/blog/2015/03/02/step-7-validation-and-error-handling-using-rop/">last blog post</a> we have seen how to do validation and error handling in fsharp and in this blog post we are going to add shopping cart feature to the phone-cat application that we are developing in this blog series. To keep this blog post simple, we are going to see only adding an item to shopping cart. Remvoing an item from shopping cart is a straightforward implementation and I leave it to you as an exercise</p>

<p><img src="/images/fsharp_phonecat/step_8/cart_intro.png"></p>

<h3 id="the-shopping-cart-domain">The Shopping Cart Domain</h3>

<p>Let’s start with defining the domain model for handling shopping cart. Create a source file <code>ShoppingCart</code> in the <strong>Domain</strong> project and add the following code</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>module ShoppingCart =    
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  type ProductId = string
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  type Cart =
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    | Empty
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    | Active of ProductId List
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  let addItem cart productId =
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    match cart with
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    | Empty -&gt; Active [productId]
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    | Active items -&gt; Active (productId :: items)
</pre></div>
</div>
</div>

<p>The <code>ProductId</code> is an alias of <code>string</code> type represents the id of the phone.</p>

<p>The <code>Cart</code> is a <code>Sum</code> type represents the two possible states of Shopping Cart. The <code>Cart</code> would be either empty or contain product ids that has been added to the cart.</p>

<p>We have added a function which adds a product id to the cart. It just checks the state of the cart and based on the state it either creates the cart with <code>Active</code> state or appends the product id to the existing list.</p>

<p>Thanks to the strong fsharp type system, we have modeled the domain with less lines of code.</p>

<h3 id="persisting-shopping-cart">Persisting Shopping Cart</h3>

<p>Now we have the domain logic to represent the shopping cart and adding items to it. The next step is persisting the cart. We can persist it anywhere as the domain model is persistent ignorant. To keep things simple, we will be persisting it in-memory. </p>

<p>As we did during the <a href="/blog/2015/01/02/step-3-phonecat-recommendation-system-using-f-number-agents/">recommendation step</a> we will be using a dictionary to store the cart with Asp.Net’s <a href="http://msdn.microsoft.com/en-us/library/system.web.httprequest.anonymousid%28v=vs.110%29.aspx">anonymousId</a> as the key. </p>

<p>Create a source file <code>CartStorage</code> in the <strong>DataAccess</strong> project and update it as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>module CartStorage =  
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  let private inMemoryStorage = 
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    new Dictionary&lt;string, Cart&gt;()
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  let create anonymousId cart = 
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    inMemoryStorage.Add(anonymousId, cart)
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    cart
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  let update anonymousId cart =
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    inMemoryStorage.Remove(anonymousId) |&gt; ignore
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    create anonymousId cart
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>  let get anonymousId =
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    match inMemoryStorage.ContainsKey(anonymousId) with
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    | true -&gt; Some inMemoryStorage.[anonymousId] 
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    | _ -&gt; None
</pre></div>
</div>
</div>

<p>The code is very straight forward to understand. It contains typical CRUD operations of a shopping cart using an in-memory dictionary object.</p>

<h3 id="shopping-cart-api">Shopping Cart Api</h3>

<p>It’s time to code the api for the shopping cart. Let’s add a source file <code>ShoppingCartController</code> in the <strong>Web</strong> project and update it as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>[&lt;RoutePrefix(&quot;api/cart&quot;)&gt;]
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>type ShoppingCartController 
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  (
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    cart : Cart,
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    updateCart : Cart -&gt; Cart
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  ) =
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  inherit ApiController () 
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  [&lt;Route(&quot;&quot;)&gt;]
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  member this.Get() = cart
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  [&lt;HttpPost&gt;]
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>  [&lt;Route(&quot;add&quot;)&gt;]
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>  member this.AddItem([&lt;FromBody&gt;]productId : string) = 
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    addItem cart productId |&gt; updateCart
</pre></div>
</div>
</div>

<p>The <code>ShoppingCartController</code> has two dependencies.<br />
  1. <code>Cart</code> - Cart associated with the current session<br />
  2. <code>updateCart</code> - a function to update the cart</p>

<p>To keep it simple, I haven’t added error handling or validation here. The action method <code>Get</code> returns the cart and the action method <code>AddItem</code> adds the item to the cart and then update the cart in the storage.</p>

<h3 id="wiring-things-up">Wiring things up</h3>

<p>Now we have all the pieces to add shopping cart to our application and the final step is tying them together. As we did it in other steps we need to do it in the composition root. Open <code>Infrastructure</code> in the <strong>Web</strong> project and update it as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>type CompositionRoot 
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  (
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    // ... Exisitng Code ...
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  ) = 
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  interface IHttpControllerActivator with           
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    member this.Create(request, controllerDescriptor, controllerType) =
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>      // ... Exisiting Code ...
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>      else if controllerType = typeof&lt;ShoppingCartController&gt; then                  
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        let anonymousID = HttpContext.Current.Request.AnonymousID
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        let shoppingCart = 
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>          match CartStorage.get anonymousID with
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>          | Some cart -&gt; cart
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>          | None -&gt; CartStorage.create anonymousID ShoppingCart.Empty
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>                                                                                  
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        let shoppingCartController = new ShoppingCartController(shoppingCart, CartStorage.update anonymousID)
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        shoppingCartController :&gt; IHttpController
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>      // ... Existing Code ...
</pre></div>
</div>
</div>

<p>Here before the creating an instance of <code>ShoppingCartController</code> we retrieve the anonymous id from the incoming request and get the cart associated with the anonymous id from the storage. In case if the cart is not available, we are creating one. For the <code>update</code> function, we pass the partially applied <code>update</code> function of <code>CartStorage</code>.</p>

<p>That’s it!!</p>

<h3 id="the-front-end-code">The front-end code</h3>

<p>In the front end, we just call the <code>ShoppingCartController</code> action methods using plain jQuery ajax methods and update the UI. Since it is out of the scope of this blog post I haven’t covered it here and you can find <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/8/Web/Scripts/site.js">the code here</a>.</p>

<h3 id="summary">Summary</h3>

<p>In this blog post we have seen how to implement shopping cart in a web application written in fsharp. I leave some exercises for you to extend it to use some other storage and also to add validation and error handling. You can find the source code in the <a href="https://github.com/tamizhvendan/fsharp-phonecat/tree/8">github phonecat repository</a>.</p>
]]></content>
  </entry>
  
</feed>
