<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: fsharp | Tamizh's Thoughts]]></title>
  <link href="http://blog.tamizhvendan.in/blog/categories/fsharp/atom.xml" rel="self"/>
  <link href="http://blog.tamizhvendan.in/"/>
  <updated>2014-12-11T16:18:13+05:30</updated>
  <id>http://blog.tamizhvendan.in/</id>
  <author>
    <name><![CDATA[Tamizhvendan S]]></name>
    <email><![CDATA[tamizh88@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Step 0 - Setting up the fsharp-phonecat Solution]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2014/12/10/step-0-setting-up-the-fsharp-phonecat-solution/"/>
    <updated>2014-12-10T22:15:50+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2014/12/10/step-0-setting-up-the-fsharp-phonecat-solution</id>
    <content type="html"><![CDATA[<blockquote>
  <p>This is step 0 of my blog series on <a href="/blog/2014/12/10/web-application-development-in-fsharp-using-asp-dot-net-mvc/">Web Application Development in Fsharp using ASP.NET MVC</a></p>
</blockquote>

<p>In this blog post, we are going to set up the visual studio solution and create the high level project structure for the <em>fsharp-phonecat</em> application. </p>

<p><strong>Let’s get started!</strong></p>

<h4 id="setting-up-visual-studio-solution">Setting Up Visual Studio Solution</h4>

<p>The first step is to create an blank visual studio solution and name it as <strong>PhoneCat</strong></p>

<p><img class="center" src="/images/fsharp_phonecat/step_0/BlankSolution.png" width="700" height="700"></p>

<p>After creating the blank solution create two fsharp class libraries and name it as <strong>Domain</strong> and <strong>DataAccess</strong> respectively.</p>

<p><img class="center" src="/images/fsharp_phonecat/step_0/ClassLibrary.png" width="700" height="700"></p>

<p>Do delete the sample fsharp files Domain1.fs, DataAccess1.fs and Script.fsx that are created by default while creating the class libraries</p>

<p>Then create a ASP.NET MVC web project using <a href="https://visualstudiogallery.msdn.microsoft.com/39ae8dec-d11a-4ac9-974e-be0fdadec71b">F# MVC 5 template</a> and name it as <em>Web</em></p>

<p><img class="center" src="/images/fsharp_phonecat/step_0/WebProject.png" width="700" height="700"></p>

<p><img class="center" src="/images/fsharp_phonecat/step_0/MVC5.png"></p>

<p>We are going to use TDD, so create test projects for each of the above projects created and name it as <strong>Domain.Tests</strong>, <strong>DataAccess.Tests</strong> and <strong>Web.Tests</strong> respectively.</p>

<p>The final project structure would look like</p>

<p><img class="center" src="/images/fsharp_phonecat/step_0/ProjectStructure.png"></p>

<p>F# MVC 5 template comes with a default Bootstrap theme and we are going to extend it by using e-commerce theme from <a href="http://startbootstrap.com/template-overviews/shop-homepage/">Start Bootstrap</a>. Download the theme and add <em>shop-homepage.css</em> to the Content directory of <strong>Web</strong> project. After adding it update <em>Global.asax.fs</em> to include this css file while bundling.</p>

<p>``` fsharp BundleConfig after adding shop-homepage.css<br />
type BundleConfig() =<br />
    static member RegisterBundles (bundles:BundleCollection) =<br />
        bundles.Add(ScriptBundle(“~/bundles/jquery”)<br />
            .Include([|”~/Scripts/jquery-{version}.js”|]))</p>

<pre><code>    bundles.Add(ScriptBundle("~/bundles/modernizr")
        .Include([|"~/Scripts/modernizr-*"|]))

    bundles.Add(ScriptBundle("~/bundles/bootstrap")
        .Include("~/Scripts/bootstrap.js", 
                    "~/Scripts/respond.js"))

    bundles.Add(StyleBundle("~/Content/css")
        .Include("~/Content/bootstrap.css",
                    "~/Content/site.css",
                    "~/Content/shop-homepage.css")) ``` 
</code></pre>

<p>Now the stage is set for awesomeness. Update <strong>_Layout.cshtml</strong> and <strong>Index.cshtml</strong> as mentioned in the bootstrap theme and run the web project.</p>

<p><img class="center" src="/images/fsharp_phonecat/step_0/HomePage.png" width="800" height="800"></p>

<p>You can checkout the code <a href="https://github.com/tamizhvendan/fsharp-phonecat/tree/0">here</a>. In the next-post we will be wiring up the backend. Stay tuned !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Application Development in Fsharp using ASP.NET MVC]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2014/12/10/web-application-development-in-fsharp-using-asp-dot-net-mvc/"/>
    <updated>2014-12-10T17:07:48+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2014/12/10/web-application-development-in-fsharp-using-asp-dot-net-mvc</id>
    <content type="html"><![CDATA[<h3 id="introduction">Introduction</h3>

<p>Fsharp is my new favorite language in recent times and I’ve been learning it for the last six months. I always believe the best way to learn a language / technology / framework is to create something using it and also learning from the mistakes while creating it. So, here is my attempt to create a sample web application in fsharp using ASP.NET MVC framework. In this series of blog posts I’m going to share my experience on creating “phone-cat” web application inspired from the <a href="https://github.com/angular/angular-phonecat">angular-phonecat</a>. </p>

<p>As it is my maiden attempt to create a relatively large web application in fsharp, if you find something that can be improved, feel free to share <em>I’m willing to learn from you.</em></p>

<h3 id="blog-series-links">Blog Series Links</h3>

<ul>
  <li><strong>Step 0</strong> - <a href="/blog/2014/12/10/step-0-setting-up-the-fsharp-phonecat-solution/">Setting up the fsharp-phonecat Solution</a></li>
  <li>Step 1 - Getting Started with fsharp-phonecat</li>
</ul>

<h4 id="upcoming-posts">Upcoming Posts</h4>

<ul>
  <li>Event Sourcing using EventStore</li>
  <li>Recommendation System using FSharp Agents, Rx and SignalR</li>
  <li>Advanced Search using FSParsec</li>
  <li>Data Access Layer using No-Sql</li>
  <li>Integration testing using TickSpec and canopy</li>
  <li>Build automation using FAKE</li>
  <li>Documentation generation using FSharp.Formatting</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[If your fsharp code compiles it usually works]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2013/08/08/if-your-fsharp-code-compiles-it-usually-works/"/>
    <updated>2013-08-08T11:39:00+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2013/08/08/if-your-fsharp-code-compiles-it-usually-works</id>
    <content type="html"><![CDATA[<div class="post">

  <p>
    When I first started learning fsharp, one of the astounding fact that hit my mind was <em>"If the code compiles it usually works!"</em> For a guy who is coming from c# and java Programming background it was bit weird! After delving deep into f# I have found it very useful and inspired by its awesomeness. In this blog-post I'll be covering some of my experiences that I come across while learning this great feature!  
  </p>

  <h3>Fever Diagnosis Program</h3>
  <p>
    Let us consider a simple fever diagnosis program. If your temperature is greater than 37.5 Celsius or 99.0 Fahrenheit then you are suffering from fever else you are all right.  
  </p>

  <h3>Defining Temperature Types</h3>
  <p>One of the cool feature that I like about f# is its less verbosity. You can do lot of magic things with less lines of code! Consider our fever diagnosis program, A temperature can be either in Celsius or in Fahrenheit. Here is the equivalent type defined in f#</p>

    <div><script src='https://gist.github.com/268f405f64ce99b19548.js?file=Temperature.fs'></script>
<noscript><pre><code>type Temperature = 
  | Celsius of double
  | Fahrenheit of double</code></pre></noscript></div>


  <p>Just 3 lines of code!</p>
  <p>The type Temperature has been defined as a <a href="http://en.wikibooks.org/wiki/F_Sharp_Programming/Discriminated_Unions">discriminated union.</a> In brief, Discriminated union represent data that can take on one of a few different types of results.</p> <p>Also in this 3 lines we have described the strongly typed alias for temperature in both Celsius and in Fahrenheit. With this code in place if you want to describe a temperature in Celsius or in Fahrenheit all you need to use the following syntax</p>

    <div><script src='https://gist.github.com/268f405f64ce99b19548.js?file=Declaration.fs'></script>
<noscript><pre><code>let tempInCelsius = Celsius 10.8
let tempInFahernheit = Fahrenheit 10.6</code></pre></noscript></div>


  <p>By defining strongly typed cases like this we can make our code cleaner and preventing ourselves from various logic errors that we usually do when we interpret the values of these types. Though we can achieve the same in c# by the following code, it is very elegant to do in f# </p>

    <div><script src='https://gist.github.com/268f405f64ce99b19548.js?file=Temperature.cs'></script>
<noscript><pre><code>public abstract class Temperature 
{
  public double Value { get; private set; }

  protected Temperature(double value) 
  {
    Value = value;
  }
}

public class Celsius : Temperature
{
  public Celsius (double value) : base(value)
  {

  }
}

public class Fahrenheit : Temperature
{
  public Fahrenheit (double value) : base(value)
  {
    
  }
} 

public class Program 
{
  public static void Main() 
  {
    Temperature tempInCelsius = new Celsius(10.8);
    Temperature tempInFahernheit = new Fahrenheit(10.6);
  }  
}</code></pre></noscript></div>


<p>34 lines of code to achieve the same!!</p>

<h3>Let's diagnosis fever</h3>
<p>With the types for the two representation of temperature in place, our next step is to check the values and find out whether the concerned person is having fever or not. You can do this in f# by using <a href="http://en.wikibooks.org/wiki/F_Sharp_Programming/Pattern_Matching_Basics">pattern matching</a></p>
<div><script src='https://gist.github.com/268f405f64ce99b19548.js?file=HasFever.fs'></script>
<noscript><pre><code>let hasFever temperature =
  match temperature with 
  | Celsius value -&gt; (value &gt; 37.5)
  | Fahrenheit value -&gt; (value &gt; 99.0)</code></pre></noscript></div>


<p>f# automatically takes care of decomposing our data into appropriate data structure and all we need to concentrate on our business logic. For a beginner the syntax might look intimidating at first sight but if we use it quite some time you will fell in love with f#</p> 

<h4>How can I call this function?</h4>
<div><script src='https://gist.github.com/268f405f64ce99b19548.js?file=CallingHasFever.fs'></script>
<noscript><pre><code>hasFever (Celsius 10.5)
hasFever (Fahrenheit 22.5)</code></pre></noscript></div>


<p>Based on the type we are passing in the hasFever function, the corresponding pattern will be matched then the value is decomposed and verified with their respective numbers. Code is prettier, isn't it ?</p>

<h3>What's the big deal in it?</h3>
<p>You might think apart from reducing the lines of code what else f# adds ?. Great! I was exactly like you when I first come across it. Later I've found out it how it can help us to save some hairs ;-) </p>

<p>Let us assume that we forget to handle Fahrenheit in hasFever function</p>
    <div><script src='https://gist.github.com/268f405f64ce99b19548.js?file=CompilerError.fs'></script>
<noscript><pre><code>let hasFever temperature =
  match temperature with 
  | Celsius value -&gt; (value &gt; 37.5)</code></pre></noscript></div>

<p>Typically in C# if we missed to handle one of the cases like this we won't be getting any compiler error and It'd crash the application in the runtime. But in f#, the above code would result in following compiler error</p>
<pre>warning FS0025: Incomplete pattern matches on this expression, For example, the value 'Fahrenheit (_)' may indicate a case not covered by the pattern(s)</pre>
<p>So, if you make any logical error like this is your f# code, compiler will show compile time errors and prevents you from building buggy code!</p>

<h3>Summary</h3>
<p>If you follow the idioms of f#, it will let you write a better code and even if do some logical error the compiler will come as a rescue!. You can check the source code live in <a href="http://www.tryfsharp.org/create/tamizhvendan/fever_diagnosis.fsx">tryfsharp</a> </p>
</div>
]]></content>
  </entry>
  
</feed>
