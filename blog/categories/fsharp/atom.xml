<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: fsharp | Tamizh's Thoughts]]></title>
  <link href="http://blog.tamizhvendan.in/blog/categories/fsharp/atom.xml" rel="self"/>
  <link href="http://blog.tamizhvendan.in/"/>
  <updated>2015-02-20T07:07:53+05:30</updated>
  <id>http://blog.tamizhvendan.in/</id>
  <author>
    <name><![CDATA[Tamizhvendan S]]></name>
    <email><![CDATA[tamizh88@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Step-6 Authentication using Owin authentication Middleware and ASP.NET Identity]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2015/02/04/step-6-authentication-using-owin-middleware-and-asp-dot-net-identity/"/>
    <updated>2015-02-04T17:24:22+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2015/02/04/step-6-authentication-using-owin-middleware-and-asp-dot-net-identity</id>
    <content type="html"><![CDATA[<blockquote>
  <p>This is step 6 of my blog series on <a href="/blog/2014/12/10/web-application-development-in-fsharp-using-asp-dot-net-mvc/">Web Application Development in Fsharp using ASP.NET MVC</a></p>
</blockquote>

<p>In the <a href="/blog/2015/01/18/step-5-advanced-search-dsl-using-fparsec/">last blog post</a> we have added an interactive feature to search phones and in this blog post we are going to add authentication to our PhoneCat application using Owin Authentication Middleware and ASP.NET identity.</p>

<p>In the first half of this blog post we are going to see how to implement a new user registration workflow </p>

<p><img src="/images/fsharp_phonecat/step_6/registration_workflow.png"></p>

<p>And in the second half, we are going to see how to do authentication using the registered login credentials</p>

<p><img src="/images/fsharp_phonecat/step_6/login_workflow.png"></p>

<h3 id="owin-authentication-middleware-in-brief">Owin Authentication Middleware in brief</h3>

<p>In the <a href="https://msdn.microsoft.com/en-us/magazine/dn451439.aspx">Owin Specification</a>, a middleware access the request before it reaches the underlying web framework. You can view the authentication middleware as gate keeper who checks the incoming request, if it is authenticated it let the request to go through the other middlewares in the pipeline else it bypasses the pipeline and take a different route (usually redirecting to the login page)</p>

<p>In the blog post we are going to use cookie based authentication middleware which is similar to the <a href="https://msdn.microsoft.com/en-us/library/7t6b43z4%28v=vs.140%29.aspx">Asp.Net Forms Authentication</a> and it also supports <a href="https://msdn.microsoft.com/en-us/library/system.security.claims.claim(v=vs.110).aspx">Claims</a>.</p>

<p>Another appreciable feature in Owin it is upto us on how to validate the incoming user credentials. We can plug it to any external authentication providers like Google, Facebook, etc., or using Active Directory or Asp.Net Identity. Here we are going to validate the user credentials using <a href="http://odetocode.com/blogs/scott/archive/2013/11/25/asp-net-core-identity.aspx">Asp.Net Identity framework</a> which provides the required interfaces for handling the authentication and <a href="http://odetocode.com/blogs/scott/archive/2014/01/03/asp-net-identity-with-the-entity-framework.aspx">Entity Framework Identity</a> which provides the concrete implementations for this Identity interfaces.</p>

<h3 id="setting-up-the-infrastructure">Setting up the infrastructure</h3>

<p>Create a new F# class library project with the name <code>Identity</code> and install the Microsoft <a href="https://www.nuget.org/packages/Microsoft.AspNet.Identity.EntityFramework/">AspNet.Identity.EntityFramework</a> nuget package which provides a pluggable data store for the user identity management using Entity Framework.</p>

<p>Then add a source file in the <code>Identity</code> project with the name <code>User</code> and update it as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>open Microsoft.AspNet.Identity.EntityFramework
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>[&lt;AllowNullLiteral&gt;]
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>type User() = 
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  inherit IdentityUser()
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  member val Name = &quot;&quot; with get, set
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>type UserDbContext() =
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  inherit IdentityDbContext&lt;User&gt;(&quot;IdentityConnection&quot;)
</pre></div>
</div>
</div>

<p>The <code>IdentityUser</code> represents the default implementation of <a href="https://msdn.microsoft.com/en-us/library/microsoft.aspnet.identity.iuser%28v=vs.108%29.aspx">IUser</a> interface which provides the basic properties for a user. We can extend it by adding our custom properties. Here we have added a custom property called <code>Name</code> which represents the name of the user.</p>

<p>The <a href="https://msdn.microsoft.com/en-us/library/ee353608.aspx">AllowNullLiteral</a> attribute is one of the feature in F# which explicitly make a type to allow null as one of its value. F# by default doesn’t support null value for its types and the beauty is you will get a compiler error if you assign null to an identifier! Pretty cool isn’t it? No Null Exception, <a href="http://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare">No Billion Dollar Mistake</a>! Then why we are allowing it explicitly here. Well, it has been added here for a reason and I will reveal it later in this blog post</p>

<p>The <code>IdentityDbContext</code> represents the data store abstraction of Identity entities like Users, Roles, Claims and Logins. The <code>UserDbContext</code> is just a subclass of <code>IdentityDbContext</code> which tells Entity Framework to use the connection string name <code>IdentityConnection</code></p>

<h3 id="setting-up-user-registration">Setting up User Registration</h3>

<p>With all the needed infrastructure in place its time to do the actual work and lets start with adding a provision for registering new user.</p>

<p>In the <code>Web</code> project add the reference to the <code>Identity</code> project and install the following nuget packages</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>Microsoft.Owin.Security.Cookies
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>Microsoft.Owin.Host.SystemWeb
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>Microsoft.AspNet.Identity.EntityFramework
</pre></div>
</div>
</div>

<p>Create a controller with the name <code>AuthenticationController</code> in the <code>Web</code> project and update it as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>[&lt;CLIMutable&gt;]
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>type RegisterViewModel = {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  Name : string
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  Email : string
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  Password : string
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>}
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>type AuthenticationController (userManager : UserManager&lt;User&gt;) = 
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  inherit Controller()
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  member this.Register() = this.View()
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
</pre></div>
</div>
</div>
<p>The <code>AuthenticationController</code> depends on <code>UserManager</code> to take care of managing users. <a href="https://msdn.microsoft.com/en-us/library/dn613290%28v=vs.108%29.aspx">UserManager</a> is an abstraction defined in the <strong>AspNet.Identity</strong> assembly. It provides various APIs to work with the underlying user datastore. </p>

<p>As the name indicates <code>RegisterViewModel</code> represents the view model for Registration View. The <a href="https://msdn.microsoft.com/en-us/library/hh289724.aspx">CLIMutable</a> attribute creates a default constructor and “getters and setters” for all the properties of a record type when it is compiled to IL and here it makes the <code>RegisterViewModel</code> compatible with the Asp.Net <a href="https://msdn.microsoft.com/en-us/library/system.web.mvc.defaultmodelbinder(v=vs.118).aspx">DefaultModelBinder</a> which expects the types to have default constructor to bind the incoming request.</p>

<p>The action method <code>Register</code> simply renders the Register View. This view not created yet so lets add it. Create a cshtml file with the name <em>Register.cshtml</em> in the directory <strong>Views/Authentication</strong>. </p>

<p>This is a strongly typed view of type <code>RegisterViewModel</code></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>@model PhoneCat.Web.Controllers.RegisterViewModel
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="tag">&lt;h3&gt;</span>Register New User<span class="tag">&lt;/h3&gt;</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>@using (Html.BeginForm(&quot;Register&quot;, &quot;Authentication&quot;, FormMethod.Post))
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>{
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  @Html.AntiForgeryToken()
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  @Html.ValidationSummary()  
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>      
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  @Html.TextBoxFor(m =<span class="error">&gt;</span> m.Name)
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  @Html.TextBoxFor(m =<span class="error">&gt;</span> m.Email)
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>   
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>  @Html.PasswordFor(m =<span class="error">&gt;</span> m.Password)
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>      
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>  <span class="tag">&lt;button</span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">submit</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">btn btn-primary</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>Create<span class="tag">&lt;/button&gt;</span>  
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>}
</pre></div>
</div>
</div>
<p><em>Note: I’ve intentionally ignored the bootstrap css form styles here to keep the code snippet less noisy</em></p>

<p><img src="/images/fsharp_phonecat/step_6/new_user_registration.png"></p>

<p>It’s a typical razor view representing the registration screen. For the sake of simplicity I’ve ignored the retype password field. </p>

<p>The next step is handling the new user registration POST request.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>[&lt;HttpPost&gt;]
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>[&lt;ValidateAntiForgeryToken&gt;]
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>member this.Register(registerViewModel : RegisterViewModel) : ActionResult =
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  let user = new User(Name = registerViewModel.Name, 
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>                      UserName = registerViewModel.Email , 
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>                      Email = registerViewModel.Email)
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  let userCreateResult = userManager.Create(user, registerViewModel.Password)
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  if (userCreateResult.Succeeded) then          
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    this.RedirectToAction(&quot;Index&quot;, &quot;Home&quot;) :&gt; ActionResult
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>  else
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    userCreateResult.Errors
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    |&gt; Seq.iter(fun err -&gt; this.ModelState.AddModelError(&quot;&quot;, err))
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    this.View(registerViewModel) :&gt; ActionResult 
</pre></div>
</div>
</div>

<p>Add the above action method in the <code>AuthenticationController</code> to create new user. It creates a <code>User</code> object from the <code>RegisterViewModel</code> and use it to create a new user via <code>UserManager</code>. We are using <code>Email</code> as the <code>UserName</code> in the above code snippet</p>

<p>If the user creation is successful, we are redirecting the user to the home page else we are showing the error messages to the user. After we implemented the login we will modify the above logic to sign in after successful registration.</p>

<p>The next task is creation of <code>AuthenticationController</code> instance. Open <code>MvcInfrastructure</code> that we have <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/2/Web/MvcInfrastructure.fs">created in the step-2</a> and update it as below.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>let private createUserManager () =
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  let userManager = new UserManager&lt;User&gt;(new UserStore&lt;User&gt;(new UserDbContext()))
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  let userValidator = new UserValidator&lt;User&gt;(userManager)
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  userValidator.AllowOnlyAlphanumericUserNames &lt;- false
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  userManager.UserValidator &lt;- userValidator
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  userManager
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>type CompositionRoot(phones : seq&lt;PhoneTypeProvider.Root&gt;) =          
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  inherit DefaultControllerFactory() with
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    override this.GetControllerInstance(requestContext, controllerType) = 
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>      // ... Existing code ...
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>      else if controllerType = typeof&lt;AuthenticationController&gt; then
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        let authenticationController = new AuthenticationController(createUserManager())
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>        authenticationController :&gt; IController
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>      // ... Existing code ...
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>
</pre></div>
</div>
</div>
<p>As we are using email as username we need to change the user validator in the <code>UserManager</code> to allow the alphanumeric characters in the username.</p>

<p>The final step is providing the connection string to access the identity database. Open the <strong>Web.config</strong> file and add the following</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="tag">&lt;connectionStrings&gt;</span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>    <span class="tag">&lt;add</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">IdentityConnection</span><span class="delimiter">&quot;</span></span> 
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>      <span class="attribute-name">connectionString</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Data Source=localhost;Initial Catalog=PhoneCatIdentity;Integrated Security=True</span><span class="delimiter">&quot;</span></span> 
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>      <span class="attribute-name">providerName</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">System.Data.SqlClient</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  <span class="tag">&lt;/connectionStrings&gt;</span>
</pre></div>
</div>
</div>

<p>As we are using Entity Framework’s Code First here, the schema will be generated dynamically when we run the code for the very first time.</p>

<p>That’s it. We have wired up everything to create a new user!</p>

<h3 id="setting-up-user-login">Setting up User Login</h3>

<p>As we are going to use owin <a href="http://blogs.msdn.com/b/webdev/archive/2013/07/03/understanding-owin-forms-authentication-in-mvc-5.aspx">cookies based authentication</a> middleware, the first step to tell the application startup pipeline to use cookie authentication. </p>

<p>Open <code>Startup</code> and update it to support authentication</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>type Startup() = 
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  let configureAuthentication (app : IAppBuilder) =
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    let cookieAuthenticationOptions = new CookieAuthenticationOptions()
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    cookieAuthenticationOptions.AuthenticationType &lt;- DefaultAuthenticationTypes.ApplicationCookie 
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    cookieAuthenticationOptions.LoginPath &lt;- new PathString(&quot;/authentication/login&quot;)
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    app.UseCookieAuthentication(cookieAuthenticationOptions) |&gt; ignore
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  member x.Configuration(app : IAppBuilder) = 
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    app.MapSignalR() |&gt; ignore
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    configureAuthentication app
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    ()
</pre></div>
</div>
</div>
<p>The <code>AuthenticationType</code> is an identifier to distinguish between different authentication middlewares and the <code>LoginPath</code> is the url to the Login Page which will be used to redirect the unauthorized requests.</p>

<p>After setting up cookie authentication, like we did for new user registration, we are going to create a view to enable the user to login.</p>

<p>Add the <code>Login</code> action method in the <code>AuthenticationController</code> and also create <code>LoginViewModel</code> </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>[&lt;CLIMutable&gt;]
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>type LoginViewModel = {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  Email : string
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  Password : string
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>}
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>type AuthenticationController (userManager : UserManager&lt;User&gt;) = 
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  inherit Controller()
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  // ... Existing code ...  
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  member this.Login() = this.View()
</pre></div>
</div>
</div>
<p>and create <code>Login</code> view in the <strong>Authentication\Login</strong> directory</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>@model PhoneCat.Web.Controllers.LoginViewModel
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="tag">&lt;h3&gt;</span>Login<span class="tag">&lt;/h3&gt;</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>@using (Html.BeginForm(&quot;Login&quot;, &quot;Authentication&quot;, FormMethod.Post))
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>{
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  @Html.AntiForgeryToken()
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  @Html.ValidationSummary()
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  @Html.TextBoxFor(m =<span class="error">&gt;</span> m.Email)
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>  @Html.PasswordFor(m =<span class="error">&gt;</span> m.Password)
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>  <span class="tag">&lt;button</span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">submit</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>Log in<span class="tag">&lt;/button&gt;</span>   
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>}
</pre></div>
</div>
</div>
<p><img src="/images/fsharp_phonecat/step_6/login.png"></p>

<p>The next step is the crux of this blog post. Challenging the incoming user login credentials against its corresponding registered one.</p>

<p>We will be using <code>UserManager</code>’s following methods to achieve it.</p>

<ul>
  <li>
    <p><a href="https://msdn.microsoft.com/en-us/library/dn497475(v=vs.108).aspx">Find</a> - Returns a user with the specified username and password or null if there is no match (C# needs <a href="http://fsharpforfunandprofit.com/posts/the-option-type/">Option</a> type badly!). In the beginning of the blog post I’ve mentioned you that I will talk about why we are using <code>AllowNullLiteral</code> attribute for the <code>User</code> class. As you see here <code>Find</code> method returns <code>null</code> if the user is not available! So, As per this definition <code>null</code> is valid value for <code>User</code> class.</p>
  </li>
  <li>
    <p><a href="https://msdn.microsoft.com/en-us/library/dn497467(v=vs.108).aspx">CreateIdentity</a> - Creates the Claim Identity representing the user. We need this claim identity to signin and also to pass around the claim details. </p>
  </li>
</ul>

<p>Both of the above methods are having their async counterparts. But for the sake of simplicity I’m ignoring it. May be it can be a exercise for you to figure it out!</p>

<p>Let’s add some utility function to handle finding the user and signing in</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>let signin (userManager : UserManager&lt;User&gt;) (request : HttpRequestBase) user  =
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  let identity = userManager.CreateIdentity(user, DefaultAuthenticationTypes.ApplicationCookie)
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  let authManager = request.GetOwinContext().Authentication
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  identity.AddClaim(new Claim(ClaimTypes.GivenName, user.Name))
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  authManager.SignIn(identity)
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>let tryFindUser (userManager : UserManager&lt;User&gt;) email password  =
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  let user = userManager.Find(email, password)
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  if user &lt;&gt; null then Some user else None
</pre></div>
</div>
</div>
<p>Since we are using Email as the UserName here in this example, we need to have a specific claim to pass around the Name of the user. That’s what we are doing in the <code>signin</code> method. Later we will be using this claim to display the user name in the header of the page.</p>

<p>Great! Now its time to handle handle Login POST request. </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>[&lt;HttpPost&gt;]
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>[&lt;ValidateAntiForgeryToken&gt;]
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>member this.Login(loginViewModel : LoginViewModel) : ActionResult =
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  match tryFindUser userManager loginViewModel.Email loginViewModel.Password  with
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  | None -&gt;
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    this.ModelState.AddModelError(&quot;&quot;, &quot;Invalid Email or Password&quot;)
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    this.View(loginViewModel) :&gt; ActionResult
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  | Some user -&gt;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    signin userManager base.Request user
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    this.RedirectToAction(&quot;Index&quot;, &quot;Home&quot;) :&gt; ActionResult    
</pre></div>
</div>
</div>

<p>The <code>Login</code> action method just tries to find the user using given credentials. If the user is available, signin to the application using his credentials and redirect to the home page else show login error to the user.</p>

<p>We can add this same signin behavior after successful user registration too.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>[&lt;HttpPost&gt;]
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>[&lt;ValidateAntiForgeryToken&gt;]
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>member this.Register(registerViewModel : RegisterViewModel) : ActionResult =  
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  // ... Existing Code ...
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  if (userCreateResult.Succeeded) then
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    signin userManager base.Request user      
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    this.RedirectToAction(&quot;Index&quot;, &quot;Home&quot;) :&gt; ActionResult
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  else
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    // ... Existing Code ...
</pre></div>
</div>
</div>

<p>Since <code>UserManager</code> is an <code>IDisposable</code>. It’s good practices to dispose it after using. So, Override <code>Dispose</code> method in <code>AuthenticationController</code> and dispose it. </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>override this.Dispose(disposing) =
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  if disposing then
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    userManager.Dispose()
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  base.Dispose(disposing)
</pre></div>
</div>
</div>

<p>The final pending work is displaying the user name in the header after successful login. Open <strong>Layout.cshtml</strong> add the following lines</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="comment">&lt;!-- ... Existing code ... --&gt;</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="tag">&lt;ul</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">nav navbar-nav navbar-right top-nav</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  @if (Request.IsAuthenticated)
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  {
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    var identity = User.Identity as ClaimsIdentity;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    var name = identity.FindFirst(ClaimTypes.GivenName).Value;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span class="tag">&lt;li</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">dropdown</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>      <span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">#</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">dropdown-toggle</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">data-toggle</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">dropdown</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">aria-expanded</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">true</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        <span class="tag">&lt;i</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">fa fa-user</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;/i&gt;</span>@name
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>      <span class="tag">&lt;/a&gt;</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>      <span class="tag">&lt;ul</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">dropdown-menu</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        <span class="tag">&lt;li&gt;</span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>          <span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">@Url.Action(</span><span class="delimiter">&quot;</span></span><span class="attribute-name">Logout</span><span class="error">&quot;</span><span class="error">,</span><span class="error">&quot;</span><span class="attribute-name">Authentication</span><span class="error">&quot;</span><span class="error">)</span><span class="error">&quot;</span><span class="tag">&gt;</span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>            <span class="tag">&lt;i</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">fa fa-fw fa-power-off</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;/i&gt;</span> Log Out
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>          <span class="tag">&lt;/a&gt;</span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>        <span class="tag">&lt;/li&gt;</span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>      <span class="tag">&lt;/ul&gt;</span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    <span class="tag">&lt;/li&gt;</span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>  }
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>  else
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>  {
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    <span class="tag">&lt;li</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">dropdown</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>      <span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">#</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">dropdown-toggle</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">data-toggle</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">dropdown</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">aria-expanded</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">true</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>        <span class="tag">&lt;i</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">fa fa-user</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;/i&gt;</span> Guest
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>      <span class="tag">&lt;/a&gt;</span>
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>      <span class="tag">&lt;ul</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">dropdown-menu</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>        <span class="tag">&lt;li&gt;</span>
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>          <span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">@Url.Action(</span><span class="delimiter">&quot;</span></span><span class="attribute-name">Login</span><span class="error">&quot;</span><span class="error">,</span><span class="error">&quot;</span><span class="attribute-name">Authentication</span><span class="error">&quot;</span><span class="error">)</span><span class="error">&quot;</span><span class="tag">&gt;</span>
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>            <span class="tag">&lt;i</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">fa fa-fw fa-bank</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;/i&gt;</span> Log In
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>          <span class="tag">&lt;/a&gt;</span>
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>        <span class="tag">&lt;/li&gt;</span>
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>        <span class="tag">&lt;li&gt;</span>
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>          <span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">@Url.Action(</span><span class="delimiter">&quot;</span></span><span class="attribute-name">Register</span><span class="error">&quot;</span><span class="error">,</span><span class="error">&quot;</span><span class="attribute-name">Authentication</span><span class="error">&quot;</span><span class="error">)</span><span class="error">&quot;</span><span class="tag">&gt;</span>
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>            <span class="tag">&lt;i</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">fa fa-fw fa-laptop</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;/i&gt;</span>Register
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>          <span class="tag">&lt;/a&gt;</span>
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>        <span class="tag">&lt;/li&gt;</span>
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>      <span class="tag">&lt;/ul&gt;</span>
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>    <span class="tag">&lt;/li&gt;</span>
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>  }
<span class="line-numbers"><a href="#n41" name="n41">41</a></span><span class="tag">&lt;/ul&gt;</span>
<span class="line-numbers"><a href="#n42" name="n42">42</a></span><span class="comment">&lt;!-- ... Existing code ... --&gt;</span>
</pre></div>
</div>
</div>

<h3 id="adding-logout">Adding Logout</h3>

<p>Adding logout is very simple and straight forward. All we need to do is just invoke the Owin Authentication Manager’s <code>SignOut</code> method. Create an action method in <code>AuthenticationController</code> to handle it</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>member this.Logout() =
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  let authManager = base.Request.GetOwinContext().Authentication
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  authManager.SignOut(DefaultAuthenticationTypes.ApplicationCookie)
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  this.RedirectToAction(&quot;Index&quot;, &quot;Home&quot;)
</pre></div>
</div>
</div>

<h3 id="summary">Summary</h3>

<p>The interoperability offered by F# to integrate with the existing C# libraries is very seamless and I hope you have got it too! You can find the source code in the <a href="https://github.com/tamizhvendan/fsharp-phonecat/tree/6">github</a> as usual. In the next blog post We will see how to add validations in the User Registration. Stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Step-5 Advanced Search DSL using FParsec]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2015/01/18/step-5-advanced-search-dsl-using-fparsec/"/>
    <updated>2015-01-18T19:52:26+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2015/01/18/step-5-advanced-search-dsl-using-fparsec</id>
    <content type="html"><![CDATA[<blockquote>
  <p>This is step 5 of my blog series on <a href="/blog/2014/12/10/web-application-development-in-fsharp-using-asp-dot-net-mvc/">Web Application Development in Fsharp using ASP.NET MVC</a></p>
</blockquote>

<p>In this blog post we are going create an advanced Search <a href="http://en.wikipedia.org/wiki/Domain-specific_language">DSL</a> for searching Phones in the PhoneCat application that we are building in this blog series, using a F# parser combinator library called <a href="http://www.quanttec.com/fparsec/">FParsec</a>. </p>

<p><img src="/images/fsharp_phonecat/step_5/search_results.png"></p>

<p>As you seen in the screenshot above the DSL that we are going to build will enable us to search phones using three search filters (parameters) <strong>weight</strong>, <strong>screen</strong> and <strong>ram</strong>. The values (value filters) of these search filters can be defined in three ways as <strong>&gt;</strong>(greater than), <strong>-</strong>(range) and <strong>{value}</strong>(actual value itself i.e <em>=</em>). Each of these values should be accompanied with their unit of measures <strong>g</strong>, <strong>inch</strong> and <strong>MB</strong> respectively. For simplicity, I’ve expressed these units in singulars. The <strong>:</strong> symbol is used to separate Search Filter and Value Filter. Multiple filters can be used by seperating thing using the <strong>;</strong> symbol. </p>

<p>The <a href="http://en.wikipedia.org/wiki/Abstract_syntax_tree">abstract syntax tree (AST)</a> of this external DSL is</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>type SearchFilter = 
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>| Ram of (float -&gt; float&lt;MB&gt;)
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>| Weight of (float -&gt; float&lt;g&gt;)
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>| Screen of (float -&gt; float&lt;inch&gt;)
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>type ValueFilter = 
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>| Value of float 
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>| GreaterThan of float 
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>| Range of float * float
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>let filters : (SearchFilter * ValueFilter) list = // ... 
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>
</pre></div>
</div>
</div>

<p>FParsec does both <a href="http://en.wikipedia.org/wiki/Lexical_analysis">lexical analysis</a> (converting raw character sequence into meaningful tokens) and <a href="http://en.wikipedia.org/wiki/Parsing">parsing</a> (converting tokens to an AST like the one above). FParsec has been built using pure functions from the ground up and it enable us to create complex parser by combining small parsers (aka <a href="http://programmers.stackexchange.com/questions/117522/what-are-combinators-and-how-are-they-applied-to-programming-projects-practica">combinators</a>). </p>

<h3 id="fpasec-101">FPasec 101</h3>

<p>Lets quickly walk through the basics of FParsec.</p>

<p>In Fparsec all the parsers are of type <code>Parser&lt;'Result,'UserState&gt;</code> . The <code>'Result</code> represents the type of the parser result and the <code>'UserState</code> represents the internal state of the parser. </p>

<p>FParsec offers lot of in-built parser functions which takes F# primitive types and return a parser type for it. </p>

<h4 id="pchar">pchar</h4>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>let psearchValueSeperator = pchar ':'
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>let pmultiFiltersSeperator = pchar ';'
</pre></div>
</div>
</div>

<p>The <code>pchar</code> function takes a character and returns a parser (i.e of type <code>Parser&lt;char, 'UserState&gt;</code>) which parses only the given character. </p>

<p>FParsec uses a convention of prefix <strong>p</strong> to define all its parser function and we are also going to use the same to define our custom parser functions.</p>

<h3 id="pstring">pstring</h3>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>let pram = pstring &quot;ram&quot;
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>let pweight = pstring &quot;weight&quot;
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>let pscreen = pstring &quot;ram&quot;
</pre></div>
</div>
</div>
<p>Like <code>pchar</code> function, the <code>pstring</code> takes a string as its input and return a parser (<code>Parser&lt;string, 'UserState&gt;</code>) that parses only the given string. This parser is case-sensitive. If you want to have a parser which is case-insensitive you can use <code>pstringCI</code></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>let pmb = pstringCI &quot;MB&quot;
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>let pg = pstringCI &quot;g&quot;
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>let pinch = pstringCI &quot;inch&quot;
</pre></div>
</div>
</div>

<h3 id="pfloat">pfloat</h3>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>let pvalue = pfloat
</pre></div>
</div>
</div>

<p>I hope by this time you would have been familiar with the FParsec functions. Yes, you are right <code>pfloat</code> parses a floating point and returns the parser for the same. But unlike <code>pchar</code> and <code>pstrig</code> it doesn’t take any input and it can parse any floating point numbers and return the same when we execute the parser. </p>

<h3 id="section">|»</h3>

<p>So far we have seen parsers for the F# primitive types. What about our custom types ? FParsec has an answer for that too using the function (aka operator) <code>|&gt;&gt;</code>. </p>

<p>The signature of <code>|&gt;&gt;</code> function is</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>Parser&lt;'a, 'u&gt; -&gt; (a' -&gt; 'b) -&gt; Parser&lt;'b, 'u&gt;
</pre></div>
</div>
</div>
<p>i.e this function takes two inputs, a parser of type <code>'a</code> and a function that transform the type <code>'a</code> to <code>'b</code> and return a parser of type <code>'b</code></p>

<p>If you remember the AST that we have defined in the beginning of the post, the search filter has been defined as a discriminated union of type <code>SearchFilter</code>. Each fields <code>Ram</code>, <code>Screen</code>, <code>Weight</code> are being represented in the DSL by their string counterparts <em>“ram”</em>, <em>“screen”</em>, <em>“weight”</em> respectively. We can leverage this <code>|&gt;&gt;</code> function to take care of this data type transformation</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>let toLowerCase (str : string) = str.ToLowerInvariant() 
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>let toSearchFilter str = 
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  match toLowerCase str with
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  | &quot;ram&quot; -&gt; Ram ((*) 1.&lt;MB&gt;)
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  | &quot;weight&quot; -&gt; Weight ((*) 1.&lt;g&gt;)
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  | &quot;screen&quot; -&gt; Screen ((*) 1.&lt;inch&gt;)
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  | _ -&gt; failwith &quot;Invalid search filter&quot;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>let psearchFilter str = pstring str |&gt;&gt; toSearchFilter
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>let pram = psearchFilter &quot;ram&quot;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>let pweight = psearchFilter &quot;weight&quot;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>let pscreen = psearchFilter &quot;screen&quot;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>
</pre></div>
</div>
</div>
<p>If you see the type of <code>pram</code> it is Parser&lt;SearchFilter, ‘u&gt; i.e Parser for our custom type. The <code>psearchFilter</code> is an utility function which helps in avoiding the code duplication across multiple search filter parser creation.</p>

<h3 id="section-1">».</h3>

<p>I love this function and it represents the beauty of functional programming. This function has the signature</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>Parser&lt;'a, 'u&gt; -&gt; Parser&lt;'c, 'u&gt; -&gt; Parser&lt;'c, 'u&gt;
</pre></div>
</div>
</div>

<p>It takes two parsers of same or different types and returns a parser that parses the input using the given two parsers by applying them sequentially and returns a parser with the input type of second parser (The <strong>.</strong> symbol represents which parser to pick)</p>

<p>Lets see this action to understand it more</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>let pgreaterThan = pchar '&gt;' &gt;&gt;. pfloat |&gt;&gt; GreaterThan
</pre></div>
</div>
</div>
<p>We have created parser here for greater than. It parses the string <strong>“&gt;80.2”</strong> (i.e <code>pchar</code> parses the <strong>&gt;</strong> symbol and <code>pfloat</code> parses the number <strong>80.2</strong>. Since we have created it using <code>&gt;&gt;.</code> function, both <code>pchar</code> and <code>pfloat</code> are applied in sequence and it returns a parser of float type) and retrieve the floating number <strong>80.2</strong> when the parser is executed. Then we have applied the <code>|&gt;&gt;</code> function which translate it our custom type <code>GreaterThan</code> that we defined in the AST.</p>

<p>The <code>&gt;&gt;.</code> is much like functional composition done by the <a href="http://en.wikibooks.org/wiki/F_Sharp_Programming/Higher_Order_Functions#The_Composition_Function_.28.3C.3C_operator.29">» function (aka operator)</a> but instead of acting at the function level it acts at the parser level.</p>

<h3 id="section-2">.»</h3>

<p>It is similar to the <code>&gt;&gt;.</code> function but instead of returning a parser with the input type of second parser it returns a parser with the input type of the first parser.</p>

<p>It has the signature</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>Parser&lt;'a, 'u&gt; -&gt; Parser&lt;'c, 'u&gt; -&gt; Parser&lt;'a, 'u&gt;
</pre></div>
</div>
</div>

<h3 id="section-3">.».</h3>

<p>It is a combination of <code>.&gt;&gt;</code> and <code>&gt;&gt;.</code> i.e Instead of dropping the output of either of the given parsers, it returns a parser which parses the input and returns a parser with the result type as tuple representing the inputs of both of the given parsers.</p>

<p>It has the signature</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>Parser&lt;'a, 'u&gt; -&gt; Parser&lt;'c, 'u&gt; -&gt; Parser&lt;('a * 'c), 'u&gt;
</pre></div>
</div>
</div>
<p>Lets see both <code>.&gt;&gt;</code> and <code>.&gt;&gt;.</code> in action</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>let prange = pfloat .&gt;&gt; (pchar '-') .&gt;&gt;. pfloat |&gt;&gt; Range
</pre></div>
</div>
</div>

<p>The <code>prange</code> parser parses the string “100-200” and returns <code>Range (100, 200)</code>.</p>

<p>The <code>.&gt;&gt;</code> function here dropped the symbol <strong>-</strong> here (output of <code>pchar</code> parser) and the function <code>.&gt;&gt;.</code> picked the output of these parsers and returned a tuple representing the given range.</p>

<p>Now you got why I said I love this function! These tiny functions allow us to create parsers by combining them. If you understand how these tiny functions work and trust me you can create complex parsers even a <a href="http://trelford.com/blog/post/parsecsharp.aspx">C# compiler</a></p>

<h3 id="attempt">attempt</h3>

<p>This function takes parser <code>p</code> and execute it against the input. If it result in <strong>fatal error</strong>, it <a href="http://en.wikipedia.org/wiki/Backtracking">backtracks</a> the parser state to its original state as if that the given input is not being consumed. </p>

<h3 id="choice">choice</h3>

<p>This function takes multiple parsers say <code>p1</code>, <code>p2</code> … <code>pn</code> and execute it against the input in the following order.</p>

<p>Run the parser <code>p1</code> against the input. If the parsing succeed skip the rest of the parsers and return the parser else if it resulted an <strong>non-fatal error</strong>, backtrack the parser state to its original state and try the same with the next parser <code>p2</code>. This continues all the way down to <code>pn</code>.</p>

<p>What is the difference between <a href="http://www.quanttec.com/fparsec/reference/primitives.html#members.Error">Non-Fatal Error</a> and a <a href="http://www.quanttec.com/fparsec/reference/primitives.html#members.FatalError">Fatal Error</a> ?</p>

<p>Well, its closely associated with the internal implementation of FParsec. FParsec implements backtracking with only a “one token look-ahead”. i.e if the parser consumed one input token from the stream, it modifies the internal state and if it fails after that it would result in Fatal Error. Not-Fatal Error occurs when parer error happened without consuming the input. </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>let pgreaterThan = pchar '&gt;' &gt;&gt;. pfloat |&gt;&gt; GreaterThan
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>let prange = pfloat .&gt;&gt; (pchar '-') .&gt;&gt;. pfloat |&gt;&gt; Range
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>let pvalue = pfloat |&gt;&gt; Value
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>let pvalueFilters = choice [pgreaterThan; (attempt prange); pvalue]
</pre></div>
</div>
</div>
<p>If you seen the AST of the DSL that we are going to implement, the value filters can be any one of greaterThan or range or value. Using <code>choice</code> we have implemented this “either or” parser and also we have leveraged the <code>attempt</code> function to get rid of parser fatal error.</p>

<p>Both <code>prange</code> and <code>value</code>, shares the same first token i.e for “100-200MB” &amp; “100MB”, the first token ‘1’ is same. So while parsing the string “100MB” it starts by consuming the first token ‘1’ from the input sequence. FParsec assumes its a range filter and changes its internal state. By the time it reaches the token ‘M’ in “100MB”, it would result in a fatal error saying <em>Expecting: ‘-‘</em>. As we have used <code>attempt</code> here, it backtracks the parser state back to the token ‘1’ of “100MB” and start parsing using <code>pvalue</code> parser. Its hard to get it first time (I’ve spent close to an hour to figure it out) and I recommend you to spend some quality time in understanding the <a href="http://www.quanttec.com/fparsec/users-guide/parsing-alternatives.html">documentation</a> if you want really want to crack it!</p>

<h3 id="sepby">sepBy</h3>

<p><a href="http://www.quanttec.com/fparsec/reference/primitives.html#members.sepBy">sepBy</a> takes an element parser <code>p1</code> and a separator parser as its input and returns a parser for a list of elements separated by the separators.</p>

<p>It has the signature</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>Parser&lt;'a,'u&gt; -&gt; Parser&lt;'b,'u&gt; -&gt; Parser&lt;'a list, 'u&gt;
</pre></div>
</div>
</div>

<p>We will be using this function to parse multiple search filters separated by <strong>;</strong></p>

<h3 id="run">run</h3>

<p>The <a href="http://www.quanttec.com/fparsec/reference/charparsers.html#members.run">run function</a> takes a parser and a string as its input and it executes the given parser against the string input and returns a <a href="http://www.quanttec.com/fparsec/reference/charparsers.html#members.ParserResult">ParserResult</a> representing the result.</p>

<h2 id="implementing-the-parser">Implementing the Parser</h2>

<p>We have seen a brief overview of some of the basic building blocks of FParsec. It’s time to pull all these things together and create the complete parser which parses the Search DSL.</p>

<p>Create a source file in the <strong>Domain</strong> project and name it as <code>Search</code>. Then add the AST that we have discussed as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>module Search =  
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  type SearchFilter = 
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  | Ram of (float -&gt; float&lt;MB&gt;)
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  | Weight of (float -&gt; float&lt;g&gt;)
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  | Screen of (float -&gt; float&lt;inch&gt;)
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  type ValueFilter = 
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  | Value of float 
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  | GreaterThan of float 
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>  | Range of float * float
</pre></div>
</div>
</div>

<p>The next step is to install the <a href="https://www.nuget.org/packages/FParsec">FParsec Nuget Package</a> in the <strong>Domain</strong> project. After installing it create a source file with the name <code>SearchParser</code> and add a function to parse the filter string as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>module SearchParser =  
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  let parseFilter filterStr =   
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    let toLowerCase (str : string) = str.ToLowerInvariant()
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    let toSearchFilter = function
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>      | &quot;ram&quot; -&gt; Ram ((*) 1.&lt;MB&gt;)
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>      | &quot;weight&quot; -&gt; Weight ((*) 1.&lt;g&gt;)
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>      | &quot;screen&quot; -&gt; Screen ((*) 1.&lt;inch&gt;)
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>      | _ -&gt; failwith &quot;Invalid search filter&quot;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>   
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    let psearchFilter str = pstringCI str |&gt;&gt; (toLowerCase &gt;&gt; toSearchFilter)
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    let psearchValueSeperator = pchar ':'
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    let pmultiFiltersSeperator = pchar ';'
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    let pgreaterThan = pchar '&gt;' &gt;&gt;. pfloat |&gt;&gt; GreaterThan
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    let prange = pfloat .&gt;&gt; (pchar '-') .&gt;&gt;. pfloat |&gt;&gt; Range
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    let pvalue = pfloat |&gt;&gt; Value
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    let pvalueFilters = choice [pgreaterThan; (attempt prange); pvalue]
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    let createCompleteFilter psearchfilter puom  = 
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>      psearchfilter .&gt;&gt; psearchValueSeperator .&gt;&gt;. pvalueFilters .&gt;&gt; puom
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    let pmb = pstringCI &quot;MB&quot;
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    let pg = pstringCI &quot;g&quot;
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    let pinch = pstringCI &quot;inch&quot;
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    let pram = psearchFilter &quot;ram&quot;
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>    let pweight = psearchFilter &quot;weight&quot;
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>    let pscreen = psearchFilter &quot;screen&quot;
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>    let pramFilter = createCompleteFilter pram pmb
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>    let pweightFilter = createCompleteFilter pweight pg
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>    let pscreenFilter = createCompleteFilter pscreen pinch
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>    let pfilter = choice [pramFilter;pweightFilter;pscreenFilter]
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>    let parser = sepBy pfilter pmultiFiltersSeperator
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>    match run parser filterStr with
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>    | Success(filters, _, _) -&gt; Choice1Of2(filters)
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>    | Failure(err,_,_) -&gt; Choice2Of2(err)
</pre></div>
</div>
</div>

<p>The <code>parseFilter</code> function takes the search filter query from the front end, parses it using the custom parsers that we have built and return the <a href="http://msdn.microsoft.com/en-us/library/ee353439.aspx">Choice type</a>.</p>

<p>The <code>Choice1Of2</code> will contain a list of tuples (SearchFilter * ValueFilter) that represents the strongly typed AST of the given input query.</p>

<p>The <code>Choice2of2</code> will contain the error message in case if there is any parser error happened while parsing the input query.</p>

<h2 id="implementing-phone-search-backend">Implementing Phone Search backend</h2>

<p>With the parser in place, the next step is to building the backend logic of filtering the phones using the filters returned by the parsers</p>

<p>Open the module <code>Search</code> in the <strong>Domain</strong> project and add the following <code>searchPhones</code> function</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>let searchPhones phones filters =
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  let hasMetValueFilter toUom valueFilter property  =
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    match valueFilter with
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    | Value x -&gt; property = toUom x
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    | GreaterThan x -&gt; property &gt; toUom x
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    | Range (x,y) -&gt; property &gt;= toUom x &amp;&amp; property &lt;= toUom y
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  let hasMetSearchFilter filter phone =
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    let valueFilter = (snd filter)
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    match (fst filter) with
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    | Ram toMB -&gt; hasMetValueFilter toMB valueFilter phone.Storage.Ram
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    | Weight toG -&gt; hasMetValueFilter toG valueFilter phone.Weight
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    | Screen toInch-&gt; hasMetValueFilter toInch valueFilter phone.Display.ScreenSize
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>  let filterPhones phones' filter =
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    phones'
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    |&gt; Seq.filter (hasMetSearchFilter filter)
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>  
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>  let rec searchPhones' phones' filters' =
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    match filters' with
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    | [] -&gt; phones'
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    | x :: xs -&gt; (searchPhones' (filterPhones phones' x) xs)
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>  searchPhones' phones filters
</pre></div>
</div>
</div>
<p>The function <code>searchPhones</code> recursively applies the filters one by one over the list of phones and filter the phones based on the filter criteria.</p>

<h2 id="exposing-the-phone-search-as-web-api">Exposing the phone search as web-api</h2>

<p>Open the <code>PhonesController</code> that we have added in the <a href="/blog/2014/12/17/phonecat-backend-using-web-api-and-typeproviders/">step-1</a> and update it as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>type Error = { message : string }
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>[&lt;RoutePrefix(&quot;api/phones&quot;)&gt;]
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>type PhonesController
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    (
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        getTopSellingPhones : int -&gt; seq&lt;Phone&gt; -&gt; seq&lt;Phone&gt;,
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        phones : seq&lt;Phone&gt;,
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        catalogPhones : seq&lt;Catalog.Phone&gt;              
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    ) = 
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    inherit ApiController()
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    [&lt;Route(&quot;topselling&quot;)&gt;]
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    member this.GetTopSelling () =
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>      getTopSellingPhones 3 phones
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    [&lt;HttpGet&gt;]
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    [&lt;Route(&quot;search&quot;)&gt;]
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    member this.SearchPhones (q : string) =
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>      let parserResult = SearchParser.parseFilter q
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>      match parserResult with
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>      | Choice1Of2 filters -&gt; 
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>        let filteredPhones = Search.searchPhones catalogPhones filters
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>        base.Request.CreateResponse(HttpStatusCode.OK, filteredPhones)
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>      | Choice2Of2 errMsg -&gt;
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>        base.Request.CreateResponse(HttpStatusCode.OK, { message = errMsg })
</pre></div>
</div>
</div>

<p>The action method <code>SearchPhones</code> gets the input query <code>q</code> from the user and give it to the parser using the <code>parseFilter</code> function. If the parsing is successful, then we will be calling the <code>searchPhones</code> function with the filters returned by the parser. If the parsing failed, we will be returning the error response with the error message from the parser.</p>

<p>We have added a new dependency <code>catalogPhones</code> in the <code>PhonesController</code> constructor which represents all the available phones in the catalog. We need to inject it while creating the controller. Open the <code>Infrastructure</code> module and update the <code>PhonesController</code> creation as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>member this.Create(request, controllerDescriptor, controllerType) =
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  let phones' = phones |&gt; Seq.map TypeProviders.ToPhone
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  let phoneIndexes' = phoneIndexes |&gt; Seq.map TypeProviders.ToPhoneIndex
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  let catalogPhones = phones |&gt; Seq.map TypeProviders.ToCatalogPhone
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  // ...
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  else if controllerType = typeof&lt;PhonesController&gt; then                    
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>      let getTopSellingPhones = Phones.getTopSellingPhones (InMemoryInventory.getPhonesSold())                    
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>      let phonesController = new PhonesController(getTopSellingPhones, phones', catalogPhones)                    
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>      phonesController :&gt; IHttpController  
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>  // ...
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>
</pre></div>
</div>
</div>

<h2 id="creating-phone-search-view">Creating Phone Search View</h2>

<p>The final step of the creating a view for the Phone Search which enable the user to search the phones using the DSL that we have created so far.</p>

<p>It is straight forward razor view creation as we have seen in <a href="/blog/2014/12/23/step-2-fsharp-phonecat-views-using-razor/">step-2</a>. Add an action method <code>Search</code> in the <code>PhoneController</code> as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>// ...
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>member this.Search () =
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  this.View()
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>// ...
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>
</pre></div>
</div>
</div>
<p>Create a razor view <strong>Search.cshtml</strong> in the <em>Views/Phone</em> directory and add the code as <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/5/Web/Views/Phone/Show.cshtml">defined here</a>.</p>

<p>The javascript side has been taken care by knockout.js and you can find the script that takes care of calling the api and rendering the filtered phones <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/5/Web/Scripts/search.js">here</a>. </p>

<h2 id="summary">Summary</h2>

<p>Its a little longer post than I expected and I am glad that you have read it this far. I’d like give credit to this <a href="http://blog.fogcreek.com/fparsec/">blog post</a> by <a href="http://haolian.org/">Hao Lian</a> which I’ve used as a reference to come up with this implementation. As usual you can find the source code in the <a href="https://github.com/tamizhvendan/fsharp-phonecat/tree/5">phonecat github repository</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Step-4 Build automation using FAKE]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2015/01/06/step-4-build-automation-using-fake/"/>
    <updated>2015-01-06T05:22:32+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2015/01/06/step-4-build-automation-using-fake</id>
    <content type="html"><![CDATA[<blockquote>
  <p>This is step 4 of my blog series on <a href="/blog/2014/12/10/web-application-development-in-fsharp-using-asp-dot-net-mvc/">Web Application Development in Fsharp using ASP.NET MVC</a></p>
</blockquote>

<p>In the last three steps, we have seen how to build an web application in fsharp by leveraging <a href="/blog/2014/12/17/phonecat-backend-using-web-api-and-typeproviders/">Web-Api</a>, <a href="/blog/2014/12/23/step-2-fsharp-phonecat-views-using-razor/">Razor</a> and <a href="/blog/2015/01/02/step-3-phonecat-recommendation-system-using-f-number-agents/">SignalR</a>. In this step for a change we are going to take the <a href="http://en.wikipedia.org/wiki/DevOps">DevOps</a> side of the application and going to add the build automation capabilities for the application. Let’s get stated!</p>

<h2 id="fake---an-awesome-build-automation-library">Fake - An awesome build automation library</h2>

<p><a href="http://fsharp.github.io/FAKE/">Fake</a> is a F# version of very successful and widely used build automation libraries <a href="http://www.gnu.org/software/make/">Make</a> and <a href="http://en.wikipedia.org/wiki/Rake_%28software%29">Rake</a>. The combination of <a href="http://fsharp.org/testimonials/">fsharp’s expressiveness</a> and the <a href="http://fsharp.github.io/FAKE/gettingstarted.html">Fake’s DSL</a> is a visual treat to the eyes and especially if you are someone who is using <a href="http://en.wikipedia.org/wiki/MSBuild">MsBuild</a> xml files for doing build automation you will definitely appreciate it.</p>

<h3 id="adding-nugetexe-to-nuget-folder">Adding nuget.exe to .nuget folder</h3>

<p>As we are going to drive the nuget packages installation from the fsharp script file, we will be needing a <a href="nuget.org/nuget.exe">command line version of nuget</a>. Download it and place it inside the <strong>.nuget</strong> folder</p>

<p>Also its a good practice to add a <a href="http://docs.nuget.org/docs/reference/nuget-config-settings">Nuget.config file</a>. Add it too under <strong>.nuget</strong> folder. </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="preprocessor">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span><span class="tag">&lt;configuration&gt;</span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  <span class="tag">&lt;packageSources&gt;</span>
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    <span class="tag">&lt;add</span> <span class="attribute-name">key</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">nuget.org</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">value</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">https://www.nuget.org/api/v2/</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  <span class="tag">&lt;/packageSources&gt;</span> 
<span class="line-numbers"><a href="#n6" name="n6">6</a></span><span class="tag">&lt;/configuration&gt;</span>
</pre></div>
</div>
</div>

<h3 id="adding-buildbat-file">Adding build.bat file</h3>

<p>Create a batch file <strong>build.bat</strong> in the root directory of the solution. It is going act as bootstrap file which initiates the entire build process.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>@echo off
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>cls
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>&quot;.nuget\NuGet.exe&quot; &quot;Install&quot; &quot;FAKE&quot; &quot;-OutputDirectory&quot; &quot;tools&quot; &quot;-ExcludeVersion&quot;
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>&quot;tools\FAKE\tools\Fake.exe&quot; build.fsx
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>pause
</pre></div>
</div>
</div>
<p>It just download the Fake nuget package using the nuget.exe that we added earlier and call the fake.exe with the fsharp build script <strong>build.fsx</strong>.</p>

<h3 id="adding-buildfsx-file">Adding build.fsx file</h3>

<p>Create a <a href="http://blogs.msdn.com/b/chrsmith/archive/2008/09/12/scripting-in-f.aspx">fsharp script file</a> with the name <strong>build.fsx</strong> in the root directory. This script is going to implement all our build automation tasks by using fake library.</p>

<h3 id="cleaning-the-build-directory">Cleaning the build directory</h3>

<p>Just a like any other build process, the first step is to clear the build directory. Fake follows the same convention of MsBuild’s <a href="http://msdn.microsoft.com/en-us/library/ms171462.aspx">Targets</a>. Defining targets in Fake is less verbose compare to its MsBuild’s counterpart. As a matter of fact, it is a fsharp function that take two parameters, the name of the target and a function which defines the target. </p>

<p>Since it is a script file we need to add reference to the <strong>FakeLib.dll</strong> before writing the actual code.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>#r &quot;tools/FAKE/tools/FakeLib.dll&quot;
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>open Fake
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>let buildDir = &quot;./build&quot;
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>Target &quot;Clean&quot; (fun _ -&gt; CleanDir buildDir)
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>
</pre></div>
</div>
</div>

<p>Less verbose, Isn’t it ?</p>

<p>The <code>CleanDir</code> is a predefined function in Fake library which clean up this build directory. If the directory doesn’t exist it creates the directory. </p>

<h3 id="build-the-solution">Build the solution</h3>

<p>After cleaning the build directory the next step is to carrying out the actual build process. Before building the application we need to resolve the nuget packages being referred in the application. It’s so simple in Fake. All you need to do is just call predefined function <code>RestorePackages</code>.    </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>Target &quot;Build&quot; (fun _ -&gt;
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  RestorePackages()
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  !! &quot;./PhoneCat.sln&quot;
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    |&gt; MSBuildRelease buildDir &quot;Build&quot;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    |&gt; Log &quot;Build-Output: &quot;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>)
</pre></div>
</div>
</div>
<p>The <code>!!</code> is a function which takes a file path and returns <a href="http://fsharp.github.io/FAKE/apidocs/fake-filesystem-fileincludes.html">FileIncludes</a> which is Fake’s internal representation of a file set.</p>

<p>FileIncludes <a href="https://github.com/fsharp/FAKE/blob/master/src/app/FakeLib/Globbing/FileSystem.fs#L95-l117">implements</a> <code>IEnumerable&lt;string&gt;</code> so it can be used wherever we need an <code>IEnumerable&lt;string&gt;</code>. </p>

<p>The <code>MsBuildRelease</code> is also a predefined function in Fake which builds the given solution (which is piped from the <code>!!</code>). The first two parameters are the output build directory path and the target names which should be run by MsBuild. Fake offers lot of functional wrappers on top of MsBuild and you can find more about it in this <a href="http://fsharp.github.io/FAKE/apidocs/fake-msbuildhelper.html">api documentation.</a>. </p>

<p>The last line just pipes the log result from the <code>MsBuildRelease</code> function to the log output.</p>

<h3 id="running-unit-tests-using-nunitrunner">Running unit tests using Nunit.Runner</h3>

<p>Now we have built the solution and the next step is running the unit test cases. Since I’ve written the test cases using Nunit and we are going to see how to run nunit tests using Fake. Fake also supports <a href="http://fsharp.github.io/FAKE/apidocs/fake-xunithelper.html">XUnit</a> and <a href="http://fsharp.github.io/FAKE/apidocs/fake-mstest.html">MsTest</a>. Porting the below code to other unit testing framework is very straight forward.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>Target &quot;Test&quot; (fun _ -&gt;
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  !! (buildDir + &quot;/*.Tests.dll&quot;)
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    |&gt; NUnit (fun p -&gt; {p with ToolPath = &quot;./tools/NUnit.Runners/tools&quot; })
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>)
</pre></div>
</div>
</div>
<p>As we did it in the build target, the <code>!!</code> function picks all the unit test files (I’ve used a convention of naming the unit tests projects with the <strong>.Tests</strong> suffix) in the build directory and transform them to FileIncludes. </p>

<p>The <code>NUnit</code> is yet another <a href="http://fsharp.github.io/FAKE/apidocs/fake-nunitsequential.html">inbuilt function of Fake</a> which runs nunit on the given group of assemblies.</p>

<p>It takes two parameter, a function that returns the modified default <code>NUnitParams</code> value and a sequence of assembly paths. We have modified the default <code>ToolPath</code> property which specifies the file path of <strong>NUnit Runner</strong> </p>

<p>As we did for Fake we have to modify the batch file as below to install the Nunit Runner nuget package before running the actual script.  </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>@echo off
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>cls
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>&quot;.nuget\NuGet.exe&quot; &quot;Install&quot; &quot;FAKE&quot; &quot;-OutputDirectory&quot; &quot;tools&quot; &quot;-ExcludeVersion&quot;
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>&quot;.nuget\NuGet.exe&quot; &quot;Install&quot; &quot;NUnit.Runners&quot; &quot;-OutputDirectory&quot; &quot;tools&quot; &quot;-ExcludeVersion&quot;
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>&quot;tools\FAKE\tools\Fake.exe&quot; build.fsx
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>pause
</pre></div>
</div>
</div>

<h3 id="deploy-the-application-in-iis">Deploy the application in IIS</h3>

<p>Well, now we are at the final step of the build process which deploy the application in the local IIS server. </p>

<p>Deploying an application in IIS is super easy using Fake. All you need to do is just input necessary things like site name, virtual directory name, etc., and call the <code>IIS</code> function in <strong>Fake.IIS</strong> library which is installed as part of Fake.</p>

<p>To begin with we need to add reference in the beginning <strong>build.fsx</strong> to include the <strong>Fake.IIS</strong> library. </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>#r &quot;tools/FAKE/tools/Fake.IIS.dll&quot;
</pre></div>
</div>
</div>

<p>This <strong>Fake.IIS</strong> makes heavy use of <a href="http://msdn.microsoft.com/en-us/library/microsoft.web.administration.servermanager(v=vs.90).aspx">ServerManager</a> which helps to dynamically configure IIS 7.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>Target &quot;Deploy&quot; (fun _ -&gt; 
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  let siteName = &quot;fsharp&quot;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  let appPool = &quot;fsharp.appPool&quot;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  let port = &quot;:9999:&quot;
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  let vdir = &quot;/phonecat&quot;  
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  let webBuildPath = buildDir + &quot;/_PublishedWebsites/Web&quot;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  let sitePhysicalPath = @&quot;c:\inetpub\wwwroot\phonecat&quot;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  XCopy webBuildPath sitePhysicalPath 
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>  
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  (IIS
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    (Site siteName &quot;http&quot; port @&quot;C:\inetpub\wwwroot&quot; appPool)
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    (ApplicationPool appPool true &quot;v4.0&quot;)
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    (Some(Application vdir sitePhysicalPath)))
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>)
</pre></div>
</div>
</div>

<p>When we build a web project using MsBuild in release mode, it creates a deployable directory which can be accessed using the path <em>/_PublishedWebsites/Web</em> in the build directory. So, after building the application we just need to copy this deployable directory to the <strong>intepub\wwwroot</strong> directory using the XCopy function in Fake.</p>

<p>The <code>IIS</code> function takes three parameters</p>

<ul>
  <li>site - A function with the signature <code>ServerManager -&gt; Site</code> which takes an instance of ServerManager and returns a <a href="http://msdn.microsoft.com/en-us/library/microsoft.web.administration.site(v=vs.90).aspx">Site</a> with the given site settings. </li>
  <li>appPool - A function with the signature <code>ServerManager -&gt; ApplicationPool</code> which takes an instance of ServerManager and returns a <a href="http://msdn.microsoft.com/en-us/library/microsoft.web.administration.applicationpool(v=vs.90).aspx">AppPool</a> with the given appPool settings.  </li>
  <li>app - An option type with the signature <code>(Site -&gt; ServerManager -&gt; Application) option</code> provides the <a href="http://msdn.microsoft.com/en-us/library/microsoft.web.administration.application(v=vs.90).aspx">Application</a>  </li>
</ul>

<p>Fake’s IIS helper library has in-built function for Site, ApplicationPool and Application which takes the necessary inputs need for its creation and returns the associated instances. All of these function creates Site, ApplicationPool and Application respectively if they are not available in the IIS. </p>

<h3 id="running-the-targets">Running the Targets</h3>

<p>In the above steps we just defined various Fake targets. These targets doesn’t execute on its own and we need to explicitly define the order of its execution and initiate.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>&quot;Clean&quot;
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  ==&gt; &quot;Build&quot;
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  ==&gt; &quot;Test&quot;
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  ==&gt; &quot;Deploy&quot;
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>RunTargetOrDefault &quot;Deploy&quot;
</pre></div>
</div>
</div>

<p>The <code>==&gt;</code> is one of <a href="http://fsharp.github.io/FAKE/apidocs/fake-additionalsyntax.html">the DSL in Fake</a> which is actually a function that defines the target execution order.</p>

<p>The <code>RunTargetOrDefault</code> function runs the target specified in the parameter or executes the default target.</p>

<h3 id="summary">Summary</h3>

<p>Fake is just awesome. We can automate so much things with very few lines of code and the beauty is it can be used in <strong>any .net projects</strong>. If you are using MsBuild Xml scripts, do try Fake! It will make you super productive. You can find the source of this step in the <a href="https://github.com/tamizhvendan/fsharp-phonecat/tree/4">fsharp-phonecat repository</a>. </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Step-3 PhoneCat Recommendation System using F# Agents, SignalR and Rx]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2015/01/02/step-3-phonecat-recommendation-system-using-f-number-agents/"/>
    <updated>2015-01-02T05:44:52+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2015/01/02/step-3-phonecat-recommendation-system-using-f-number-agents</id>
    <content type="html"><![CDATA[<blockquote>
  <p>This is step 3 of my blog series on <a href="/blog/2014/12/10/web-application-development-in-fsharp-using-asp-dot-net-mvc/">Web Application Development in Fsharp using ASP.NET MVC</a></p>
</blockquote>

<p>In the last two steps we have seen how to create a <a href="/blog/2014/12/17/phonecat-backend-using-web-api-and-typeproviders/">web apis</a> and <a href="/blog/2014/12/23/step-2-fsharp-phonecat-views-using-razor/">static razor views</a> in fsharp. In this blog post we are going to see one of my favorite feature in fsharp <a href="http://fsharpforfunandprofit.com/posts/concurrency-actor-model/">“Message based approach to concurrency”</a>.</p>

<h3 id="a-small-flashback">A Small Flashback</h3>
<p>I’ve actually planned to put this blog post for the great fsharp community initiative <a href="https://sergeytihon.wordpress.com/2014/11/24/f-advent-calendar-in-english-2014/">F# Advent Calender</a>. Unfortunately it was not able to get through as I’ve <a href="http://sergeytihon.wordpress.com/2014/11/24/f-advent-calendar-in-english-2014/#comment-4135">nominated myself</a> little late. I always believe there is an opportunity behind every adversity. I didn’t get hung up and I knew this is one of the great topic to blog about. When I decided to blog about it, I needed a sample web application. So, I was creating that sample application and it suddenly strikes! <em>How about a blog series on web application development in fsharp?</em> I’ve immediately started working on it and hence this blog series.</p>

<h3 id="so-what-we-gonna-do-in-this-step">So what we gonna do in this step</h3>
<p>In this blog post we are going to build a recommendation system which keeps track of what phones that the user is viewing, and based on his navigation history, we will be recommending a phone that he might be interested in</p>

<p style="text-align:center"> <strong> User visits "Motorola XOOM™" </strong> </p>
<p><img src="/images/fsharp_phonecat/step_3/Phone_1.png"></p>

<p style="text-align:center"> <strong> User visits "Motorola XOOM™ with Wi-Fi" </strong> </p>
<p><img src="/images/fsharp_phonecat/step_3/Phone_2.png"></p>

<p>Let us start the implementation by defining two high level tasks</p>

<ol>
  <li>Tracking user navigation</li>
  <li>Recommending a phone</li>
</ol>

<h3 id="tracking-user-navigation">1. Tracking user navigation</h3>

<p><img class="center" src="/images/fsharp_phonecat/step_3/Phone_Visit_Workflow.png" width="600" height="500"></p>

<p>The first two components has been already implemented as part of <a href="/blog/2014/12/23/step-2-fsharp-phonecat-views-using-razor/">step-2</a>. So we just need to wire up the other two components. Let’s start from <code>PhoneViewTracker</code></p>

<p>Create a source file in the <strong>Web</strong> project and name it as <code>PhoneViewTracker</code>. Add a function <code>observePhonesViewed</code> which will be invoked when you a user visits a phone.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>module PhoneViewTracker =     
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>    
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  let observePhonesViewed anonymousId phoneIdBeingVisited =
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    StorageAgent.Post (SavePhoneVisit (anonymousId, phoneIdBeingVisited))
</pre></div>
</div>
</div>

<p>The <code>anonymousId</code> is a <a href="http://msdn.microsoft.com/en-us/library/system.web.httprequest.anonymousid%28v=vs.110%29.aspx">http property</a> which represents a unique identifier for the given user session</p>

<p>Upon receiving the <code>anonymousId</code> and <code>phoneIdBeingVisited</code> we will be posting a message to the <code>StorageAgent</code> to save this visit. Both the agent and the message doesn’t exist now, so lets create them</p>

<p>Create a source file in the <strong>Domain</strong> project and name it as <code>UserNavigationHistory</code> and add the following</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace PhoneCat.Domain
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>open System.Reactive.Subjects
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>open System.Collections.Generic
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>type Agent&lt;'T&gt; = MailboxProcessor&lt;'T&gt;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>module UserNavigationHistory =  
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  type StorageAgentMessage =
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    | SavePhoneVisit of string * string
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>  let private storageAgentFunc (agent : Agent&lt;StorageAgentMessage&gt;) =  
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    let rec loop (dict : Dictionary&lt;string, list&lt;string&gt;&gt;) = async { 
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>      let! storageAgentMessage = agent.Receive()
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>      match storageAgentMessage with
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>      | SavePhoneVisit (anonymousId, phoneIdBeingVisited) -&gt; 
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>          if dict.ContainsKey(anonymousId) then
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>            let phoneIdsVisited = phoneIdBeingVisited :: dict.[anonymousId]
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>            dict.[anonymousId] &lt;- phoneIdsVisited
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>          else
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>            dict.Add(anonymousId, [phoneIdBeingVisited])
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>      return! loop dict      
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>    }
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>    loop (new Dictionary&lt;string, list&lt;string&gt;&gt;())
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>  let StorageAgent = Agent.Start(storageAgentFunc)
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>
</pre></div>
</div>
</div>

<p>Storage Agent is an F# Agent which stores the user navigation history in an in-memory dictionary. It can be replaced by any key-value store like <a href="http://redis.io/">redis</a> but for experimentation I’ve preferred to use F# Agents.</p>

<p>The <code>StorageAgentMessage</code> is a <a href="http://fsharpforfunandprofit.com/posts/discriminated-unions/">dicriminated union</a> represents possible messages that the <code>StorageAgent</code> can process. Right now it has only message <code>SavePhoneVisit</code> which takes a tuple representing the <code>anonymousId</code> and the <code>phoneIdBeingVisited</code></p>

<p>The <code>StorageAgent</code> is a typical F# Agent which waits for the incoming <code>StorageAgentMessage</code> and upon receiving it stores the visit in the in-memory dictionary. </p>

<p>The next step is wiring the <code>PhoneViewTracker.observePhonesViewed</code> function with the <code>PhoneController.Show</code> action method. We can call the function directly that will create a strongly coupled code. We can even directly post the message to the agent. But that also makes the code tightly coupled. </p>

<p>What we are actually trying to implement here is a <strong>User Phone Visit Stream</strong>. Whenever the user visits a phone, we just want to notifiy somebody to keep track of it and move on. And its where <a href="http://msdn.microsoft.com/en-in/data/gg577609.aspx">Reactive Extensions aka Rx</a> comes into the picture. If you are new to Reactive Programming or Rx, I strongly recommend you to go through <a href="https://gist.github.com/staltz/868e7e9bc2a7b8c1f754">this excellent article</a> by <a href="http://staltz.com/">André Staltz</a></p>

<p>Install the <a href="https://www.nuget.org/packages/Rx-Main/">Rx Nuget Package</a> in the <em>Web</em> project. With Rx in the kitty the next step is to make the User’s phone visit as event and subscribe this event with the <code>PhoneViewTracker</code></p>

<p>The first step is to make the <code>PhoneController</code> as observable. Modify the already created <code>PhoneController</code> as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>type PhoneController(phones : seq&lt;Phone&gt;) =
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  inherit Controller()
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  let subject = new Subject&lt;string&gt;()
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  interface IObservable&lt;string&gt; with
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    member this.Subscribe observer = subject.Subscribe observer
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  member this.Show (id : string) = 
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    let phone = phones |&gt; Seq.find (fun p -&gt; p.Id = id) |&gt; PhoneViewModel.ToPhoneViewModel
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    subject.OnNext id 
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    this.View(phone)
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>  override this.Dispose disposing =
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    if disposing then 
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>      subject.OnCompleted()
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>      subject.Dispose()      
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    base.Dispose disposing
</pre></div>
</div>
</div>

<p>One of the great feature of F# is its seamless interoperability with C# libraries. As you seen in the above code snippet we have just made the <code>PhoneController</code> into an observable by implementing the interface <a href="http://msdn.microsoft.com/en-us/library/dd990377%28v=vs.110%29.aspx">IObservable</a>. </p>

<p>We have created a private <a href="http://msdn.microsoft.com/en-us/library/hh242970%28v=vs.103%29.aspx">Rx Subject</a> and made it responsible for pushing the notification which contains the phone id that is being visited.</p>

<p>But wait how do we configure the subscription between this controller and the <code>PhoneViewTracker</code> ? Thanks to the CompositionRoot that we have <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/2/Web/Infrastructure.fs#L28-L32">created in the step-2</a>. As we have full control over the creation of controller its just a matter of two lines to achieve it.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>type CompositionRoot(phones : seq&lt;PhoneTypeProvider.Root&gt;) =          
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    inherit DefaultControllerFactory() with
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>      override this.GetControllerInstance(requestContext, controllerType) = 
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        // ...
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        else if controllerType = typeof&lt;PhoneController&gt; then          
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>          let phones' = phones |&gt; Seq.map TypeProviders.ToCatalogPhone
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>          let observer = PhoneViewTracker.observePhonesViewed (requestContext.HttpContext.Request.AnonymousID)
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>          let phoneController = new PhoneController(phones')
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>          let subscription = phoneController.Subscribe observer                    
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>          phoneController :&gt; IController
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        // ...
</pre></div>
</div>
</div>
<p>We are leveraging the ASP.NET’s <a href="http://msdn.microsoft.com/en-us/library/fsykd036.aspx">Anonymous Identification Module</a> which help us in creating a unique anonymous id for every user session. We can retrieve it from the <a href="http://msdn.microsoft.com/en-us/library/system.web.httprequest.anonymousid.aspx">HttpRequest</a> as mentioned in the above snippet</p>

<p><a href="http://msdn.microsoft.com/en-in/library/91ka2e6a(v=vs.85).aspx">Anonymous identification of user session</a> are not enabled by default, so add the following entry in the <strong>Web.config</strong> file</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="tag">&lt;configuration&gt;</span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  <span class="comment">&lt;!-- Existing Code ignored for brevity ... --&gt;</span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  <span class="tag">&lt;system.web&gt;</span>
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    <span class="comment">&lt;!-- Existing Code ignored for brevity... --&gt;</span>
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>    <span class="tag">&lt;anonymousIdentification</span> <span class="attribute-name">enabled</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">true</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>  <span class="tag">&lt;/system.web&gt;</span>
<span class="line-numbers"><a href="#n7" name="n7">7</a></span><span class="tag">&lt;/configuration&gt;</span>
</pre></div>
</div>
</div>

<p>With the help of the partial application of functions as we did it in the previous steps, we have created a partial function called <code>observer</code> which has the signature <code>string -&gt; unit</code>. Then we have subscribed to <code>PhoneController</code> using the <code>Subscribe</code> method and with this we are done with saving an user visit. </p>

<h3 id="recommending-a-phone">2. Recommending a phone</h3>

<p><strong>Workflow</strong></p>

<p><img class="center" src="/images/fsharp_phonecat/step_3/Phone_Recommendation_Workflow.png" width="600" height="500"></p>

<ol>
  <li>User initiates the recommendation request using SignalR</li>
  <li>Upon receiving it, Recommendation SignalR hub sends a recommendation request message to Storage Agent with the user Anonymous Id and SignlaR connection Id of the given user</li>
  <li>Storage Agent then fetches the phone visit history of the given user based on the incoming anonymous id and pass it to the Recommendation Agent along with the SignalR connection id.</li>
  <li>Recommendation Agent responds to this by computing the recommendation and publish the result (Either recommended phone id or none) in the Recommendation observable</li>
  <li>Recommendation hub receives this recommendation result, send the response back to the corresponding SignalR client.</li>
</ol>

<p>The beauty of this entire workflow is all are message driven and asynchronous by default.  </p>

<p>Let’s start from Recommendation SignalR hub. The first step is installing SingalR from <a href="https://www.nuget.org/packages/Microsoft.AspNet.SignalR/2.1.2">the nuget</a>.</p>

<p>After installing create a source file in the <strong>Web</strong> project and name it as <code>Startup</code> then add the following code as per the SignalR convention.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>namespace PhoneCat.Web
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>open Owin
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>type Startup() = 
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>  member x.Configuration(app : IAppBuilder) = 
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>    app.MapSignalR() |&gt; ignore
<span class="line-numbers"><a href="#n8" name="n8">8</a></span>    ()
</pre></div>
</div>
</div>

<p>Then add an app setting in the <em>Web.config</em> file and configure the SignalR to use this <code>Startup</code> class</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="tag">&lt;configuration&gt;</span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  <span class="tag">&lt;appSettings&gt;</span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    <span class="comment">&lt;!-- Other keys.. --&gt;</span>
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    <span class="tag">&lt;add</span> <span class="attribute-name">key</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">owin:AppStartup</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">value</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">PhoneCat.Web.Startup</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  <span class="tag">&lt;/appSettings&gt;</span>
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>  <span class="comment">&lt;!-- other configuration items.. --&gt;</span>
<span class="line-numbers"><a href="#n7" name="n7">7</a></span><span class="tag">&lt;/configuration&gt;</span>
</pre></div>
</div>
</div>

<p>With SignalR added to the system, the next step is to create <code>RecommendationHub</code>. Add a source file in <strong>Web</strong> project and name it as <code>Hubs</code>.</p>

<p>Then create a <code>RecommendationHub</code> class with a public method <code>GetRecommendation</code> which will be invoked by the SignalR client to initiate recommendation process.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>type RecommendationHub() =
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>    inherit Hub ()
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    member this.GetRecommendation () =             
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>      let encodedAnonymousId = this.Context.Request.Cookies.[&quot;.ASPXANONYMOUS&quot;].Value
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>      let anonymousId = decode encodedAnonymousId
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>      let connectionId = this.Context.ConnectionId
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>      StorageAgent.Post (GetRecommendation(anonymousId, connectionId))
<span class="line-numbers"><a href="#n8" name="n8">8</a></span>      &quot;Recommendation initiated&quot;
</pre></div>
</div>
</div>

<p>Then anonymous id of the user session is actually persisted in the <a href="http://msdn.microsoft.com/en-in/library/91ka2e6a%28v=vs.85%29.aspx">request cookies by Asp.Net</a> in an encoded format. In the <code>GetRecommendation</code> method we will be retrieving this encoded anonymous id from the cookie and decode it. Then we need to get the SignalR connection id which available in the base class <code>Hub</code>. After getting both the anonymous id and the connection id, send a <code>GetRecommendation</code> message to the <code>StorageAgent</code> with these information. Finally send a response to the SignalR client as “Recommendation initiated”.</p>

<p>The <code>decode</code> function is not added yet so let’s add them. Thanks to <a href="http://stackoverflow.com/a/2481110/159850">this stackoverflow answer</a> we just need to convert the code from C# to F#</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>let private decode encodedAnonymousId =
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    let decodeMethod = 
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>      typeof&lt;AnonymousIdentificationModule&gt;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        .GetMethod(&quot;GetDecodedValue&quot;, BindingFlags.Static ||| BindingFlags.NonPublic)
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    let anonymousIdData = decodeMethod.Invoke(null, [| encodedAnonymousId |]);
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    let field = 
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>      anonymousIdData.GetType()
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        .GetField(&quot;AnonymousId&quot;, BindingFlags.Instance ||| BindingFlags.NonPublic);
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    field.GetValue(anonymousIdData) :?&gt; string
</pre></div>
</div>
</div>

<p>We have used a special F# operator here <code>:?&gt;</code> which is a dynamic down cast operator which casts a base class to a sub-class of it. You can read <a href="http://msdn.microsoft.com/en-us/library/dd233220.aspx">this msdn documentation</a> to know more about F# casting and conversions.</p>

<p>The <code>GetRecommendation</code> message is not added yet, so let’s add them too. Modify <code>StorageAgentMessage</code> created before as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>  type StorageAgentMessage =
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>    | SavePhoneVisit of string * string
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    | GetRecommendation of string * string
</pre></div>
</div>
</div>

<p>The final step of this pipeline is to Update the <code>StorageAgent</code> to handle this <code>GetRecommendation</code> message. Modify the <code>storageAgentFunc</code> in the <code>UserNavigationHistory</code> as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span> let private storageAgentFunc (agent : Agent&lt;StorageAgentMessage&gt;) =  
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    let rec loop (dict : Dictionary&lt;string, list&lt;string&gt;&gt;) = async { 
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>      let! storageAgentMessage = agent.Receive()
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>      match storageAgentMessage with
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>      | SavePhoneVisit (anonymousId, phoneIdBeingVisited) -&gt; 
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>          // .. existing code ignored for brevity ..
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>      | GetRecommendation (anonymousId, connectionId) -&gt;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>          if dict.ContainsKey(anonymousId) then
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>            let phoneIdsVisited = dict.[anonymousId]
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>            RecommendationAgent.Post (connectionId,phoneIdsVisited)
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>      return! loop dict
</pre></div>
</div>
</div>

<p>Handling of the <code>GetRecommendation</code> message is very straight forward. Just get the phone ids being visited by the given anonymous id from the in memory dictionary and send a message consists of connection id and this phone ids visited to the <code>RecommendationAgent</code> which we will be creating next.</p>

<p>Create a source file with the name <code>Recommendations</code> in the <strong>Domain</strong> project and add the <code>RecommendationAgent</code> below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>[&lt;AutoOpen&gt;]
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>module Recommendation =
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  let private recommendationAgentFunc (inbox : Agent&lt;string*List&lt;string&gt;&gt;) =
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    let rec messageLoop () = async {
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>      let! connectionId, visitedPhoneIds = inbox.Receive()     
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>      if (Seq.length visitedPhoneIds) &gt;= 2 then
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        suggestRecommendation connectionId (visitedPhoneIds |&gt; Seq.take 2 |&gt; Seq.toList)
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>      return! messageLoop()
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    }
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    messageLoop ()
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  let RecommendationAgent = Agent.Start recommendationAgentFunc
</pre></div>
</div>
</div>

<p>In order to keep this blog post simple I’ve used my own ‘Hello World’ kind of algorithm which picks the latest two phone ids being visited and suggests recommendation based on it. In a real world you would be replacing this toddler algorithm with more sophisticated algorithms like <a href="http://en.wikipedia.org/wiki/Association_rule_learning">Association Rule Learning</a>. I am planning to implement this algorithm at later stages of this blog series.</p>

<p>Then the next step is to implement the <code>suggestRecommendation</code> function which picks a hardcoded recommendation and publish the result using Rx. To do this add the <a href="https://www.nuget.org/packages/Rx-Main/">Rx Nuget Package</a> in the <strong>Domain</strong> project and add the  <code>suggestRecommendation</code> function in the <code>Recommendation</code> module</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>let RecommendationPipe = new Subject&lt;string*string option&gt;()
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  let private suggestRecommendation connectionId visitedPhoneIds = 
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    match visitedPhoneIds with
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>    | [&quot;motorola-xoom-with-wi-fi&quot;; &quot;motorola-xoom&quot;] -&gt; RecommendationPipe.OnNext (connectionId, Some &quot;motorola-atrix-4g&quot;)
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>    | [&quot;dell-streak-7&quot;; &quot;dell-venue&quot;] -&gt; RecommendationPipe.OnNext (connectionId, Some &quot;nexus-s&quot;)
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>    | _ -&gt; RecommendationPipe.OnNext (connectionId, None)
</pre></div>
</div>
</div>

<p>The implementation is a very straight forward pattern matching. If last visited two items are (“motorola-xoom-with-wi-fi”, “motorola-xoom”), send the recommendation as “motorola-atrix-4g”, else if they are (“dell-streak-7”,”dell-venue”) then recommend “nexus-s”. If none of the condition matches then send none. Thanks to the <a href="http://fsharpforfunandprofit.com/posts/the-option-type/">option type</a> which expresses this result in type safe manner.</p>

<p>With all these infrastructure in place, all we need to do is to just subscribe to this <code>RecommendationPipe</code> and send the suggestion to the user via SignalR</p>

<p>Let’s add a observer for this pipe in the <strong>Web</strong> project. Open <code>Hubs</code> module in the <strong>Web</strong> project and add the following code</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>let private getUrl (phoneId : string) httpContext =
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    let routeValueDictionary = new RouteValueDictionary()
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    routeValueDictionary.Add(&quot;controller&quot;, &quot;Phone&quot;)
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    routeValueDictionary.Add(&quot;action&quot;, &quot;Show&quot;)
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    routeValueDictionary.Add(&quot;id&quot;, phoneId)
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    let requestContext = new RequestContext(new HttpContextWrapper(httpContext), new RouteData());
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    let virtualPathData = RouteTable.Routes.GetVirtualPath(requestContext, routeValueDictionary);
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    virtualPathData.VirtualPath
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>let notifyRecommendation httpContext phones (connectionId, recommendedPhoneId) =
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    let phones' = phones |&gt; Seq.map TypeProviders.ToPhone
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    match recommendedPhoneId with 
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    | Some phoneId -&gt;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>      let recommendedPhone = Phones.getPhoneById phones' phoneId
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>      let phoneUrl = getUrl phoneId httpContext
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>      let hubContext = GlobalHost.ConnectionManager.GetHubContext&lt;RecommendationHub&gt;()
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>      hubContext.Clients.Client(connectionId)?showRecommendation(recommendedPhone, phoneUrl) 
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    | None -&gt; ()
</pre></div>
</div>
</div>

<p>The <code>notifyRecommendation</code> function checks whether the incoming recommendedPhoneId has value or not. If it has value, it just picks the <code>Phone</code> record corresponding to the given phoneId and get the url for the recommended phone. With all these data in place, we just need to send the response to the using via SignalR.</p>

<p>You would have a noticed a weird <code>?</code> symbol which is actually part of the <a href="https://www.nuget.org/packages/ImpromptuInterface.FSharp/">ImpromptuInterface.FSharp</a>. This library adds provisions to use <a href="http://msdn.microsoft.com/en-IN/library/dd264736.aspx">C# dynamic types</a> in F#</p>

<p>They are two missing pieces. One is <code>Phones.getPhoneById</code> which we are not having. Let’s add them. Open <code>Phones</code> module in <strong>Domain</strong> project and add it as mentioned below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>let getPhoneById (phones : seq&lt;Phone&gt;) phoneId =
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>    phones |&gt; Seq.find (fun p -&gt; p.Id = phoneId)
</pre></div>
</div>
</div>

<p>The final step is wiring the <code>RecommendationPipe</code> with the <code>notifyRecommendation</code>. Open <code>Global.asax.fs</code> and update it as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>type Global() = 
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  // .. existing code ignore for brevity ..
<span class="line-numbers"><a href="#n3" name="n3">3</a></span> member x.Application_Start() =
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    let phones = GitHubRepository.getPhones()
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>    // .. existing code ignore for brevity ..
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>    let notificationObserver = Hubs.notifyRecommendation HttpContext.Current phones
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>    Recommendation.RecommendationPipe.Subscribe notificationObserver |&gt; ignore
<span class="line-numbers"><a href="#n8" name="n8">8</a></span>    ()
</pre></div>
</div>
</div>

<p>Partial application of function is a very handy thing which actually replaces its counterpart Dependency Injection in the OOP. We just provided the first two arguments of <code>notifyRecommendation</code> and created a new function with the signature <code>string * string option -&gt; unit</code> which is the expected observer signature for the <code>RecommendationPipe</code>.</p>

<h4 id="the-front-end-ui">The Front End UI</h4>
<p>The front end for this is a typical SignalR-Javascript client code which you can find it the <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/3/Web/Scripts/recommendation.js">github repository</a>. I’ve intentionally leaving the front-end part of this application as it would be extends the scope of the blog post. Moreover if you go through the source code in the github repository you can easily understand</p>

<h3 id="summary">Summary</h3>
<p>F# is just so awesome with so much expressive functional programming features. Rx, Agents and SignalR add more powers to it and enable you to create a scalable functional reactive architecture. I’d like give credits two incredible resources on this subject Mark Seemann’s Pluralsight course on <a href="http://www.pluralsight.com/courses/functional-architecture-fsharp">Functional Architecture with F#</a> and Kevin Ashton’s excellent blog post on <a href="http://namelessinteractive.com/blog/Full_Stack_FSharp_%E2%80%93_The_Long_Version_(Part_1)">Full Stack F#</a> which helped me a lot in coming out with this blog post.</p>

<p>Last but not the least, Thanks to <a href="https://sergeytihon.wordpress.com">Sergey Tihon</a> for the words of encouragement to write the blog post on this topic.</p>

<p>You can find the source code of this step in <a href="https://github.com/tamizhvendan/fsharp-phonecat/tree/3">the github repository</a>. </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Step-2 Fsharp-PhoneCat Views using Razor]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2014/12/23/step-2-fsharp-phonecat-views-using-razor/"/>
    <updated>2014-12-23T19:47:20+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2014/12/23/step-2-fsharp-phonecat-views-using-razor</id>
    <content type="html"><![CDATA[<blockquote>
  <p>This is step 2 of my blog series on <a href="/blog/2014/12/10/web-application-development-in-fsharp-using-asp-dot-net-mvc/">Web Application Development in Fsharp using ASP.NET MVC</a></p>
</blockquote>

<p>In the <a href="/blog/2014/12/17/phonecat-backend-using-web-api-and-typeproviders/">last blog post</a> we have created web-api endpoints which serve the data for the home page and in this blog post we are going to create views of the phones and manufacturers using <a href="http://en.wikipedia.org/wiki/ASP.NET_Razor_view_engine">Razor</a>.</p>

<h3 id="phone-view">Phone View</h3>
<p><img src="/images/fsharp_phonecat/step_2/Phone.png"></p>

<p>As we did it in the step-1 we are going to start with the controller which serves the phone view. Let’s get started by creating a source file in <strong>Web</strong> project under the folders <em>Controllers</em> with the name <code>PhoneController</code></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>type PhoneController(phones : seq&lt;Phone&gt;) =
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  inherit Controller()
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  member this.Show (id : string) = 
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    let phone = phones |&gt; Seq.find (fun p -&gt; p.Id = id) |&gt; PhoneViewModel.ToPhoneViewModel 
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>    this.View(phone)
</pre></div>
</div>
</div>

<p>The action method <code>Show</code> just picks the phone with the given id, converts the selected phone to a view model and returns the view.</p>

<p>The <code>phones</code> data which is being passed to the controller is actually a domain model representing the data that are required to show in the UI. Let’s create it in the <em>Domain</em> project. Create a source file in the <strong>Domain</strong> project and name it as <code>Catalog</code>.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace PhoneCat.Domain
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>open PhoneCat.Domain.Measures
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>module Catalog =    
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  type Display = {
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    ScreenResolution : string
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    ScreenSize : float&lt;inch&gt;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    TouchScreen : bool
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  }
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  type Storage = {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    Flash : float&lt;MB&gt;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    Ram : float&lt;MB&gt;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>  }
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>  type Android = {
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    OS : string
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    UI : string
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>  }
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>  type Camera = {
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    Features : seq&lt;string&gt;
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>    Primary : string
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>  }
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>  type Phone = {
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>    Id : string
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>    Name : string
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>    Description : string
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>    Android : Android
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>    Camera : Camera
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>    Display : Display
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>    Weight : float&lt;g&gt;
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>    Storage : Storage
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>    Images : seq&lt;string&gt;
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>  }
</pre></div>
</div>
</div>
<p>It’s a <a href="http://fsharpforfunandprofit.com/series/understanding-fsharp-types.html">typical type definition</a> in fsharp which describes the domain model <code>Phone</code>. Also if you remember we have already created a type with the same name <code>Phone</code> in <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/1/Domain/Production.fs#L29-L33">the previous step</a>. Though they share the name both are being used for different purposes. One for showing all the details of a phone and other one is for showing only few details about a phone. </p>

<p>This is what we call us <a href="http://martinfowler.com/bliki/BoundedContext.html">bounded context in DDD</a>. In fsharp we can easily achieve it using modules with less verbosity.</p>

<p>We have also used another awesome feature of fsharp called <a href="http://fsharpforfunandprofit.com/posts/units-of-measure/">units-of-measure</a> which help us <a href="http://en.wikipedia.org/wiki/Mars_Climate_Orbiter#Cause_of_failure">avoid failures in unit-coversion</a> by providing strong typed data.</p>

<p>In the later posts we will be extending the domain based on theses measure types right now it just expresses the domain correct. These measure types are not created yet so lets create them by adding a source file in <strong>Domain</strong> project with the name <code>Measures</code></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace PhoneCat.Domain
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>module Measures = 
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  [&lt;Measure&gt;] type inch
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  [&lt;Measure&gt;] type g
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  [&lt;Measure&gt;] type MB
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  let private toUOM (measureString : string) stringToReplace (uom : float&lt;_&gt;) = 
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    let value = 
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>      if measureString = &quot;&quot; then 0.
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>      else measureString.Replace(stringToReplace, &quot;&quot;) |&gt; float
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    value |&gt; ((*) uom)
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>  
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>  let toInch (inchStr : string) = toUOM inchStr &quot;inches&quot; 1.0&lt;inch&gt;
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>  let toGram (weightStr : string) = toUOM weightStr &quot;grams&quot; 1.0&lt;g&gt;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>  let toMB (storageStr : string) = toUOM storageStr &quot;MB&quot; 1.0&lt;MB&gt;
</pre></div>
</div>
</div>

<p>We have defined types to represents measures in inch, gram and megabytes. We have also added few utility methods to translate the raw string to strongly typed data which does the following</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>&quot;200.5inches&quot; to 200.5&lt;inch&gt;
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>&quot;1200MB&quot; to 1200.&lt;MB&gt;
</pre></div>
</div>
</div>
<p>With the domain model in place the next step is to populate this domain model from the data-store. To do it we are going to reuse the PhoneTypeProvider that we have <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/1/DataAccess/TypeProviders.fs#L25">created in the step-1</a>. Since it has all the properties that we needed, we just need to add a function which does the mapping.</p>

<p>Open <code>TypeProviders</code> and add the below function</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>let ToCatalogPhone(phone : PhoneTypeProvider.Root) = 
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  let android = { OS = phone.Android.Os; UI = phone.Android.Ui }
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>      
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  let camera = 
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    { Features = phone.Camera.Features
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>      Primary = phone.Camera.Primary }        
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>      
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  let display = 
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    { ScreenResolution = phone.Display.ScreenResolution
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>      ScreenSize = toInch phone.Display.ScreenSize
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>      TouchScreen = phone.Display.TouchScreen }
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>  let storage = 
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    { Flash = toMB phone.Storage.Flash
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>      Ram = toMB phone.Storage.Ram}
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>  { Id = phone.Id
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    Name = phone.Name
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    Description = phone.Description
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    Android = android
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    Camera = camera
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    Display = display
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    Weight = toGram phone.SizeAndWeight.Weight
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>    Storage = storage 
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>    Images = phone.Images}
</pre></div>
</div>
</div>
<p>We are leveraging the utility functions <code>toGram</code>, <code>toMB</code> defined above as part of measure types and do seamless mapping of domain model from data store.</p>

<p>The next step is wiring the controller with the domain model and the data-store. We are going to follow the same <strong>Composition Root</strong> design as we <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/1/Web/Infrastructure.fs#L19-38">did in step-1</a></p>

<p>Add a source file in the <em>Web</em> project with the name <code>MvcInfrastructure</code> and add the following code</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace PhoneCat.Web
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>open PhoneCat.DataAccess
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>open PhoneCat.Domain
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>open PhoneCat.Web.Controllers
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>open System
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>open System.Web.Mvc
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>module MvcInfrastructure = 
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  type CompositionRoot(phones : seq&lt;PhoneTypeProvider.Root&gt;) = 
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    inherit DefaultControllerFactory() with
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>      override this.GetControllerInstance(requestContext, controllerType) = 
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        if controllerType = typeof&lt;HomeController&gt; then 
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>          let homeController = new HomeController()
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>          homeController :&gt; IController
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        else if controllerType = typeof&lt;PhoneController&gt; then
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>          let phones' = phones |&gt; Seq.map TypeProviders.ToCatalogPhone
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>          let phoneController = new PhoneController(phones')
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>          phoneController :&gt; IController
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>        else
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>          raise &lt;| ArgumentException((sprintf &quot;Unknown controller type requested: %A&quot; controllerType))
</pre></div>
</div>
</div>

<p>Similar to step-1 we are creating the composition root by passing the phones data and doing the wiring of different components.</p>

<p>Since we have created our custom ControllerFactory, we need to update the MVC configuration to use it when the framework creates the controllers.</p>

<p>Update the ```Global.asax.fs`` file as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>member x.Application_Start() =
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  let phones = GitHubRepository.getPhones()
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  AreaRegistration.RegisterAllAreas()
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  GlobalConfiguration.Configure(new Action&lt;HttpConfiguration&gt;(fun config -&gt; Global.RegisterWebApi(config, phones)))
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  Global.RegisterFilters(GlobalFilters.Filters)
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>  Global.RegisterRoutes(RouteTable.Routes)
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>  ControllerBuilder.Current.SetControllerFactory(MvcInfrastructure.CompositionRoot(phones))
<span class="line-numbers"><a href="#n8" name="n8">8</a></span>  BundleConfig.RegisterBundles BundleTable.Bundles
</pre></div>
</div>
</div>
<p>In the last step the we have retrieved the phones data <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/1/Web/Global.asax.fs#L65">inside the RegisterWebApi method</a> and in this step we have moved it outside so that it can be used by both MVC Controllers and Web-Api controllers.</p>

<p>We have also changed the signature of RegisterWebApi method. In the <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/1/Web/Global.asax.fs#L51">earlier step</a> it gets the configuration parameter alone and now it has two parameters <code>httpConfiguration</code> and <code>phones</code></p>

<p>The next pending task in Phone View is translating the Phone Domain model to Phone View Model. Add the Phone View model in the <code>PhoneController</code> created before and update it us below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>type PhoneViewModel = 
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    Name : string
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    Description : string
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    Os : string
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    Ui : string
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    Flash : string
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    Ram : string
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    Weight : string
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    ScreenResolution : string
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    ScreenSize : string
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    TouchScreen : string
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    Primary : string
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    Features : seq&lt;string&gt;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    Images : seq&lt;string&gt;    
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>  }
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>  with static member ToPhoneViewModel(phone : Phone) =
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    let roundToDigits (value:float) = String.Format(&quot;{0:0.00}&quot;, value)
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    let concatWithSpace str2 str1 = str1 + &quot; &quot; + str2
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    let uomToString (measureValue: float&lt;_&gt;) measureName =
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>      measureValue |&gt; float |&gt; roundToDigits |&gt; concatWithSpace measureName
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>    { 
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>      Name = phone.Name
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>      Description = phone.Description
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>      Os = phone.Android.OS
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>      Ui = phone.Android.UI
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>      Flash = phone.Storage.Flash |&gt; int |&gt; sprintf &quot;%d MB&quot;
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>      Ram =  phone.Storage.Ram |&gt; int |&gt; sprintf &quot;%d MB&quot;
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>      Weight = uomToString phone.Weight &quot;grams&quot;
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>      ScreenResolution = phone.Display.ScreenResolution
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>      ScreenSize = uomToString phone.Display.ScreenSize &quot;inches&quot;
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>      TouchScreen = if phone.Display.TouchScreen then &quot;Yes&quot; else &quot;No&quot;
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>      Primary = phone.Camera.Primary
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>      Features = phone.Camera.Features
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>      Images = phone.Images
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>    }
</pre></div>
</div>
</div>
<p>With all in place, we just need to create a razor view with the name <code>Show.cshtml</code> inside the <strong>View</strong> -&gt; <strong>Phone</strong> directory of <em>Web</em> project and update it <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/2/Web/Views/Phone/Show.cshtml">as mentioned here.</a> </p>

<p>That’s it. Phone View is up and running! Click the Phone Links in the Home Page it will take you to the Phones View Page.</p>

<h3 id="manufacturers-view">Manufacturers View</h3>
<p><img src="/images/fsharp_phonecat/step_2/Manufacturer.png"><br />
Manufactures View follows the similar steps that we have used to create the Phone View. It displays the Phones manufactured by a selected manufacturer in the home page.</p>

<p>Let’s start from the controller. Create a controller in the <strong>Web</strong> project with the name <code>ManufacturerController</code></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace PhoneCat.Web.Controllers
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>open System.Web
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>open System.Web.Mvc
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>open PhoneCat.Domain
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>open System
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>type ManufacturerViewModel = {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  Name : string
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  Phones : seq&lt;Phone&gt;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>}
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>with static member ToManufacturerViewModel (name, phones) =
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>      {Name = ManufacturerName.ToString name; Phones = phones}
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>type ManufacturerController 
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>  (
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    getPhones : ManufacturerName -&gt; (ManufacturerName * seq&lt;Phone&gt;)
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>  ) =
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>  inherit Controller()
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>  
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>  member this.Show (id : string) = 
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    let viewModel = 
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>      id 
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>      |&gt; ManufacturerName.ToManufacturerName
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>      |&gt; getPhones
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>      |&gt; ManufacturerViewModel.ToManufacturerViewModel
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>    this.View(viewModel)
</pre></div>
</div>
</div>

<p>The <code>ManufacturerController</code> depends on the function <code>getPhones</code> which gives the Phones manufactured by the given manufacturer. The action method <code>Show</code> converts given id to the manufaturer name,  gets the Phones, converts them to <code>ManufacturerViewModel</code> and renders the view.</p>

<p>The domain model <code>Phone</code> mentioned here is the one that we have <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/1/Domain/Production.fs#L29-L33">already created in step-1</a>. The <code>getPhones</code> domain function is yet to be created. </p>

<p>Open <code>Phones</code> file in the <em>Domain</em> project and add the <code>getPhonesOfManufacturer</code> function.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>let getPhonesOfManufacturer (phones : seq&lt;Phone&gt;) (manufacturerName) =
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>    let phones' = 
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>      phones
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>      |&gt; Seq.filter (fun p -&gt; ManufacturerName.ToManufacturerName p.Name = manufacturerName)
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>    (manufacturerName, phones')
</pre></div>
</div>
</div>
<p>The <code>getPhonesOfManufacturer</code> function takes a sequence of phones and a manufacturer name, filters them for the given manufacturer and return a <a href="http://fsharpforfunandprofit.com/posts/tuples/">tuple</a> that contain the manufacturer name and the sequence of phones.</p>

<p>As we have already created the data-store functions which serves the required data, we just need to wire up the controller.</p>

<p>Update <code>MvcInfrastructure</code> file in the <em>Web</em> project to create <code>ManufacturerController</code></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>module MvcInfrastructure = 
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  type CompositionRoot(phones : seq&lt;PhoneTypeProvider.Root&gt;) = 
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    inherit DefaultControllerFactory() with
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>      override this.GetControllerInstance(requestContext, controllerType) = 
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        // ... Existing code ignored for brevity 
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        else if controllerType = typeof&lt;ManufacturerController&gt; then
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>          let getPhonesByManufactuerName = phones |&gt; Seq.map TypeProviders.ToPhone |&gt; Phones.getPhonesOfManufacturer
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>          let manufacturerController = new ManufacturerController(getPhonesByManufactuerName)
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>          manufacturerController :&gt; IController
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        else
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>          raise &lt;| ArgumentException((sprintf &quot;Unknown controller type requested: %A&quot; controllerType))
</pre></div>
</div>
</div>

<p>Thanks to the <a href="http://fsharpforfunandprofit.com/posts/partial-application/">partial function</a> we have partially applied the first parameter alone for the <code>Phones.getPhonesOfManufacturer</code> function which has the signature </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>seq&lt;Phone&gt; -&gt; ManufacturerName -&gt; seq&lt;Phone&gt;
</pre></div>
</div>
</div>
<p>and created a new function on the fly with the signature </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>ManufacturerName -&gt; seq&lt;Phone&gt;
</pre></div>
</div>
</div>
<p>which is the exactly the function that is needed by the <code>ManufacturerController</code></p>

<p>The final step is to create a razor view with the name <code>Show.cshtml</code> inside the <strong>View</strong> -&gt; <strong>Manufacturer</strong> directory of <strong>Web</strong> project and update it <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/2/Web/Views/Manufacturer/Show.cshtml">as mentioned here.</a> </p>

<h3 id="summary">Summary</h3>
<p>In this blog post we have seen how to create MVC Razor views in fsharp. You can find the <a href="https://github.com/tamizhvendan/fsharp-phonecat/tree/2">source code in the github repository</a>. In the later posts we will be adding more interactivity. Stay tuned !!</p>
]]></content>
  </entry>
  
</feed>
