<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: asp.net mvc | Tamizh's Thoughts]]></title>
  <link href="http://blog.tamizhvendan.in/blog/categories/asp-dot-net-mvc/atom.xml" rel="self"/>
  <link href="http://blog.tamizhvendan.in/"/>
  <updated>2014-12-18T18:07:30+05:30</updated>
  <id>http://blog.tamizhvendan.in/</id>
  <author>
    <name><![CDATA[Tamizhvendan S]]></name>
    <email><![CDATA[tamizh88@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Step 1 - Phonecat backend using Web Api and TypeProviders]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2014/12/17/phonecat-backend-using-web-api-and-typeproviders/"/>
    <updated>2014-12-17T17:31:44+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2014/12/17/phonecat-backend-using-web-api-and-typeproviders</id>
    <content type="html"><![CDATA[<blockquote>
  <p>This is step 1 of my blog series on <a href="/blog/2014/12/10/web-application-development-in-fsharp-using-asp-dot-net-mvc/">Web Application Development in Fsharp using ASP.NET MVC</a></p>
</blockquote>

<p>In the <a href="/blog/2014/12/10/step-0-setting-up-the-fsharp-phonecat-solution/">last blog post</a> we have created the basic home page of phone cat with the placeholders and in this post we are going it wire the home page with the backend web apis.</p>

<p><img src="/images/fsharp_phonecat/step_1/home_page.png"></p>

<p>As the above screenshot indicates we are going to develop three web api endpoints which serve the data to the front-end and we are going to use the existing json data available in <a href="https://github.com/angular/angular-phonecat/tree/master/app/phones">angular-phonecat</a> repository as our backend data store.</p>

<p>Initially I’ve planned to include TDD steps in this post but to keep it simple I am ignoring it. If you are interested in the tests that I’ve written check the <a href="https://github.com/tamizhvendan/fsharp-phonecat/tree/1">source code.</a></p>

<h3 id="promotions-api">Promotions Api</h3>

<p>Let’s start with the promotions api which serves the data of three recently launched mobile phones. The first step is to create an ApiController called “PromotionsController”. You can create it by right clicking on the “Controllers” directory in the <strong>Web</strong> project and select <strong>Add -&gt; Source file</strong>. In the dialog box, name it as “PromotionsController”</p>

<p>After creating, update the controller with the dependencies as mentioned below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace Web.Controllers
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>open System.Web.Http
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>open PhoneCat.Domain
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>[&lt;RoutePrefix(&quot;api/promotions&quot;)&gt;]
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>type PromotionsController
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  (
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    getPromotions : seq&lt;PhoneIndex&gt; -&gt; seq&lt;PromotionPhone&gt;,
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    phoneIndexes: seq&lt;PhoneIndex&gt;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>  ) =
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  inherit ApiController()
</pre></div>
</div>
</div>

<p>The <code>PromotionsController</code> has two dependencies. </p>

<ul>
  <li>
    <p><code>getPromotions</code> is a function a that takes a sequence of a domain model <code>PhoneIndex</code> and returns the sequence of domain model <code>PromotionPhone</code> which represents the phones that are recently launched.</p>
  </li>
  <li>
    <p><code>phoneIndexes</code> is a sequence of domain model <code>PhoneIndex</code> that represents the phones available in the backend data store.</p>
  </li>
</ul>

<p>These domain models currently not exists, so add them in the domain project as mentioned below</p>

<p>Right click on the domain project and select <strong>Add -&gt; Source file</strong>. In the dialog box, name it as “Promotions”. It creates a fsharp module with the name <code>Promotions</code> and add the <code>PromotionPhone</code> domain model</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace PhoneCat.Domain
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>[&lt;AutoOpen&gt;]
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>module Promotions = 
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  type PromotionPhone = {
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    Id : string
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    ImageUrl : string
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    Name : string
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  }
</pre></div>
</div>
</div>
<p>Similarly, create an another source file called <code>Production</code> and add the domain model <code>PhoneIndex</code></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace PhoneCat.Domain
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>[&lt;AutoOpen&gt;]
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>module Production = 
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  type PhoneIndex =
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    { Id : string
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>      Name : string
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>      ImageUrl : string
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>      Age : int }
</pre></div>
</div>
</div>

<p>The <code>Age</code> property represents the age of the phone since its launch (so lower is younger!). Now the domain models are ready, the next step is to create an end point to expose it. </p>

<p>Let’s add a action method in PromotionsController which does the same</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>  [&lt;Route(&quot;&quot;)&gt;]
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  member this.Get () = 
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    getPromotions phoneIndexes
</pre></div>
</div>
</div>

<p>The scaffolding is ready and the next step is to add the domain method <code>getPromotions</code> which does the actual business logic of giving recently launched phones.</p>

<p>Add the <code>getPromotions</code> function in the <code>Promotions</code> file as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>let getPromotions (phoneIndexes : seq&lt;PhoneIndex&gt;) = 
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  phoneIndexes 
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  |&gt; Seq.filter (fun phone -&gt; phone.Age &lt; 3) 
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  |&gt; Seq.map (fun phone -&gt; {Id = phone.Id; Name = phone.Name; ImageUrl = phone.ImageUrl})
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>
</pre></div>
</div>
</div>

<p>The <code>getPromotions</code> just filters the phones with the age less than 3 and map them to the corresponding <code>PromotionPhone</code> types.</p>

<p>Now its time to get the actual data from the data store. As I have mentioned earlier we will be using <a href="https://github.com/angular/angular-phonecat/tree/master/app/phones">angular-phonecat</a> repository as our data store. To access the data we will be using <a href="http://fsharp.github.io/FSharp.Data/library/JsonProvider.html">JsonTypeProvider</a>.</p>

<p>In the <em>DataAccess</em> project install the nuget package <a href="https://www.nuget.org/packages/FSharp.Data">FSharp.Data</a> and add a source file <code>TypeProviders</code>. Then update it with the type provider for Phone Index</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace PhoneCat.DataAccess
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>open FSharp.Data
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>open PhoneCat.Domain
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>[&lt;AutoOpen&gt;]
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>module TypeProviders =
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  [&lt;Literal&gt;]
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  let private samplePhoneIndexes = &quot;&quot;&quot;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  [{
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>      &quot;age&quot;: 1,
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>      &quot;id&quot;: &quot;id0&quot;,
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>      &quot;imageUrl&quot;: &quot;id0.jpg&quot;,
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>      &quot;name&quot;: &quot;Name0&quot;,
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>      &quot;snippet&quot;: &quot;Sample Snippet0&quot;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>  },{
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>      &quot;age&quot;: 2,
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>      &quot;id&quot;: &quot;id1&quot;,
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>      &quot;imageUrl&quot;: &quot;id1.jpg&quot;,
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>      &quot;name&quot;: &quot;Name1&quot;,
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>      &quot;snippet&quot;: &quot;Sample Snippet2&quot;
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>  }]
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>  &quot;&quot;&quot;
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>  
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>  type PhoneIndexTypeProvider = JsonProvider&lt;samplePhoneIndexes&gt;
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>  let ToPhoneIndex (phoneIndex : PhoneIndexTypeProvider.Root) =
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>    { Id = phoneIndex.Id; Name = phoneIndex.Name; Age = phoneIndex.Age; ImageUrl = phoneIndex.ImageUrl }
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>
</pre></div>
</div>
</div>

<p>The <code>ToPhoneIndex</code> is a utility function which converts the data store model <code>PhoneIndexTypeProvider.Root</code> to the domain model <code>PhoneIndex</code></p>

<p>Now we got the type provide for <code>PhoneIndex</code>, the next step is populating it from the github repository. To do that add a source file <code>GitHubRepository</code> and update it as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>namespace PhoneCat.DataAccess
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>open PhoneCat.Domain
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>module GitHubRepository = 
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  [&lt;Literal&gt;]
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  let private gitHubRepoUrl = &quot;https://raw.githubusercontent.com/angular/angular-phonecat/master/app/phones/&quot;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  let private phoneIndexes = PhoneIndexTypeProvider.Load(gitHubRepoUrl + &quot;phones.json&quot;)
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  let getPhoneIndexes () = phoneIndexes
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>
</pre></div>
</div>
</div>

<p>That’s it! just three line of code to get the data from the <a href="https://raw.githubusercontent.com/angular/angular-phonecat/master/app/phones/phones.json">angular-phonecat repo</a> and map to the equivalent strongly typed models  </p>

<h4 id="composition-root">Composition Root</h4>

<p>Now we need to wire up the controller with the domain and the data access. We can use a <a href="http://www.hanselman.com/blog/ListOfNETDependencyInjectionContainersIOC.aspx">Dependency Injection Container</a> to achieve it. In fact it used to be my default decision. But after reading this <a href="http://blog.ploeh.dk/2012/11/06/WhentouseaDIContainer/">wonderful blog post</a> by <a href="https://twitter.com/ploeh">Mark Seeman</a> I have actually started rethinking about dependency injection. In this sample application we are going to use the <a href="http://blog.ploeh.dk/2011/07/28/CompositionRoot/">Composition Root</a> as suggested by Mark Seeman.</p>

<p>In the <em>Web</em> project create a source file with the name <code>Infrastructure</code> and add the following composition root</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace PhoneCat.Web
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>open System
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>open System.Web.Http.Dispatcher
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>open System.Web.Http.Controllers
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>open Web.Controllers
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>open PhoneCat.DataAccess
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>open PhoneCat.Domain
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>module Infrastructure =       
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  type CompositionRoot 
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    (
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>      phoneIndexes : seq&lt;PhoneIndexTypeProvider.Root&gt;  
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    ) =                
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    interface IHttpControllerActivator with           
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>      member this.Create(request, controllerDescriptor, controllerType) =
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>          
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>        let phoneIndexes' = phoneIndexes |&gt; Seq.map TypeProviders.ToPhoneIndex
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>        if controllerType = typeof&lt;PromotionsController&gt; then
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>            let promotionsController = new PromotionsController(getPromotions, phoneIndexes')
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>            promotionsController :&gt; IHttpController
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>        else
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>            raise &lt;| ArgumentException((sprintf &quot;Unknown controller type requested: %A&quot; controllerType))
</pre></div>
</div>
</div>

<p>We have actually created a custom implementation of <code>IHttpControllerActivator</code> as mentioned <a href="http://blog.ploeh.dk/2012/09/28/DependencyInjectionandLifetimeManagementwithASP.NETWebAPI/">here</a> which takes care of initializing the controllers by wiring the data store and the domain functions with the controller</p>

<p>The only pending task is tell ASP.NET Web Api to use this composition root. Update the <em>Global.asax.fs</em> file as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>static member RegisterWebApi(config: HttpConfiguration) =
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>       
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  // existing configuration will be here
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  // Additional Web API settings
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>  let phoneIndexes = GitHubRepository.getPhoneIndexes()
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>  config.Services.Replace(typeof&lt;IHttpControllerActivator&gt;, CompositionRoot(phoneIndexes))
</pre></div>
</div>
</div>
<p>We have done an optimization by getting the phone indexes from the github when the application is starting, so that any requests to the application doesn’t get the data from github (typical enterprise performance improvement!).</p>

<h3 id="manufacturers-api">Manufacturers Api</h3>

<p>We are going to create the Manufacturers Api in the same way as Promotions Api. Let’s start from <code>ManufacturersController</code></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace Web.Controllers
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>open System.Web.Http
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>open PhoneCat.Domain
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>type ManufacturerViewModel = { Name : string }
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>[&lt;RoutePrefix(&quot;api/manufactures&quot;)&gt;]
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>type ManufacturersController
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  (
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    getManufacturerNames : seq&lt;Phone&gt; -&gt; seq&lt;ManufacturerName&gt;,
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    phones : seq&lt;Phone&gt;              
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>  ) = 
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>  inherit ApiController()
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>  [&lt;Route(&quot;&quot;)&gt;]
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>  member this.Get () =
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    getManufacturerNames phones
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    |&gt; Seq.distinct
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    |&gt; Seq.map (fun name -&gt; {Name = ManufacturerName.ToString name})
</pre></div>
</div>
</div>

<p>As <code>PromotionsController</code>, <code>ManufacturersController</code> has also two dependencies.</p>

<ul>
  <li>
    <p><code>getManufacturerNames</code> is a function takes a sequence of domain model <code>Phone</code> and returns the sequence of domain model <code>ManufacturerName</code> which represents the manufacturer names of the given phones.</p>
  </li>
  <li>
    <p><code>phones</code> is a sequence of domain model ```Phone`` that represents the phones available in the backend data store</p>
  </li>
</ul>

<p>The <code>Get</code> method in the <code>ManufacturersController</code> returns the manufacturer names for the given phones</p>

<p>The <code>ManufacturerViewModel</code> is just a DTO that is used to share the data across the wire.</p>

<p>The next step is to add the domain models. In the <code>Production</code> file of <em>Domain</em> project add the following</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>type ManufacturerName = 
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  Samsung | Motorola | Dell | LG | TMobile | Sanyo | Unknown
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  static member ToString = function           
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>      | Samsung -&gt; &quot;Samsung&quot;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>      | Motorola -&gt; &quot;Motorola&quot;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>      | Dell -&gt; &quot;Dell&quot;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>      | LG -&gt; &quot;LG&quot;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>      | TMobile -&gt; &quot;T-Mobile&quot;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>      | Sanyo -&gt; &quot;Sanyo&quot;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>      | Unknown -&gt; &quot;Unknown&quot;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>  static member ToManufacturerName (name : string) =
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>      match name.ToLower() with
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>      | n when n.Contains(&quot;samsung&quot;) -&gt; Samsung
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>      | n when n.Contains(&quot;motorola&quot;) -&gt; Motorola
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>      | n when n.Contains(&quot;dell&quot;) -&gt; Dell
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>      | n when n.Contains(&quot;lg&quot;) -&gt; LG
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>      | n when n.Contains(&quot;t-mobile&quot;) -&gt; TMobile
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>      | n when n.Contains(&quot;sanyo&quot;) -&gt; Sanyo
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>      | n when n.Contains(&quot;nexus&quot;) -&gt; Samsung
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>      | _ -&gt; Unknown
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>type Phone = 
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>  { Id : string
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>    Name : string
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>    Description : string
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>    ImageUrl : string }
</pre></div>
</div>
</div>
<p>As the backend data-store doesn’t directly gives the manufacturer name, we will be adding two <strong>static</strong> members that derives the manufacturer name from the phone name. The <code>ToString</code> function translates to the domain model to its equivalent string version</p>

<p>After defining the domain models, add the business logic for the getting the manufacturer names from the phone in the new source file <code>Phones</code> of the <em>Domain</em> project.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace PhoneCat.Domain
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>[&lt;AutoOpen&gt;]
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>module Phones =    
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  let getManufacturerNames (phones : seq&lt;Phone&gt;) = 
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    phones
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    |&gt; Seq.map (fun p -&gt; ManufacturerName.ToManufacturerName p.Name)
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
</pre></div>
</div>
</div>
<p>The <code>getManufacturerNames</code> is a straight forward function that map given the phones to its equivalent manufacture names.</p>

<p>The next step would be fetching the phones from the data-store. </p>

<p>Let’s start by defining a type provider for the phone. Update the <code>TypeProviders</code> module in the <em>DataAccess</em> project as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>[&lt;Literal&gt;]
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>let private samplePhoneJson = &quot;&quot;&quot;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>{
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  &quot;additionalFeatures&quot;: &quot;Trackball&quot;, 
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  &quot;android&quot;: {
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>      &quot;os&quot;: &quot;Android 2.2&quot;, 
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>      &quot;ui&quot;: &quot;&quot;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  }, 
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  &quot;availability&quot;: [
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>      &quot;Sprint&quot;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>  ], 
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  &quot;battery&quot;: {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>      &quot;standbyTime&quot;: &quot;&quot;, 
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>      &quot;talkTime&quot;: &quot;4 hours&quot;, 
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>      &quot;type&quot;: &quot;Lithium Ion (Li-Ion) (1130 mAH)&quot;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>  }, 
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>  &quot;camera&quot;: {
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>      &quot;features&quot;: [
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>          &quot;Video&quot;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>      ], 
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>      &quot;primary&quot;: &quot;3.2 megapixels&quot;
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>  }, 
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>  &quot;connectivity&quot;: {
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>      &quot;bluetooth&quot;: &quot;Bluetooth 2.1&quot;, 
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>      &quot;cell&quot;: &quot;CDMA2000 1xEV-DO Rev.A&quot;, 
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>      &quot;gps&quot;: true, 
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>      &quot;infrared&quot;: false, 
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>      &quot;wifi&quot;: &quot;802.11 b/g&quot;
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>  }, 
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>  &quot;description&quot;: &quot;Zio uses CDMA2000 1xEV-DO rev&quot;, 
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>  &quot;display&quot;: {
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>      &quot;screenResolution&quot;: &quot;WVGA (800 x 480)&quot;, 
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>      &quot;screenSize&quot;: &quot;3.5 inches&quot;, 
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>      &quot;touchScreen&quot;: true
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>  }, 
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>  &quot;hardware&quot;: {
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>      &quot;accelerometer&quot;: true, 
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>      &quot;audioJack&quot;: &quot;3.5mm&quot;, 
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>      &quot;cpu&quot;: &quot;600MHz Qualcomm MSM7627&quot;, 
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>      &quot;fmRadio&quot;: false, 
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>      &quot;physicalKeyboard&quot;: false, 
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>      &quot;usb&quot;: &quot;USB 2.0&quot;
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>  }, 
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>  &quot;id&quot;: &quot;sanyo-zio&quot;, 
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>  &quot;images&quot;: [
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>      &quot;img/phones/sanyo-zio.0.jpg&quot;, 
<span class="line-numbers"><a href="#n47" name="n47">47</a></span>      &quot;img/phones/sanyo-zio.1.jpg&quot;, 
<span class="line-numbers"><a href="#n48" name="n48">48</a></span>      &quot;img/phones/sanyo-zio.2.jpg&quot;
<span class="line-numbers"><a href="#n49" name="n49">49</a></span>  ], 
<span class="line-numbers"><strong><a href="#n50" name="n50">50</a></strong></span>  &quot;name&quot;: &quot;SANYO ZIO&quot;, 
<span class="line-numbers"><a href="#n51" name="n51">51</a></span>  &quot;sizeAndWeight&quot;: {
<span class="line-numbers"><a href="#n52" name="n52">52</a></span>      &quot;dimensions&quot;: [
<span class="line-numbers"><a href="#n53" name="n53">53</a></span>          &quot;58.6 mm (w)&quot;, 
<span class="line-numbers"><a href="#n54" name="n54">54</a></span>          &quot;116.0 mm (h)&quot;, 
<span class="line-numbers"><a href="#n55" name="n55">55</a></span>          &quot;12.2 mm (d)&quot;
<span class="line-numbers"><a href="#n56" name="n56">56</a></span>      ], 
<span class="line-numbers"><a href="#n57" name="n57">57</a></span>      &quot;weight&quot;: &quot;105.0 grams&quot;
<span class="line-numbers"><a href="#n58" name="n58">58</a></span>  }, 
<span class="line-numbers"><a href="#n59" name="n59">59</a></span>  &quot;storage&quot;: {
<span class="line-numbers"><strong><a href="#n60" name="n60">60</a></strong></span>      &quot;flash&quot;: &quot;130MB&quot;, 
<span class="line-numbers"><a href="#n61" name="n61">61</a></span>      &quot;ram&quot;: &quot;256MB&quot;
<span class="line-numbers"><a href="#n62" name="n62">62</a></span>  }
<span class="line-numbers"><a href="#n63" name="n63">63</a></span>}
<span class="line-numbers"><a href="#n64" name="n64">64</a></span>
<span class="line-numbers"><a href="#n65" name="n65">65</a></span>&quot;&quot;&quot;
<span class="line-numbers"><a href="#n66" name="n66">66</a></span>
<span class="line-numbers"><a href="#n67" name="n67">67</a></span>type PhoneTypeProvider = JsonProvider&lt;samplePhoneJson&gt;
<span class="line-numbers"><a href="#n68" name="n68">68</a></span>
<span class="line-numbers"><a href="#n69" name="n69">69</a></span>let ToPhone (phone : PhoneTypeProvider.Root) =
<span class="line-numbers"><strong><a href="#n70" name="n70">70</a></strong></span>    { Id = phone.Id; Name = phone.Name; Description = phone.Description; ImageUrl = phone.Images.[0] }
</pre></div>
</div>
</div>
<p>Like <code>ToPhoneIndex</code> utility function,  <code>ToPhone</code> converts the data store model <code>PhoneTypeProvider.Root</code> to the domain model <code>Phone</code></p>

<p>Unlike the phone index, <a href="https://github.com/angular/angular-phonecat/tree/master/app/phones">angular-phonecat</a> repository stores the details of each phones in a seperate json file with the naming convention of <strong>{phoneId}.json</strong>. So, in order to get the details of all the phones, we need to fire multiple requests to get the details. Thanks to <a href="http://blogs.msdn.com/b/dsyme/archive/2010/01/09/async-and-parallel-design-patterns-in-f-parallelizing-cpu-and-i-o-computations.aspx">fsharp async workflow</a> we can easily pull all the data parallelly and populate the strongly typed domain models from them.</p>

<p>Update the <code>GitHubRepository</code> module with the code to populate the data from the data store.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace PhoneCat.DataAccess
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>open PhoneCat.Domain
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>module GitHubRepository = 
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  [&lt;Literal&gt;]
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  let private gitHubRepoUrl = &quot;https://raw.githubusercontent.com/angular/angular-phonecat/master/app/phones/&quot;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  let private phoneIndexes = PhoneIndexTypeProvider.Load(gitHubRepoUrl + &quot;phones.json&quot;)
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>  let private phoneIds = phoneIndexes |&gt; Seq.map (fun p -&gt; p.Id)
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>  let private pMap ids =
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>      seq {for id in ids -&gt; async { return id, PhoneTypeProvider.Load(gitHubRepoUrl + id + &quot;.json&quot;) }}
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>      |&gt; Async.Parallel
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>      |&gt; Async.RunSynchronously
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>  let private phones = pMap phoneIds |&gt; Map.ofSeq
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>  let getPhoneIndexes () = phoneIndexes
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>  let getPhones () = phones |&gt; Seq.map (fun p -&gt; p.Value)
</pre></div>
</div>
</div>
<p>Expressiveness is one of the reason behind my fsharp addiction. Just see the above code we have done some much thing with just few lines of code. We have fetched the details of all the phones using their ids from phone index and created an in-memory map.</p>

<p>The <code>getPhones</code> function returns the strongly typed <code>PhoneTypeProvider</code> models from the in-memory map.</p>

<p>The last thing is to wire up all the things and create the <code>ManufacturersController</code>. Update the <code>CompositionRoot</code> type in the <code>Infrastructure</code> module with the below code</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>type CompositionRoot 
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  (
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    phones : seq&lt;PhoneTypeProvider.Root&gt;,
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    phoneIndexes : seq&lt;PhoneIndexTypeProvider.Root&gt;  
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  ) =                
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  interface IHttpControllerActivator with
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  member this.Create(request, controllerDescriptor, controllerType) =
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    let phones' = phones |&gt; Seq.map TypeProviders.ToPhone
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    let phoneIndexes' = phoneIndexes |&gt; Seq.map TypeProviders.ToPhoneIndex
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    if controllerType = typeof&lt;PromotionsController&gt; then
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        let promotionsController = 
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>          new PromotionsController(getPromotions, phoneIndexes')
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        promotionsController :&gt; IHttpController
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    else if controllerType = typeof&lt;ManufacturersController&gt; then
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>        let manufacturersController = 
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>          new ManufacturersController(getManufacturerNames, phones')
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>        manufacturersController :&gt; IHttpController 
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    else
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>        raise &lt;| ArgumentException((sprintf &quot;Unknown controller type requested: %A&quot; controllerType))
</pre></div>
</div>
</div>

<p>And update the <em>Global.asax.fs</em> as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>static member RegisterWebApi(config: HttpConfiguration) =
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>       
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  // existing configuration will be here
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  // Additional Web API settings
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>  let phones = GitHubRepository.getPhones()
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>  let phoneIndexes = GitHubRepository.getPhoneIndexes()
<span class="line-numbers"><a href="#n8" name="n8">8</a></span>  config.Services.Replace(typeof&lt;IHttpControllerActivator&gt;, CompositionRoot(phones, phoneIndexes))
</pre></div>
</div>
</div>

<h3 id="top-selling-phones-api">Top Selling Phones Api</h3>

<p>Create <code>PhonesController</code> in the <em>Web</em> project and add the api to return the top selling phones</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace Web.Controllers
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>open System.Web.Http
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>open PhoneCat.Domain
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>[&lt;RoutePrefix(&quot;api/phones&quot;)&gt;]
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>type PhonesController
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  (
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    getTopSellingPhones : int -&gt; seq&lt;Phone&gt; -&gt; seq&lt;Phone&gt;,
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    phones : seq&lt;Phone&gt;              
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>  ) = 
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  inherit ApiController()
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>  [&lt;Route(&quot;topselling&quot;)&gt;]
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>  member this.GetTopSelling () =
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    getTopSellingPhones 3 phones
</pre></div>
</div>
</div>

<p>The <code>getTopSellingPhones</code> picks given count of phones from the given phones and return them.</p>

<p>In the <code>Phones</code> module of <em>Domain</em> project add the function <code>getTopSellingPhones</code></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>let getTopSellingPhones (phonesSold : seq&lt;PhoneSold&gt;) phoneCount (phones : seq&lt;Phone&gt;) = 
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  phonesSold
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  |&gt; Seq.map (fun p -&gt; p.Quantity, (phones |&gt; Seq.find (fun p' -&gt; p'.Id = p.Id)))
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  |&gt; Seq.sortBy (fun x -&gt; -(fst x))
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  |&gt; Seq.take phoneCount
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>  |&gt; Seq.map snd
</pre></div>
</div>
</div>

<p>The <code>PhoneSold</code> domain model represents how much quantity of each phone has been sold. The <code>getTopSellingPhones</code> sorts the given phones in the descending order based on the quantity being sold and return the given count of the phones from the sorting result</p>

<p>Right now the <code>PhoneSold</code> domain model is not added. So add them in the new module <code>Purchases</code> in the <em>Domain</em> project as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>namespace PhoneCat.Domain
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>[&lt;AutoOpen&gt;]
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>module Purchases =    
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  type PhoneSold = {
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>    Id : string
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>    Quantity : int
<span class="line-numbers"><a href="#n8" name="n8">8</a></span>  } 
</pre></div>
</div>
</div>

<p>The angular data-store doesn’t provide quantity sold information, so we need to get it from somewhere else. To keep it simple, we are going add an <code>InMemoryInventory</code> in <em>DataAccess</em> project as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace PhoneCat.DataAccess
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>open PhoneCat.Domain
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>module InMemoryInventory =
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  let getPhonesSold () = [
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    { Id = &quot;motorola-xoom-with-wi-fi&quot;; Quantity = 10}
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    { Id = &quot;motorola-atrix-4g&quot;; Quantity = 24}
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    { Id = &quot;nexus-s&quot;; Quantity = 4}
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    { Id = &quot;samsung-galaxy-tab&quot;; Quantity = 41}
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    { Id = &quot;sanyo-zio&quot;; Quantity = 31}
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    { Id = &quot;motorola-xoom&quot;; Quantity = 6}
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  ]
</pre></div>
</div>
</div>

<p>As previous api’s we need wire things up and create the controller in the <code>CompositeRoot</code></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span> else if controllerType = typeof&lt;PhonesController&gt; then                    
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  let getTopSellingPhones = Phones.getTopSellingPhones (InMemoryInventory.getPhonesSold())                    
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  let phonesController = new PhonesController(getTopSellingPhones, phones') 
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  phonesController :&gt; IHttpController
</pre></div>
</div>
</div>
<p>We have used <a href="http://fsharpforfunandprofit.com/posts/partial-application/">partial application</a> of the <code>Phones.getTopSellingPhones</code> function here. Its signature is <code>seq&lt;PhoneSold&gt; -&gt; int -&gt; seq&lt;Phone&gt; -&gt; seq&lt;Phone&gt;</code><br />
but the controller expects the function with the signature <code>int -&gt; seq&lt;Phone&gt; -&gt; seq&lt;Phone&gt;</code>.</p>

<p>The expression</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>let getTopSellingPhones = Phones.getTopSellingPhones (InMemoryInventory.getPhonesSold())      
</pre></div>
</div>
</div>
<p>actually does this.</p>

<h3 id="front-end">Front-End</h3>

<p>As front-end is out of the scope of this blog post I am not covering it here. I’ve actually developed it using knockout.js.</p>

<h2 id="summary">Summary</h2>

<p>We have covered a quite a large ground here by creating three web-api endpoints in fsharp using Web Api 2. In the later posts we will be adding error handling and making it robust. The source code for this step can be found in the <a href="https://github.com/tamizhvendan/fsharp-phonecat/tree/1">github repository</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Step 0 - Setting up the fsharp-phonecat Solution]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2014/12/10/step-0-setting-up-the-fsharp-phonecat-solution/"/>
    <updated>2014-12-10T22:15:50+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2014/12/10/step-0-setting-up-the-fsharp-phonecat-solution</id>
    <content type="html"><![CDATA[<blockquote>
  <p>This is step 0 of my blog series on <a href="/blog/2014/12/10/web-application-development-in-fsharp-using-asp-dot-net-mvc/">Web Application Development in Fsharp using ASP.NET MVC</a></p>
</blockquote>

<p>In this blog post, we are going to set up the visual studio solution and create the high level project structure for the <em>fsharp-phonecat</em> application. </p>

<p><strong>Let’s get started!</strong></p>

<h4 id="setting-up-visual-studio-solution">Setting Up Visual Studio Solution</h4>

<p>The first step is to create an blank visual studio solution and name it as <strong>PhoneCat</strong></p>

<p><img class="center" src="/images/fsharp_phonecat/step_0/BlankSolution.png" width="700" height="700"></p>

<p>After creating the blank solution create two fsharp class libraries and name it as <strong>Domain</strong> and <strong>DataAccess</strong> respectively.</p>

<p><img class="center" src="/images/fsharp_phonecat/step_0/ClassLibrary.png" width="700" height="700"></p>

<p>Do delete the sample fsharp files Domain1.fs, DataAccess1.fs and Script.fsx that are created by default while creating the class libraries</p>

<p>Then create a ASP.NET MVC web project using <a href="https://visualstudiogallery.msdn.microsoft.com/39ae8dec-d11a-4ac9-974e-be0fdadec71b">F# MVC 5 template</a> and name it as <em>Web</em></p>

<p><img class="center" src="/images/fsharp_phonecat/step_0/WebProject.png" width="700" height="700"></p>

<p><img class="center" src="/images/fsharp_phonecat/step_0/MVC5.png"></p>

<p>We are going to use TDD, so create test projects for each of the above projects created and name it as <strong>Domain.Tests</strong>, <strong>DataAccess.Tests</strong> and <strong>Web.Tests</strong> respectively.</p>

<p>The final project structure would look like</p>

<p><img class="center" src="/images/fsharp_phonecat/step_0/ProjectStructure.png"></p>

<p>F# MVC 5 template comes with a default Bootstrap theme and we are going to extend it by using e-commerce theme from <a href="http://startbootstrap.com/template-overviews/shop-homepage/">Start Bootstrap</a>. Download the theme and add <em>shop-homepage.css</em> to the Content directory of <strong>Web</strong> project. After adding it update <em>Global.asax.fs</em> to include this css file while bundling.</p>

<p>``` fsharp BundleConfig after adding shop-homepage.css<br />
type BundleConfig() =<br />
    static member RegisterBundles (bundles:BundleCollection) =<br />
        bundles.Add(ScriptBundle(“~/bundles/jquery”)<br />
            .Include([|”~/Scripts/jquery-{version}.js”|]))</p>

<pre><code>    bundles.Add(ScriptBundle("~/bundles/modernizr")
        .Include([|"~/Scripts/modernizr-*"|]))

    bundles.Add(ScriptBundle("~/bundles/bootstrap")
        .Include("~/Scripts/bootstrap.js", 
                    "~/Scripts/respond.js"))

    bundles.Add(StyleBundle("~/Content/css")
        .Include("~/Content/bootstrap.css",
                    "~/Content/site.css",
                    "~/Content/shop-homepage.css")) ``` 
</code></pre>

<p>Now the stage is set for awesomeness. Update <strong>_Layout.cshtml</strong> and <strong>Index.cshtml</strong> as mentioned in the bootstrap theme and run the web project.</p>

<p><img class="center" src="/images/fsharp_phonecat/step_0/HomePage.png" width="800" height="800"></p>

<p>You can checkout the code <a href="https://github.com/tamizhvendan/fsharp-phonecat/tree/0">here</a>. In the <a href="/blog/2014/12/17/phonecat-backend-using-web-api-and-typeproviders/">next-post</a> we will be wiring up the backend. Stay tuned !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Application Development in Fsharp using ASP.NET MVC]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2014/12/10/web-application-development-in-fsharp-using-asp-dot-net-mvc/"/>
    <updated>2014-12-10T17:07:48+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2014/12/10/web-application-development-in-fsharp-using-asp-dot-net-mvc</id>
    <content type="html"><![CDATA[<h3 id="introduction">Introduction</h3>

<p>Fsharp is my new favorite language in recent times and I’ve been learning it for the last six months. I always believe the best way to learn a language / technology / framework is to create something using it and also learning from the mistakes while creating it. So, here is my attempt to create a sample web application in fsharp using ASP.NET MVC framework. In this series of blog posts I’m going to share my experience on creating “phone-cat” web application inspired from the <a href="https://github.com/angular/angular-phonecat">angular-phonecat</a>. </p>

<p>As it is my maiden attempt to create a relatively large web application in fsharp, if you find something that can be improved, feel free to share <em>I’m willing to learn from you.</em></p>

<h3 id="blog-series-links">Blog Series Links</h3>

<ul>
  <li><strong>Step 0</strong> - <a href="/blog/2014/12/10/step-0-setting-up-the-fsharp-phonecat-solution/">Setting up the fsharp-phonecat Solution</a></li>
  <li><strong>Step 1</strong> - <a href="/blog/2014/12/17/phonecat-backend-using-web-api-and-typeproviders/">Creating Web Api endpoints for fsharp-phonecat using Web Api 2</a></li>
</ul>

<h4 id="upcoming-posts">Upcoming Posts</h4>

<ul>
  <li>Event Sourcing using EventStore</li>
  <li>Recommendation System using FSharp Agents, Rx and SignalR</li>
  <li>Advanced Search using FSParsec</li>
  <li>Data Access Layer using No-Sql</li>
  <li>Integration testing using TickSpec and canopy</li>
  <li>Build automation using FAKE</li>
  <li>Documentation generation using FSharp.Formatting</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A hybrid application using ASP.NET MVC3 and Node.js]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2012/06/01/hybrid-application-using-aspnet-mvc3/"/>
    <updated>2012-06-01T00:00:00+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2012/06/01/hybrid-application-using-aspnet-mvc3</id>
    <content type="html"><![CDATA[<div class="post">
    <div>
        Each and every technology has its pros and cons and there is
        <a href="http://people.eecs.ku.edu/~saiedian/Teaching/Sp08/816/Papers/Background-Papers/no-silver-bullet.pdf">no silver bullet!</a><br />

        <br />If you would ask me what you have learnt in your profession so far, I would say the above line as the first one. One technology / platform / language is good at
        solving one kind of problems and bad at solving other kind of problems. The key is leveraging existing <em>platforms</em> with <em>languages</em> targeted at
        specific problems and applications to solve the business problems in hand.<br /><br />Three months ago I
        have come across <a href="http://www.infoq.com/presentations/10-Ways-to-Better-Code-Neal-Ford">an excellent presentation</a> from Neil Ford “10 ways to improve your
        code”. As a 8th way he talks about “Polyglot Programming”. Its about picking the right tool to do the right job. I am inspired by this presentation and started
        exploring the “right tools”.<br /><br />In the pursuit of “Right tools”, I’ve come across the young awesome framework <a href="http://nodejs.org/">node.js</a> which is
        really cool and perfect for real-time applications. On the other hand frameworks like <a href="http://www.asp.net/mvc">ASP.NET MVC3</a> is not meant for creating real-time
        applications and they address different set of other problems. <br /><br />In this blog post, I going to share my recent exploration on leveraging node.js in an
        ASP.NET MVC3 application using a “Chat” feature. Though we can achieve it using <a href="http://signalr.net/">SignalR</a>, I’ve preferred node.js as it is a right tool
        for the chat feature IMO also I wanted to get my hands dirty in creating a hybrid application.<br /><strong><br /></strong><br /><strong>The Node.js Part</strong>
        <br /><br /><a href="http://lh5.ggpht.com/-HLh-ldizDJ0/T8kHC3Ao5_I/AAAAAAAAAZA/vI0DypFIKh8/s1600-h/image%25255B4%25255D.png">
                        <img src="http://lh6.ggpht.com/-rcbRWOlpeBc/T8kHHp32UJI/AAAAAAAAAZI/ypOCgUHMrN0/image_thumb%25255B2%25255D.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="589" />
                    </a><br /><br />The chat server that we are going to use in the MVC3 application has been created using <a href="http://socket.io/">socket.io</a> which makes web-socket programming insanely easy!<br />Its listen for three events<br /><ul><li><em>join</em> – It will be triggered when a new user joined the chat and it broadcast the user name to all the connected users  </li><li><em>message</em> – It willed be triggered when an user send a message in the chat application and broadcast it to the other users  </li><li><em>disconnect</em>– It willed be triggered when an user closes the chat or closes the browser </li></ul>That’s it bang!<br /><strong><br /></strong><br /><strong>The ASP.NET MVC3 side</strong><br /><br /><a href="http://lh6.ggpht.com/-pQEJCXkjOuw/T8kHJFR0zVI/AAAAAAAAAZQ/FTqswQ8XvtY/s1600-h/image%25255B9%25255D.png"><img alt="image" border="0" height="197" src="http://lh6.ggpht.com/-TMmsX9z4rRc/T8kHLTRTuYI/AAAAAAAAAZY/MQurv3YzYIw/image_thumb%25255B5%25255D.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="387" /></a><br /><br />The controller side of Chat just renders the “Index view”. The index view has the following javascript code, and it completes the client side part of the chat application<br /><br /><a href="http://lh5.ggpht.com/-QnLwJvxMIR8/T8kHMoTx1qI/AAAAAAAAAZg/VYhVayPULm4/s1600-h/image%25255B14%25255D.png"><img alt="image" border="0" height="403" src="http://lh5.ggpht.com/-XxmqzAqX1i8/T8kHQ1J07tI/AAAAAAAAAZo/sMw8RevtD9k/image_thumb%25255B8%25255D.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="530" /></a><br /><strong><br /></strong><br />
        <strong>Chat feature in Action</strong><br /><br />
        <a href="http://lh3.ggpht.com/-OoM7_UDFHzQ/T8kHSZP8R8I/AAAAAAAAAZw/QcXNptcqe1I/s1600-h/image%25255B17%25255D.png">
            <img src="http://lh5.ggpht.com/-B4IkFTFavZI/T8kHVZP234I/AAAAAAAAAZ4/IGC3r-10yBA/image_thumb%25255B9%25255D.png?imgmax=800" />
        </a><br />
        <a href="http://lh3.ggpht.com/-xWwrw06nVTk/T8kHW9r2X1I/AAAAAAAAAaA/-g8XAZDm-Qg/s1600-h/image%25255B21%25255D.png">
                <img src="http://lh3.ggpht.com/-F7UPYcQXT14/T8kHZfq0W8I/AAAAAAAAAaI/hLP9g4s8QGA/image_thumb%25255B11%25255D.png?imgmax=800" />
        </a><br />
        <a href="http://lh6.ggpht.com/-OI01pFQYBEs/T8kHaT3_bmI/AAAAAAAAAaQ/GM-QdsQzTVU/s1600-h/image%25255B25%25255D.png">
            <img src="http://lh4.ggpht.com/-VIPYKbYG-rs/T8kHbgnYkBI/AAAAAAAAAaY/24TJhDEHqA8/image_thumb%25255B13%25255D.png?imgmax=800" />
        </a><br />
        <a href="http://lh6.ggpht.com/-_jFs2OzmBx0/T8kHczZpZBI/AAAAAAAAAag/-FMnxb_cD9w/s1600-h/image%25255B29%25255D.png">
            <img alt="image" src="http://lh4.ggpht.com/-KwvpW47kGxI/T8kHeUKp3BI/AAAAAAAAAao/GP4naqkNkvc/image_thumb%25255B15%25255D.png?imgmax=800" />
        </a><br />
        <a href="http://lh4.ggpht.com/-YNLo_UVoZf0/T8kHfwe76BI/AAAAAAAAAaw/dq8JfcSfYRE/s1600-h/image%25255B33%25255D.png">
            <img alt="image" src="http://lh3.ggpht.com/-tcpQUHyW58I/T8kHhrerqxI/AAAAAAAAAa4/ZEJOJK8swnk/image_thumb%25255B17%25255D.png?imgmax=800" />
        </a><br />
        <a href="http://lh6.ggpht.com/-j4AUmiQEA5k/T8kHioICVWI/AAAAAAAAAbA/ZAuJNXh4oZ4/s1600-h/image%25255B37%25255D.png">
            <img src="http://lh3.ggpht.com/-KoM6ka9qFxc/T8kHkUP0AGI/AAAAAAAAAbI/ZuGQ-d8KKS8/image_thumb%25255B19%25255D.png?imgmax=800" />
        </a></div><strong><br /></strong><br /><strong>Summary</strong><br /><br />The objective behind this blog post is just to share the knowledge that I’ve gained in my recent exploration and its just a proof of concept of how to leverage node.js in an MVC3 application. The bottom-line is “Identify and pick the right tool to do the right job”. If you want to play with the source code, don’t forget to clone <a href="https://github.com/tamizhvendan/a-hybrid-app">the repository </a>
    </div>
<p>&lt;/div&gt;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An interesting JSON Model Binding behaviour in ASP.NET MVC3]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2012/04/13/interesting-json-model-binding/"/>
    <updated>2012-04-13T00:00:00+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2012/04/13/interesting-json-model-binding</id>
    <content type="html"><![CDATA[<div class="post">
    <h3>Introduction</h3>
    <p>
        <a href="http://msdn.microsoft.com/en-us/library/dd410405.aspx">Model Binding</a> is one of the coolest feature in ASP.NET MVC3.
        Like a magic wand, your form element values, <a href="http://www.json.org/">JSON values</a>, also query string values automatically get converted to the equivalent C# object and
        makes the life of the developer easier.
    </p> <p>
        The default behaviour of MVC3 model binding works well in more common scenarios.
        But in certain cases it wont work as expected, and in such situations we need to <a href="http://odetocode.com/blogs/scott/archive/2009/04/27/6-tips-for-asp-net-mvc-model-binding.aspx">
            write
            custom model binders
        </a>. Two weeks before while I was working with model binding on JSON values, I’ve encountered an interesting behaviour of JSON model binding.
    </p>

    <p>
        If a JSON property contains a string, it get bind to a string property of the equivalent C# object. But if that same JSON property contains a empty string, while model binding,
        the equivalent C# object’s property is assigned to null and not to empty string! The same happened with arrays. If it contains elements, it get bind without any problems.
        But if the array is empty it get bind to null!!
    </p> <p>
        In this blog post, we are going to get rid of this intriguing behaviour by writing a Custom JSON model binder.
        Hope it would be useful and save you some hairs <i class='emoji smile'></i>

        <h3>The Sample Application – “MyMobileStore”</h3>
    <p>
        In this blog post we are going to see a small application called “MyMobileStore”. This sample app has two features. One will help you to search the mobiles
        in the “MyMobileStore” by using the company name and the mobile types. An another feature will help you to find out the sales details of the mobiles from a given
        company for the specified mobile types.
    </p>

    <h3>Show me the code</h3>
    <p>Core classes</p>
    <p><img class="center" src="/images/JsonModelBinding/CoreClasses.png" title="" ></p>
    <p>As mentioned earlier, the two features of “MyMobileStore” are exposed as controller action methods as below</p>
    <p>
    <p><img class="center" src="/images/JsonModelBinding/MobileController.png" title="" ></p>
    <p>
        Both action methods uses a parameter of type “MobileFilter” which actually holds the filter criteria for finding out the mobiles. It has two properties,
        the companyname of the mobile and the collection of mobile types (Normal, DualSim or SmartPhone)
    </p>
    <p>
    <p><img class="center" src="/images/JsonModelBinding/MobileFilter.png" title="" ></p>
    </p> <p>
        The SearchMobiles action method retrieves all the mobiles from the repository and filter it first by the company name and then by the mobile types.
        One small tweak, if the mobile types count is more than 3, it would take only the first 3 types (Added for demo purpose). I just left the logic of SalesDetails
        action method blank to keep it simple. Both actions returns a JSON result to make them consumed by ajax.
    </p>

    <p><em>(Note: I’ve violated some design principles in the sample code as I just wanted to make this blog post as simple as possible) </em></p>

    <h3>The Problem (Opportunity in my language)</h3>
    <p>
        In a good world, if the user selected either or both the company name and the mobiles types to be filtered, then our controller in “MyMobileStore”
        will happily accepts them as a parameter and continue its work without any mishaps.
    </p>

    <p><img class="center" src="/images/JsonModelBinding/Problem.png" title="" ></p>
    <p>
        But in the bad world, if the user missed out either the company names or the mobiles types or both, ASP.NET MVC3 treat them as nulls which might cause null
        reference exception and breaks the functionality!!
    </p>
    <p><img class="center" src="/images/JsonModelBinding/BadWorld.png" title="" ></p>
    <p><img class="center" src="/images/JsonModelBinding/NullException.png" title="" ></p>

    <p>
        <em>
            (Now you might have understood why I added a tweak in the number of mobile types
            <i class='emoji smile'></i>)
        </em>
    </p>
    <h3>Possible Solutions</h3>
    <ol>
        <li>Perform null check inside the “SearchMobiles” action method and assign empty array.</li>
        <li>Write a Custom Model Binder for “MobileFilter” and perform the null check inside the model binding logic</li>
    </ol>
    <p>
        Though the option 1 is a simple and straightforward thing, what would you do if the “SalesDetails” action method works with the mobile types collection.
        You certainly need to duplicate the null checking inside it also. Let us assume that we have some more action methods in our “MyMobileStore” which has “MobileFilter”
        as their parameter. Do you still duplicate the null check there ?. Think!!
    </p>
    <p>
        If you do so, I am sorry my dear friend, you are violating the <a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself">DRY</a> principle and creating
        <a href="http://pragprog.com/the-pragmatic-programmer/extracts/software-entropy">a broken window</a> in your codebase! So, lets go ahead and write
        <a href="http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882">clean code</a> by making use of Custom Model Binder for our “MobileFilter”.
    </p>

    <h3>The Pragmatic Solution – MobileFilterModelBinder</h3>
    <p>
        <img class="center" src="/images/JsonModelBinding/MobileFilterModelBinder.png" title="" >
    </p>

    <p>
        Our custom model binder is very simple, it just makes use of Default Model binding behaviour. After the default behaviour has been done,
        it checks for null values using <a href="http://msdn.microsoft.com/en-us/library/ms173224.aspx">Null-Coalescing operator</a> and assign empty values if
        the values are null.
    </p> <p>Don’t forget add the custom model binder in the Global.asax.cs file.</p>

    <p>
        <img class="center" src="/images/JsonModelBinding/Global.png" title="" >
    </p>
    <p>Now our “MyAppStore” is robust enough to tackle the bad world!!</p>
    <p>
        <img class="center" src="/images/JsonModelBinding/NoMoreBadWorld.png" title="" >
    </p> 
    <h3>Conclusion</h3> 
    <p>In this blog post you have seen an exciting problematic behaviour of JSON model binding in ASP.NET MVC3 and a simple way to get rid of the default model 
        binding problems. In my next blog post I would share my experiences in how to unit test this custom model binders. 
    You can download the source code that I have used in this blog post from <a href="http://www.box.com/s/16dbb662bb2f94babe27">here</a></p>

</p></p></div>
]]></content>
  </entry>
  
</feed>
