<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: asp.net mvc | Tamizh's Thoughts]]></title>
  <link href="http://blog.tamizhvendan.in/blog/categories/asp-dot-net-mvc/atom.xml" rel="self"/>
  <link href="http://blog.tamizhvendan.in/"/>
  <updated>2014-12-04T20:16:37+05:30</updated>
  <id>http://blog.tamizhvendan.in/</id>
  <author>
    <name><![CDATA[Tamizhvendan S]]></name>
    <email><![CDATA[tamizh88@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A hybrid application using ASP.NET MVC3 and Node.js]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2012/06/01/hybrid-application-using-aspnet-mvc3/"/>
    <updated>2012-06-01T00:00:00+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2012/06/01/hybrid-application-using-aspnet-mvc3</id>
    <content type="html"><![CDATA[<div class="post">
    <div>
        Each and every technology has its pros and cons and there is
        <a href="http://people.eecs.ku.edu/~saiedian/Teaching/Sp08/816/Papers/Background-Papers/no-silver-bullet.pdf">no silver bullet!</a><br />

        <br />If you would ask me what you have learnt in your profession so far, I would say the above line as the first one. One technology / platform / language is good at
        solving one kind of problems and bad at solving other kind of problems. The key is leveraging existing <em>platforms</em> with <em>languages</em> targeted at
        specific problems and applications to solve the business problems in hand.<br /><br />Three months ago I
        have come across <a href="http://www.infoq.com/presentations/10-Ways-to-Better-Code-Neal-Ford">an excellent presentation</a> from Neil Ford “10 ways to improve your
        code”. As a 8th way he talks about “Polyglot Programming”. Its about picking the right tool to do the right job. I am inspired by this presentation and started
        exploring the “right tools”.<br /><br />In the pursuit of “Right tools”, I’ve come across the young awesome framework <a href="http://nodejs.org/">node.js</a> which is
        really cool and perfect for real-time applications. On the other hand frameworks like <a href="http://www.asp.net/mvc">ASP.NET MVC3</a> is not meant for creating real-time
        applications and they address different set of other problems. <br /><br />In this blog post, I going to share my recent exploration on leveraging node.js in an
        ASP.NET MVC3 application using a “Chat” feature. Though we can achieve it using <a href="http://signalr.net/">SignalR</a>, I’ve preferred node.js as it is a right tool
        for the chat feature IMO also I wanted to get my hands dirty in creating a hybrid application.<br /><strong><br /></strong><br /><strong>The Node.js Part</strong>
        <br /><br /><a href="http://lh5.ggpht.com/-HLh-ldizDJ0/T8kHC3Ao5_I/AAAAAAAAAZA/vI0DypFIKh8/s1600-h/image%25255B4%25255D.png">
                        <img src="http://lh6.ggpht.com/-rcbRWOlpeBc/T8kHHp32UJI/AAAAAAAAAZI/ypOCgUHMrN0/image_thumb%25255B2%25255D.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="589" />
                    </a><br /><br />The chat server that we are going to use in the MVC3 application has been created using <a href="http://socket.io/">socket.io</a> which makes web-socket programming insanely easy!<br />Its listen for three events<br /><ul><li><em>join</em> – It will be triggered when a new user joined the chat and it broadcast the user name to all the connected users  </li><li><em>message</em> – It willed be triggered when an user send a message in the chat application and broadcast it to the other users  </li><li><em>disconnect</em>– It willed be triggered when an user closes the chat or closes the browser </li></ul>That’s it bang!<br /><strong><br /></strong><br /><strong>The ASP.NET MVC3 side</strong><br /><br /><a href="http://lh6.ggpht.com/-pQEJCXkjOuw/T8kHJFR0zVI/AAAAAAAAAZQ/FTqswQ8XvtY/s1600-h/image%25255B9%25255D.png"><img alt="image" border="0" height="197" src="http://lh6.ggpht.com/-TMmsX9z4rRc/T8kHLTRTuYI/AAAAAAAAAZY/MQurv3YzYIw/image_thumb%25255B5%25255D.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="387" /></a><br /><br />The controller side of Chat just renders the “Index view”. The index view has the following javascript code, and it completes the client side part of the chat application<br /><br /><a href="http://lh5.ggpht.com/-QnLwJvxMIR8/T8kHMoTx1qI/AAAAAAAAAZg/VYhVayPULm4/s1600-h/image%25255B14%25255D.png"><img alt="image" border="0" height="403" src="http://lh5.ggpht.com/-XxmqzAqX1i8/T8kHQ1J07tI/AAAAAAAAAZo/sMw8RevtD9k/image_thumb%25255B8%25255D.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="530" /></a><br /><strong><br /></strong><br />
        <strong>Chat feature in Action</strong><br /><br />
        <a href="http://lh3.ggpht.com/-OoM7_UDFHzQ/T8kHSZP8R8I/AAAAAAAAAZw/QcXNptcqe1I/s1600-h/image%25255B17%25255D.png">
            <img src="http://lh5.ggpht.com/-B4IkFTFavZI/T8kHVZP234I/AAAAAAAAAZ4/IGC3r-10yBA/image_thumb%25255B9%25255D.png?imgmax=800" />
        </a><br />
        <a href="http://lh3.ggpht.com/-xWwrw06nVTk/T8kHW9r2X1I/AAAAAAAAAaA/-g8XAZDm-Qg/s1600-h/image%25255B21%25255D.png">
                <img src="http://lh3.ggpht.com/-F7UPYcQXT14/T8kHZfq0W8I/AAAAAAAAAaI/hLP9g4s8QGA/image_thumb%25255B11%25255D.png?imgmax=800" />
        </a><br />
        <a href="http://lh6.ggpht.com/-OI01pFQYBEs/T8kHaT3_bmI/AAAAAAAAAaQ/GM-QdsQzTVU/s1600-h/image%25255B25%25255D.png">
            <img src="http://lh4.ggpht.com/-VIPYKbYG-rs/T8kHbgnYkBI/AAAAAAAAAaY/24TJhDEHqA8/image_thumb%25255B13%25255D.png?imgmax=800" />
        </a><br />
        <a href="http://lh6.ggpht.com/-_jFs2OzmBx0/T8kHczZpZBI/AAAAAAAAAag/-FMnxb_cD9w/s1600-h/image%25255B29%25255D.png">
            <img alt="image" src="http://lh4.ggpht.com/-KwvpW47kGxI/T8kHeUKp3BI/AAAAAAAAAao/GP4naqkNkvc/image_thumb%25255B15%25255D.png?imgmax=800" />
        </a><br />
        <a href="http://lh4.ggpht.com/-YNLo_UVoZf0/T8kHfwe76BI/AAAAAAAAAaw/dq8JfcSfYRE/s1600-h/image%25255B33%25255D.png">
            <img alt="image" src="http://lh3.ggpht.com/-tcpQUHyW58I/T8kHhrerqxI/AAAAAAAAAa4/ZEJOJK8swnk/image_thumb%25255B17%25255D.png?imgmax=800" />
        </a><br />
        <a href="http://lh6.ggpht.com/-j4AUmiQEA5k/T8kHioICVWI/AAAAAAAAAbA/ZAuJNXh4oZ4/s1600-h/image%25255B37%25255D.png">
            <img src="http://lh3.ggpht.com/-KoM6ka9qFxc/T8kHkUP0AGI/AAAAAAAAAbI/ZuGQ-d8KKS8/image_thumb%25255B19%25255D.png?imgmax=800" />
        </a></div><strong><br /></strong><br /><strong>Summary</strong><br /><br />The objective behind this blog post is just to share the knowledge that I’ve gained in my recent exploration and its just a proof of concept of how to leverage node.js in an MVC3 application. The bottom-line is “Identify and pick the right tool to do the right job”. If you want to play with the source code, don’t forget to clone <a href="https://github.com/tamizhvendan/a-hybrid-app">the repository </a>
    </div>
<p>&lt;/div&gt;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An interesting JSON Model Binding behaviour in ASP.NET MVC3]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2012/04/13/interesting-json-model-binding/"/>
    <updated>2012-04-13T00:00:00+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2012/04/13/interesting-json-model-binding</id>
    <content type="html"><![CDATA[<div class="post">
    <h3>Introduction</h3>
    <p>
        <a href="http://msdn.microsoft.com/en-us/library/dd410405.aspx">Model Binding</a> is one of the coolest feature in ASP.NET MVC3.
        Like a magic wand, your form element values, <a href="http://www.json.org/">JSON values</a>, also query string values automatically get converted to the equivalent C# object and
        makes the life of the developer easier.
    </p> <p>
        The default behaviour of MVC3 model binding works well in more common scenarios.
        But in certain cases it wont work as expected, and in such situations we need to <a href="http://odetocode.com/blogs/scott/archive/2009/04/27/6-tips-for-asp-net-mvc-model-binding.aspx">
            write
            custom model binders
        </a>. Two weeks before while I was working with model binding on JSON values, I’ve encountered an interesting behaviour of JSON model binding.
    </p>

    <p>
        If a JSON property contains a string, it get bind to a string property of the equivalent C# object. But if that same JSON property contains a empty string, while model binding,
        the equivalent C# object’s property is assigned to null and not to empty string! The same happened with arrays. If it contains elements, it get bind without any problems.
        But if the array is empty it get bind to null!!
    </p> <p>
        In this blog post, we are going to get rid of this intriguing behaviour by writing a Custom JSON model binder.
        Hope it would be useful and save you some hairs <i class='emoji smile'></i>

        <h3>The Sample Application – “MyMobileStore”</h3>
    <p>
        In this blog post we are going to see a small application called “MyMobileStore”. This sample app has two features. One will help you to search the mobiles
        in the “MyMobileStore” by using the company name and the mobile types. An another feature will help you to find out the sales details of the mobiles from a given
        company for the specified mobile types.
    </p>

    <h3>Show me the code</h3>
    <p>Core classes</p>
    <p><img class="center" src="/images/JsonModelBinding/CoreClasses.png" title="" ></p>
    <p>As mentioned earlier, the two features of “MyMobileStore” are exposed as controller action methods as below</p>
    <p>
    <p><img class="center" src="/images/JsonModelBinding/MobileController.png" title="" ></p>
    <p>
        Both action methods uses a parameter of type “MobileFilter” which actually holds the filter criteria for finding out the mobiles. It has two properties,
        the companyname of the mobile and the collection of mobile types (Normal, DualSim or SmartPhone)
    </p>
    <p>
    <p><img class="center" src="/images/JsonModelBinding/MobileFilter.png" title="" ></p>
    </p> <p>
        The SearchMobiles action method retrieves all the mobiles from the repository and filter it first by the company name and then by the mobile types.
        One small tweak, if the mobile types count is more than 3, it would take only the first 3 types (Added for demo purpose). I just left the logic of SalesDetails
        action method blank to keep it simple. Both actions returns a JSON result to make them consumed by ajax.
    </p>

    <p><em>(Note: I’ve violated some design principles in the sample code as I just wanted to make this blog post as simple as possible) </em></p>

    <h3>The Problem (Opportunity in my language)</h3>
    <p>
        In a good world, if the user selected either or both the company name and the mobiles types to be filtered, then our controller in “MyMobileStore”
        will happily accepts them as a parameter and continue its work without any mishaps.
    </p>

    <p><img class="center" src="/images/JsonModelBinding/Problem.png" title="" ></p>
    <p>
        But in the bad world, if the user missed out either the company names or the mobiles types or both, ASP.NET MVC3 treat them as nulls which might cause null
        reference exception and breaks the functionality!!
    </p>
    <p><img class="center" src="/images/JsonModelBinding/BadWorld.png" title="" ></p>
    <p><img class="center" src="/images/JsonModelBinding/NullException.png" title="" ></p>

    <p>
        <em>
            (Now you might have understood why I added a tweak in the number of mobile types
            <i class='emoji smile'></i>)
        </em>
    </p>
    <h3>Possible Solutions</h3>
    <ol>
        <li>Perform null check inside the “SearchMobiles” action method and assign empty array.</li>
        <li>Write a Custom Model Binder for “MobileFilter” and perform the null check inside the model binding logic</li>
    </ol>
    <p>
        Though the option 1 is a simple and straightforward thing, what would you do if the “SalesDetails” action method works with the mobile types collection.
        You certainly need to duplicate the null checking inside it also. Let us assume that we have some more action methods in our “MyMobileStore” which has “MobileFilter”
        as their parameter. Do you still duplicate the null check there ?. Think!!
    </p>
    <p>
        If you do so, I am sorry my dear friend, you are violating the <a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself">DRY</a> principle and creating
        <a href="http://pragprog.com/the-pragmatic-programmer/extracts/software-entropy">a broken window</a> in your codebase! So, lets go ahead and write
        <a href="http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882">clean code</a> by making use of Custom Model Binder for our “MobileFilter”.
    </p>

    <h3>The Pragmatic Solution – MobileFilterModelBinder</h3>
    <p>
        <img class="center" src="/images/JsonModelBinding/MobileFilterModelBinder.png" title="" >
    </p>

    <p>
        Our custom model binder is very simple, it just makes use of Default Model binding behaviour. After the default behaviour has been done,
        it checks for null values using <a href="http://msdn.microsoft.com/en-us/library/ms173224.aspx">Null-Coalescing operator</a> and assign empty values if
        the values are null.
    </p> <p>Don’t forget add the custom model binder in the Global.asax.cs file.</p>

    <p>
        <img class="center" src="/images/JsonModelBinding/Global.png" title="" >
    </p>
    <p>Now our “MyAppStore” is robust enough to tackle the bad world!!</p>
    <p>
        <img class="center" src="/images/JsonModelBinding/NoMoreBadWorld.png" title="" >
    </p> 
    <h3>Conclusion</h3> 
    <p>In this blog post you have seen an exciting problematic behaviour of JSON model binding in ASP.NET MVC3 and a simple way to get rid of the default model 
        binding problems. In my next blog post I would share my experiences in how to unit test this custom model binders. 
    You can download the source code that I have used in this blog post from <a href="http://www.box.com/s/16dbb662bb2f94babe27">here</a></p>

</p></p></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit Testing Html Helpers in ASP.NET MVC3–The Cleaner Way]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2012/03/04/unit-testing-html-helpers-in-aspnet/"/>
    <updated>2012-03-04T00:00:00+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2012/03/04/unit-testing-html-helpers-in-aspnet</id>
    <content type="html"><![CDATA[<div class="post">
    <p>Would you like if your unit test have an assertion like this ?</p>
    <div style="text-align: center;clear:both">
        <img src="http://lh5.ggpht.com/-Z7XXVGQ3sX4/T1J73ct1gqI/AAAAAAAAASQ/qw-uSNrLoOE/image_thumb3.png?imgmax=800" />
    </div>
    <p>
        IMHO having a unit test assertion like this with a long magical string value would become a maintenance problem with additional logic being added.
        It breaks with even minor changes like “adding an extra whitespace” though it is logically correct(Browsers ignores the whitespaces while rendering html)!.
        It is harder to debug to!!
    </p>
    <p>
        How can we get rid of this long string assertion ? Is there any better way to do assertion against this long magical string ejected from a
        <a href="http://stephenwalther.com/blog/archive/2009/03/03/chapter-6-understanding-html-helpers.aspx">HtmlHelper</a> ? One thing which strikes on my mind when I come
        across this problem is why don’t we parse the string as an xml and assert against the xml element instead. It might appear like laborious at the first sight,
        but by making use of <a href="http://msdn.microsoft.com/en-us/library/system.xml.linq.xelement.aspx">XElement</a> and
        <a href="http://msdn.microsoft.com/en-us/library/bb383977.aspx">extension methods</a> we can easily do that.
    </p>

    <p>In the blog post we are going to see how can we implement this in a more cleaner way. </p>

    <p>Okay.. Enough texts.. Its time to see some code!!</p>

    <p>
        The first step is to convert the “html string” returned by the html helper to XElement. Generally most of the helpers returns
        <a href="http://stackoverflow.com/questions/2293357/what-is-an-mvchtmlstring-and-when-should-i-use-it">MvcHtmlString</a>, So, we can easily achieve this
        by writing an extension method called “ToXElement” on MvcHtmlString.
    </p>

    <div style="text-align: center;clear:both">
        <img src="http://lh4.ggpht.com/-cwtnsV7pl2c/T1J763QmH1I/AAAAAAAAASg/6QKxAEGZ5uM/image_thumb%25255B2%25255D.png?imgmax=800" />
    </div>

    <p>That’s it! All set to redefine the way custom html helpers are being tested. </p>

    <p>Fine, Let us see it in action. We will start with a handy HtmlHelper method called “Button” which would render a “Html button tag” and here is the test to assert it.</p>

    <div style="text-align: center;clear:both">
        <img src="http://lh4.ggpht.com/-Zl-hH4zYH1A/T1J7_Y9Qr3I/AAAAAAAAASw/PyWZZJMadV0/image_thumb%25255B10%25255D.png?imgmax=800" />
    </div>
    <p>
        The first test uses the ToXElement extension method and assert against the XElement’s properties whereas the second test uses the
        “magical string with tags added” to do the assertion. Now you may feel what’s wrong with this guy the second test look clean to me,
        why he is making fuss about it. Yes you are correct, the second one looks clean. But it appears to be clean as the requirement in hand is very simple.
    </p>
    <p>IMHO the custom html helpers that we are building in our real world application won’t be as simple as having a button tag with just plain caption in it. </p>
    <p>Fine, lets see the real world. Voice from your team lead <em></em></p>
    <p>
        <em>
            Hey! the Button HtmlHelper you designed has did a tremendous job. Can you make a small change on it so that it would
            <strong>generate a button with a class attribute having the value ‘appbutton’ by default</strong>.
            We need it because it make the button styling consistent with rest of our application ”
        </em>
    </p>

    <p>Let us implement the feature by starting with the test for it</p>
    <p>
        <a href="http://lh4.ggpht.com/-HScL-9YaD1s/T1J8Awk2YbI/AAAAAAAAAS4/Q3E6JlpRItM/s1600-h/image%25255B23%25255D.png">
            <img src="http://lh5.ggpht.com/-MyHzxXBfdCM/T1J8DL_KgbI/AAAAAAAAATA/Vvt1j4k-KYo/image_thumb%25255B14%25255D.png?imgmax=800" />
        </a>
    </p>
    <p>
        Now tell me is the second test clean ? I don’t think so. The generate html string is bit long now also having double quotes inside double quotes makes it hard to read.
        At the same time the first test remains robust and clean.
    </p>

    <p>
        Still not convinced, okay just go up and see the very first test that we have wrote to test the button caption.
        Do you think the <strong>hard way test</strong> with the “<strong>long magical string</strong>” still pass ??
    </p>

    <p style="text-align: center; color: #ff0000; font-weight: bold">It would fail</p>

    <p>Why ?? Here is the error message </p>
    <p>
        <a href="http://lh5.ggpht.com/-K6RjhSEMhLA/T1J8EpZAZ-I/AAAAAAAAATI/TUutsjz0XdE/s1600-h/image%25255B28%25255D.png">
            <img src="http://lh4.ggpht.com/-SpmB-mDwffk/T1J8HO3Np4I/AAAAAAAAATQ/oKxboMdbr6I/image_thumb%25255B17%25255D.png?imgmax=800" />
        </a>
    </p>
    <p>Now what would you do, if you decided to persist with the “long magical string”, then your action would be editing the test as below</p>
    <div style="text-align: center;clear:both">
        <img src="http://lh6.ggpht.com/-RJKnvJ5K8dI/T1J8LTJG_iI/AAAAAAAAATg/TAKyOA5Ej9w/image_thumb%25255B21%25255D.png?imgmax=800" />
    </div>
    <p>Nice job. Now tell me what is the difference between this one and the below one</p>
    <div style="text-align: center;clear:both">
        <a href="http://lh6.ggpht.com/-ps4dX_FO-B0/T1J8MhVBtwI/AAAAAAAAATo/u003U24qiBo/s1600-h/image%25255B42%25255D.png">
            <img src="http://lh3.ggpht.com/-i5zAV0v0JfY/T1J8O7pNIiI/AAAAAAAAATw/Fuo_4WMsFzk/image_thumb%25255B27%25255D.png?imgmax=800" />
        </a>
    </div>
    <p>
        Apart from the test method name everything is same. Is the test clean ? Is the test clearly saying what it is trying to assert ?
        What would happen if we got the requirement to add one more attribute or even more? Think !!
    </p>

    <p>But at the same time the tests which written using XElement assertion would remain healthy and their test method name mean what it is testing </p>
    <p>
        <a href="http://lh6.ggpht.com/-t5GRHpUvWSI/T1J8Qh6dvqI/AAAAAAAAAT4/WaaIvzaEKCY/s1600-h/image%25255B47%25255D.png">
            <img src="http://lh3.ggpht.com/-fQ_eFoBZqnE/T1J8TPZgtFI/AAAAAAAAAUA/1wGDDsT5J8Y/image_thumb%25255B30%25255D.png?imgmax=800" />
        </a>
    </p>
    <p>I leave it you to decide which one is cleaner. </p>
    <h4>Summary</h4>
    <p>Here is the implementation of “Button HtmlHelper” that we unit tested so far</p>
    <div style="text-align: center;clear:both">
        <img src="http://lh4.ggpht.com/-lg0jE79JCVI/T1J8Y3QGqOI/AAAAAAAAAUQ/gif78dMv6XI/image_thumb%25255B33%25255D.png?imgmax=800" />
    </div>
    <p>
        My humble request to the readers of this blog post, please take care of your “Unit tests” and give some more importance to it.
        An hour spent upfront would save a day in future.
    </p>
    <p>“Beauty is in the eye of the beholder”, If you have a better idea to do the same, kindly leave a comment, I am open to learn from you.</p>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit Testing Custom Model Binders in MVC3]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2012/02/11/unit-testing-custom-model-binders-in/"/>
    <updated>2012-02-11T00:00:00+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2012/02/11/unit-testing-custom-model-binders-in</id>
    <content type="html"><![CDATA[<div class="post">
    <p>
        In <a href="/blog/2012/02/02/unit-testing-with-sessions-in-aspnet/">my previous post</a> we have seen a way to do unit testing 
        with Sessions in MVC3 using Custom model binders. In this blog post we are going to see how to do unit test the model binder itself.
    </p>
    <p>
        One remarkable thing which everybody hails in MVC3 is its extensibility and its testability. You can extend/customize the components in the 
        framework and also you can unit test them with ease.
    </p>
    <p>
        Before getting into unit testing the custom model binder, Lets have a closer look at 
            the <a href="http://msdn.microsoft.com/en-us/library/system.web.mvc.imodelbinder.bindmodel.aspx">BindModel</a> method
    </p>
    <br />
    <img class="center" src="/images/UnitTesting_ModelBinders/BindModel.png">
       
        <p>
            In the BindModel method we are making use of Session property in the HttpContext object which is in turn a property of 
            the <a href="http://msdn.microsoft.com/en-us/library/dd492673.aspx">ControllerContext</a> object that is passed to the BindModel method as 
            a parameter by the MVC3 framework. In order to unit test this method we need to have to control over the HttpContext property of 
            the ControllerContext and the Session property of the HttpContext.
    </p>

    <p>How to get control over those properties ? Thanks to <a href="http://msdn.microsoft.com/en-us/library/dd460098.aspx">a constructor of ControllerContext</a></p>
    <br /><img class="center" src="/images/UnitTesting_ModelBinders/ControllerContext.png">        
        <p>ControllerContext uses the constructor dependency injection to get rid of the direct dependency on <a href="http://msdn.microsoft.com/en-us/library/system.web.httpcontextbase.aspx">HttpContextBase</a> and we are going to exploit this to do unit testing. Using a mocking framework we can easily create a mock of HttpContetBase and drive the unit test.</p>
    <p>The Session property of the HttpContextBase is of type <a href="http://msdn.microsoft.com/en-us/library/system.web.httpsessionstatebase.aspx">HttpSessionStateBase</a> which can also be mocked.</p>
    <p>Here is the complete implementation of Test fixture class which unit test the CartModelBinder class that we have seen in the <a href="/blog/2012/02/02/unit-testing-with-sessions-in-aspnet/">previous post</a> using the mocking library <a href="http://code.google.com/p/moq/">Moq</a>.</p>
    <br /><img class="center" src="/images/UnitTesting_ModelBinders/UnitTest.png">      

</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit Testing with Sessions in ASP.NET MVC3]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2012/02/02/unit-testing-with-sessions-in-aspnet/"/>
    <updated>2012-02-02T00:00:00+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2012/02/02/unit-testing-with-sessions-in-aspnet</id>
    <content type="html"><![CDATA[<div class="post">
    <h3>Introduction</h3>
        
        <p>While talking to my friend regarding his project, he told me about how he is doing unit testing which involves sessions in ASP.NET MVC3. 
            His team is actually using a “HttpSimulator” which simulates the web request and then the do unit test by verifying the session by interacting 
            with the simulator. When digging further I have come to know that this way of unit testing session objects are influenced 
            from the “ASP.NET Webforms”. It reminds me the talk of <a href="http://www.infoq.com/presentations/Functional-Thinking">Neil Ford on 
                Function Thinking</a>. In that video he talks about an analogy called “Axe and Chain Saw” to explain our way of thinking as
        </p>
        <blockquote>When we give a chain saw to people who were cutting trees by axe, they would tend to use chain saw in the same way as the use Axe. 
            Which is obviously inefficient. So we should understand at the capabilities of the tool in our hand before we using it</blockquote>
       
        <p>ASP.NET MVC3 is far better than Web Forms when it comes to unit testing. We don’t need to use a simulator to test against our sessions. 
            There is a better way to do this MVC3 and in this blog post we are going to explore it.<p />
       
        <h4>Time for Code</h4>       
        <p>Shopping Cart is the first thing that strikes our mind when we want to quote an example for using Http session. 
        So, I am going to show an app called “MyShop” a mini shopping site through which I am going to explain the concepts involved. 
        The application flow would be as follows</p>
        
            <img class="center" src="/images/UnitTesting_With_Session/Cart.png">
            <img class="center" src="/images/UnitTesting_With_Session/Cart2.png">       
        

        <h4>Models</h4>
        
        <p>The models are simple, straight forward and self explanatory.</p>
    <img class="center" src="/images/UnitTesting_With_Session/model.png">  
    <img class="center" src="/images/UnitTesting_With_Session/CartCsharp.png">    
        <p>I’ve tried my level best to keep the model as simple as possible. 
        So, Cart in MyShop will have only two public methods. One to add a product to the Cart’s Line and another one to retrieve all the 
        products inside the Cart’s line.</p>
        
        <h4>The CartController Version 1.0</h4>
        <img class="center" src="/images/UnitTesting_With_Session/CartController.png"> 
        <p>In this CartController version 1.0 we have two public methods Index and AddToCart which are dependent on HttpSession object. 
            This dependency inside the methods is actually preventing us from unit testing the CartController in simple way and we have no 
            choice other than implementing a “Http Simulator” to unit test these two methods. As I said before there is better to do is! Here we go!!</p>
        
        <h4>The CartController Version 2.0</h4>
        <img class="center" src="/images/UnitTesting_With_Session/CartController2.png"> 
    <p>No more Sessions!!.. Yeah.. We have got rid of the dependency on the session object by adding a new parameter called cart. Now you can use easily unit test the CartController as follows</p>
        <img class="center" src="/images/UnitTesting_With_Session/UnitTest.png"> 
        <p>Okay we made it easy for unit testing by moving the dependency out of the method and introduced the cart as the parameter. But how does my MVC3 framework will know the cart parameter should come from session object ?… Good Catch!! and here comes the magic called custom ModelBinder</p>
       
        <h4>ModelBinder – A brief background</h4>
        <p>Model binding is an exciting feature in MVC3 framework which automatically creates the C# objects directly from Http request and 
            pass it to the Action methods in controller as parameter values. It uses a default model binder which looks at the form values, 
            query string values that are submitted with the Http Request and create the model object.</p>
        <h4>CartModelBinder</h4>
        
        <p>In our case, we need to have a object of Cart which is populated from the Session object and not from the HttpRequest. 
            The default model binder used by MVC3 has no idea about session object. So, Its our responsibility to tell to the MVC3 framework
        </p>
        
        <p>“<em>Hey! If there is any parameter of type Cart in controller action method, then use my own custom model binder called CartModelBinder to create the object</em>”</p>
        <p>There are two steps to do the above said operation</p>
        <p>1. Creating the custom model binder by inheriting the IModelBinder interface</p>
        <img class="center" src="/images/UnitTesting_With_Session/CartModelBinder.png"> 
        <p>2. Registering our custom model binder in the Global.asax.cs file</p>
        <img class="center" src="/images/UnitTesting_With_Session/AppStart.png"> 
        <p>
        That’s all.. MVC3 takes care of rest</p>
        
        <h4>Summary</h4>
        <p>In this blog post we have explored how we can get rid of “Http Simulator” to unit test the controllers which involves Session objects using 
            custom model binder. You can download the working example of “MyShop” showcased in this blog post 
            from <a href="http://www.box.com/s/b9lf2heukyivh68921jj">here</a>. 
            Refer <a href="/blog/2012/02/11/unit-testing-custom-model-binders-in/">my next blog post</a> to check out how to do 
            unit testing with the custom model binder itself.</p>

</p></div>
]]></content>
  </entry>
  
</feed>
