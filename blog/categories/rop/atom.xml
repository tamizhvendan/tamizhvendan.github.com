<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rop | P3 Programmer]]></title>
  <link href="http://blog.tamizhvendan.in/blog/categories/rop/atom.xml" rel="self"/>
  <link href="http://blog.tamizhvendan.in/"/>
  <updated>2015-06-12T09:55:27+05:30</updated>
  <id>http://blog.tamizhvendan.in/</id>
  <author>
    <name><![CDATA[Tamizhvendan S]]></name>
    <email><![CDATA[tamizh88@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Step-7 Validation and Error Handling using ROP]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2015/03/02/step-7-validation-and-error-handling-using-rop/"/>
    <updated>2015-03-02T12:30:33+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2015/03/02/step-7-validation-and-error-handling-using-rop</id>
    <content type="html"><![CDATA[<blockquote>
  <p>This is step 7 of my blog series on <a href="{% post_url 2014-12-10-web-application-development-in-fsharp-using-asp-dot-net-mvc %}">Web Application Development in Fsharp using ASP.NET MVC</a></p>
</blockquote>

<p>In the <a href="{% post_url 2015-02-04-step-6-authentication-using-owin-middleware-and-asp-dot-net-identity %}">last blog post</a> we have seen how to register a new user using the Asp.Net Identity Management framework. Validating the incoming data before updating the backend datastore and handling error while saving are typical tasks in a web application. In this blog post we are going to see how to achieve these things in a web application written in fsharp. As mentioned in the last blog post we will be adding validation logic for new user registration using <a href="http://fsharpforfunandprofit.com/rop/">Railway oriented Programming</a> aka <em>ROP</em>.</p>

<h3 id="cleanup">Cleanup</h3>

<p>Before adding the validation,  let’s do some cleanup and make it ready for adding validation. </p>

<p>Create a new source file <code>UserStorage</code> in the <strong>Identity</strong> project and move the user manager creation logic from <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/6/Web/MvcInfrastructure.fs#L15-L20">MvcInfrastructure</a> to here.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>[&lt;AutoOpen&gt;]
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>module UserStorage =   
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  let createUserManager () =
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    let userStore = new UserStore&lt;User&gt;(new UserDbContext())
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    let userManager = new UserManager&lt;User&gt;(userStore) 
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    let userValidator = new UserValidator&lt;User&gt;(userManager)
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    userValidator.AllowOnlyAlphanumericUserNames &lt;- false   
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    userManager.UserValidator &lt;- userValidator
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    userManager
</pre></div>
</div>
</div>

<p>Create a Request record type in <code>Users</code> that represents the request for creating a new user</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>type CreateUserRequest = {Name: string; Password: string; Email : string}
</pre></div>
</div>
</div>

<p>Then move the user creation logic from Authentication Controller’s <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/6/Web/Controllers/AuthenticationController.fs#L62-L65">Register action method</a> to <code>UserStorage</code> and update it to use <code>CreateUserRequest</code>.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>let createUser (userManager : UserManager&lt;User&gt;) createUserRequest =
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>    
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  let user = new User(Name = createUserRequest.Name, 
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>                      UserName = createUserRequest.Email, 
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>                      Email = createUserRequest.Email)
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>  
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>  userManager.Create(user, createUserRequest.Password)
<span class="line-numbers"><a href="#n8" name="n8">8</a></span>    
</pre></div>
</div>
</div>

<p>Finally, update the <code>Register</code> action method in <code>AuthenticationController</code> to use the above function</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>[&lt;HttpPost&gt;]
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>[&lt;ValidateAntiForgeryToken&gt;]
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>member this.Register(registerViewModel : RegisterViewModel) : ActionResult =
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  let createUserRequest : CreateUserRequest = {
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    Name = registerViewModel.Name; 
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    Email = registerViewModel.Email; 
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    Password = registerViewModel.Password 
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  }
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  let userCreateResult = Users.createUser userManager createUserRequest
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  if (userCreateResult.Succeeded) then
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    signin userManager base.Request user      
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    this.RedirectToAction(&quot;Index&quot;, &quot;Home&quot;) :&gt; ActionResult
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>  else
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    userCreateResult.Errors
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    |&gt; Seq.iter(fun err -&gt; this.ModelState.AddModelError(&quot;&quot;, err))
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    this.View(registerViewModel) :&gt; ActionResult
</pre></div>
</div>
</div>

<p>With this we are wrapping the cleanup work and all set for adding validation.</p>

<h3 id="adding-validation">Adding Validation</h3>

<p>The first step in ROP is defining the “two tracks”. The track <code>Success</code> represents a successful operation (here its validation) and the other track <code>Failure</code> represents the failure while executing an operation. Usually these “two tracks” will be defined using a discriminated union.</p>

<p>Create a source file <code>Rop</code> in the <strong>Identity</strong> project and update it as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>module Rop = 
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  type Error = {Property : string; Message : string}
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  type Result&lt;'a&gt; = 
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    | Success of 'a
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>    | Failure of Error
</pre></div>
</div>
</div>

<p>The <code>Error</code> type provides the metadata associated with the error.</p>

<p>Let’s start writing validation rules from validating Name. Create a source file <code>NameValidation</code> in <strong>Identity</strong> project and add the following code</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>module NameValidation = 
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  let validateNameEmptiness createUserRequest =
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    if (createUserRequest.Name &lt;&gt; null &amp;&amp; 
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>          createUserRequest.Name &lt;&gt; String.Empty) then
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>      Success createUserRequest
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    else
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>      Failure { Property = &quot;Name&quot;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>                Message = &quot;Name is required&quot;}       
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  let validateNameLength createUserRequest =
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    if (createUserRequest.Name.Length &lt;= 50) then
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        Success createUserRequest
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    else
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>      Failure { Property = &quot;Name&quot; 
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>                Message = &quot;Name should not contain more than 50 characters&quot;}
</pre></div>
</div>
</div>

<p>Hope these rules are self-explanatory. We are just validating the name for emptiness and length, and based on the result we are returning either the <code>Success</code> track or <code>Failure</code> track.</p>

<p>Next, add validation rules for Password. Similar to Name Validation add a source file with the name <code>PasswordValidation</code> and update it as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>module PasswordValidation = 
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  let validatePasswordEmptiness createUserRequest = 
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    if (createUserRequest.Password &lt;&gt; null &amp;&amp; 
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>          createUserRequest.Password &lt;&gt; String.Empty) then 
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>      Success createUserRequest
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    else 
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>      Failure { Property = &quot;Password&quot;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>                Message = &quot;Password is required&quot; }
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  let validatePasswordLength createUserRequest = 
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    if (createUserRequest.Password.Length &lt;= 10) then 
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>      Success createUserRequest
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    else 
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>      Failure { Property = &quot;Password&quot;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>                Message = &quot;Password should not contain more than 10 characters&quot; }
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>  
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>  let validatePasswordStrength  = 
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    let specialCharacters = [ &quot;*&quot;; &quot;&amp;&quot;; &quot;%&quot;; &quot;$&quot; ]
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    let hasSpecialCharacters (str : String) = 
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>      specialCharacters |&gt; List.exists (fun c -&gt; str.Contains(c))
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    let errorMessage = 
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>      &quot;Password should contain atleast one of the special characters &quot; 
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>        + String.Join(&quot;,&quot;, specialCharacters)
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>    validate 
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>      (fun createUserRequest -&gt; 
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>        hasSpecialCharacters createUserRequest.Password) 
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>      &quot;Password&quot; 
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>      errorMessage
</pre></div>
</div>
</div>

<p>In addition to the two validation rules that we have seen in <code>NameValidation</code> here we have added one more validation to verify the presence of special characters in the <code>Password</code>.</p>

<p>There is a pattern in all the validation rules that we have seen so far. </p>

<p>{% img center /images/fsharp_phonecat/step_7/validation_pattern.png 450 450 %}</p>

<p>Let’s extract this pattern out of these validation rules and reduce the lines of code!</p>

<p>Create a new source file <code>Validation</code> and add the write this pattern as a function</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>module Validation =  
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  let validate isValid property message createUserRequest =
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    if isValid createUserRequest then
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>      Success createUserRequest
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>    else
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>      Failure {Property = property; Message = message}      
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>
</pre></div>
</div>
</div>
<p>The <code>validate</code> function represents the outer box of the above diagram which takes four inputs</p>

<ul>
  <li>A function to validate the createUserRequest <code>isValid</code> which has the signature
<code>'a -&gt; bool</code> that represents the validation rule</li>
  <li>A string to show which property is invalid in the error <code>property</code></li>
  <li>A string representing the error <code>message</code></li>
  <li>The last is the incoming userCreateRequest <code>createUserRequest</code></li>
</ul>

<p><em>Note: Property and Message parameters are not shown in the diagram just to express the pattern clearly</em></p>

<p>We also need a small utility function to check the emptiness of the string. So add it in <code>Validation</code></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>let isNonEmptyString str = str &lt;&gt; null &amp;&amp; str &lt;&gt; String.Empty
</pre></div>
</div>
</div>

<p>With these functions in place we can refactor the validation rules that we written before.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>module NameValidation = 
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  let validateNameEmptiness =
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    validate 
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>      (fun createUserRequest -&gt; isNonEmptyString createUserRequest.Name) 
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>      &quot;Name&quot; 
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>      &quot;Name is required&quot;        
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  let validateNameLength  =
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    validate 
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>      (fun createUserRequest -&gt; createUserRequest.Name.Length &lt;= 50) 
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>      &quot;Name&quot; 
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>      &quot;Name should not contain more than 50 characters&quot;
</pre></div>
</div>
</div>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>module PasswordValidation = 
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  let validatePasswordEmptiness =
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    validate 
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>      (fun createUserRequest -&gt; isNonEmptyString createUserRequest.Password) 
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>      &quot;Password&quot; 
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>      &quot;Password is required&quot;     
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  let validatePasswordLength = 
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    validate 
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>      (fun createUserRequest -&gt; createUserRequest.Name.Length &lt;= 10) 
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>      &quot;Password&quot; 
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>      &quot;Password should not contain more than 10 characters&quot;    
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>  
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>  let hasSpecialCharacters specialCharacters (str : String) = 
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    specialCharacters |&gt; List.exists (fun c -&gt; str.Contains(c))
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>  
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>  let validatePasswordStrength  = 
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    let specialCharacters = [ &quot;*&quot;; &quot;&amp;&quot;; &quot;%&quot;; &quot;$&quot; ]
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    let errorMessage = 
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>      &quot;Password should contain atleast one of the special characters &quot; 
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>        + String.Join(&quot;,&quot;, specialCharacters)
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    validate 
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>      (fun createUserRequest -&gt; 
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>        hasSpecialCharacters specialCharacters createUserRequest.Password) 
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>      &quot;Password&quot; 
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>      errorMessage
</pre></div>
</div>
</div>
<p>Much cleaner than the previous version, isn’t it?</p>

<p>The final validation is Email validation. It is very similar to the other validations that we have seen so far. One extra validation is verifying the uniqueness of the email id being used to register.</p>

<p>Create a new source file <code>EmailValidation</code> and add the validations</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>module EmailValidation =   
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  let isUniqueEmailAddr (userManager : UserManager&lt;User&gt;) emailAddr =
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    let user = userManager.FindByName(emailAddr)
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    user = null 
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  let isValidEmailAddress emailAddr =
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    let emailAddrRegex = 
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>      @&quot;\A(?:[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+)&quot; +
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        &quot;*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?)\Z&quot;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    Regex.IsMatch(emailAddr, emailAddrRegex, RegexOptions.IgnoreCase)
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  let validateEmailEmptiness =
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    validate 
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>      (fun createUserRequest -&gt; isNonEmptyString createUserRequest.Email) 
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>      &quot;Email&quot; 
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>      &quot;Email is required&quot;    
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>  let validateEmailUniqueness isUniqueEmailAddr createUserRequest =
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    validate 
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>      (fun createUserRequest -&gt; isUniqueEmailAddr createUserRequest.Email) 
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>      &quot;Email&quot; 
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>      &quot;Email address already exists&quot;    
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>  let validateEmailCorrectness =
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>    validate 
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>      (fun createUserRequest -&gt; isValidEmailAddress createUserRequest.Email) 
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>      &quot;Email&quot; 
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>      &quot;Email address is invalid&quot;
</pre></div>
</div>
</div>

<h3 id="putting-all-the-validations-together">Putting all the validations together</h3>

<p>So far we have seen individual property validation rules. It’s time to put all these pieces together and validate the <code>CreateUserRequest</code> as a whole.</p>

<p>Create a source file <code>UserValidation</code> and update it as below</p>

<p>{% img /images/fsharp_phonecat/step_7/uservalidation_match.png %}</p>

<p>Wait.. Wait.. I know how do you feel here.. It’s too much code! Can we do it in a better way? </p>

<h3 id="using-railway-oriented-programming-rop">Using Railway Oriented Programming (ROP)</h3>

<p>Thanks to ROP, we can make the mighty code smaller and more readable. I am going ahead with an assumption that you are aware of ROP. In case if you are not aware of it then watch this <a href="http://vimeo.com/97344498">excellent presentation</a> by <a href="https://twitter.com/ScottWlaschin">Scott Wlaschin</a></p>

<p>{% img center /images/fsharp_phonecat/step_7/bind_function.png 350 500 %}</p>

<p>The crux of ROP is the bind function which composes two functions where the output type of one function is not matching with that of the input. If you want to know more this bind function, do visit this <a href="http://adit.io./posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html">awesome blog post</a> by <a href="https://twitter.com/_egonschiele">Aditya</a>. In this blog post he explains about the bind function under the title <strong>Monads</strong></p>

<p>Let’s start by adding this bind function in the module <code>Rop</code> that we have already created.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>let bind f1 f2 x =
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  match f1 str with
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  | Success x -&gt; f2 x
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  | Failure err -&gt; Failure err
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>let inline (&gt;&gt;=) f1 f2 = bind f1 f2
</pre></div>
</div>
</div>

<p>The bind function here calls the function <code>f1</code> with the given input <code>x</code> if it succeeds, then executes the second function <code>f2</code> with <code>x</code>. In case if the execution of <code>f1</code> resulted in failure then it just passes without executing the second function. </p>

<p>The infix operator <code>&gt;&gt;=</code> is an alias of bind function. </p>

<p>With the help of this bind function, we can rewrite the <code>validateCreateUserRequest</code> function in a better way as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>module UserValidation = 
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  let validateCreateUserRequest userManager  = 
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>      validateEmailEmptiness 
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        &gt;&gt;= validateEmailCorrectness
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        &gt;&gt;= validateEmailUniqueness (isUniqueEmailAddr userManager)
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        &gt;&gt;= validateNameEmptiness
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        &gt;&gt;= validateNameLength
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        &gt;&gt;= validatePasswordEmptiness
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        &gt;&gt;= validatePasswordLength
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        &gt;&gt;= validatePasswordStrength
</pre></div>
</div>
</div>

<p>It’s awesome! Isn’t it? If you are still wondering what’s happening here! Watch the Scott’s presentation one more time.</p>

<h3 id="adding-validation-before-saving">Adding validation before saving</h3>

<p>Now we have the validation infrastructure in place. So, let’s go ahead and add it before creating a new user in the backend. As part of this refactoring we are also going to do error handling of new user creation. </p>

<p>Create a new private function in <code>UserStorage</code> to create a new user with error handling</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>let private createUser' (userManager : UserManager&lt;User&gt;) createUserRequest =
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  try
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    let user = new User(Name = createUserRequest.Name, 
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>                        UserName = createUserRequest.Email, 
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>                        Email = createUserRequest.Email)
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    let identityResult = userManager.Create(user, createUserRequest.Password)
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    if identityResult.Succeeded then
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>      Success createUserRequest
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    else
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>      let errors = String.concat &quot;,&quot; identityResult.Errors
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>      Failure { Property = &quot;&quot;; 
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>                Message = errors}
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>  with
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    | _ -&gt;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>      Failure { Property = &quot;&quot;; 
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>                Message = &quot;An unexpected error happened while creating new user&quot;}
</pre></div>
</div>
</div>

<p>Like validation rules defined before this new <code>createUser'</code> function is also outputs “two tracks”, Success if the user creation is successful others it outputs Failure. Because of this change in function signature <br />
(<code>UserManager&lt;User&gt; -&gt; CreateUserRequest -&gt; Result&lt;CreateUserRequest&gt;</code>) we can fit this easily into the bind function.</p>

<p>Modify the existing <code>CreateUser</code> function to use this</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>let createUser (userManager : UserManager&lt;User&gt;) =
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>      validateCreateUserRequest userManager &gt;&gt;= createUser' userManager
</pre></div>
</div>
</div>

<p>Thanks to <a href="http://fsharpforfunandprofit.com/posts/partial-application/">Partial application</a> we have created new functions on the fly by passing only the partial parameters (<code>UserManager</code> in this case) and make it fit with less code. </p>

<p>Since we have changed the signature of the <code>createUser</code> function from <code>UserManager&lt;User&gt; -&gt; CreateUserRequest -&gt; IdentityResult</code> to <code>UserManager&lt;User&gt; -&gt; CreateUserRequest -&gt; Result&lt;CreateUserRequest&gt;</code> we need to change the <code>Register</code> action method in the <code>AuthenticationController</code>.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>[&lt;HttpPost&gt;]
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>[&lt;ValidateAntiForgeryToken&gt;]
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>member this.Register(registerViewModel : RegisterViewModel) : ActionResult =
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  let createUserRequest : CreateUserRequest = {
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    Name = registerViewModel.Name; 
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    Email = registerViewModel.Email; 
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    Password = registerViewModel.Password 
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  }
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  match UserStorage.createUser userManager createUserRequest with
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  | Failure error -&gt;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    this.ModelState.AddModelError(error.Property, error.Message)
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    this.View(registerViewModel) :&gt; ActionResult
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>  | Success createUserRequest' -&gt;                      
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    let user = userManager.Find(createUserRequest'.Email, createUserRequest'.Password)        
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    signin userManager base.Request user      
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    this.RedirectToAction(&quot;Index&quot;, &quot;Home&quot;) :&gt; ActionResult
</pre></div>
</div>
</div>

<p>That’s it, we are ready to go!</p>

<h3 id="summary">Summary</h3>

<p>In this blog post we have seen how to add validations and error handling in fsharp using ROP. Though it is little hard to get this kind of functional thinking, it offers a great deal of expressiveness and flexibility to your codebase. Just like any other skills if you practice it for quite time you can also master it. You can find the source code associated with this step in the <a href="https://github.com/tamizhvendan/fsharp-phonecat/tree/7">github repository</a></p>
]]></content>
  </entry>
  
</feed>
