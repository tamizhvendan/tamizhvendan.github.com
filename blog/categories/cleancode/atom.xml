<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cleancode | P3 Programmer]]></title>
  <link href="http://blog.tamizhvendan.in/blog/categories/cleancode/atom.xml" rel="self"/>
  <link href="http://blog.tamizhvendan.in/"/>
  <updated>2016-04-28T20:21:41+05:30</updated>
  <id>http://blog.tamizhvendan.in/</id>
  <author>
    <name><![CDATA[Tamizhvendan S]]></name>
    <email><![CDATA[tamizh88@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Expressing Business Logic with F#'s Partial Active Patterns]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2016/04/28/expressing-business-logic-with-f-number-s-partial-active-patterns/"/>
    <updated>2016-04-28T20:16:14+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2016/04/28/expressing-business-logic-with-f-number-s-partial-active-patterns</id>
    <content type="html"><![CDATA[<p>Checking the state of the system and performing a requested action only if certain conditions met, is an indispensable requirement in most of the software we write. Though it is a straightforward thing to do, things will get complex/messier when we need to check multiple conditions.</p>

<p>Recently I encountered such a situation while developing a sample application for <a href="https://twitter.com/tamizhvendan/status/713365205871235072">my fsharp book</a>. Initially, I solved it with a typical nested <code>if else</code> and then I improved it by applying fsharp’s <a href="http://www.developerfusion.com/article/133772/pattern-matching-in-f-part-2-active-patterns/">Partial Active Patterns</a>.</p>

<p>In this blog post , I will be sharing what exactly I did and how it can help you to write an elegant code in fsharp.</p>

<h2 id="business-domain">Business Domain</h2>

<p>Let’s start with a description of the problem domain that we are going to solve.</p>

<p>When an individual visits a restaurant, he can place an order, specifying the list of foods he wants. The foods he ordered will be prepared by the chef and then it will be served.</p>

<p>Preparing a food should satisfy the following conditions</p>

<ul>
  <li>The Food should be a part of the order</li>
  <li>It should not be prepared already</li>
  <li>It should not be served already</li>
</ul>

<p>Serving a food should satisfy the following conditions</p>

<ul>
  <li>The Food should be a part of the order</li>
  <li>It should be prepared already</li>
  <li>It should not be served already</li>
</ul>

<p>If serving a food completes the order, we should tell that the order is served otherwise we should tell that there are some other foods to be served.</p>

<h2 id="starting-with-the-types">Starting with the types</h2>

<p>Let’s start with the types that are needed to solve our problem. If you would like to know why we need to start with the types do check out <a href="http://tomasp.net/blog/type-first-development.aspx/">this wonderful blog post</a> by <a href="https://twitter.com/tomaspetricek">Tomas Petricek</a>.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>type Food = {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  MenuNumber : int
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  Name : string
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>}
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>type Order = {
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  Foods : Food list
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>}
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>type InProgressOrder = {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>  PlacedOrder : Order
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  PreparedFoods : Food list
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>  ServedFoods : Food list
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>}
</pre></div>
</div>
</div>

<p>The names of the types and its properties clearly describe what they represent, so let’s get to the crux of the problem straight</p>

<h2 id="prepare-food">Prepare Food</h2>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>let prepareFood food ipo =
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  if List.contains food ipo.PlacedOrder.Foods  then
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    if not (List.contains food ipo.PreparedFoods) then
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>      if not (List.contains food ipo.ServedFoods) then
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>          printfn &quot;Prepare Food&quot;
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>      else
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        printfn &quot;Can not prepare already served food&quot;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    else
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>      printfn &quot;Can not prepare already prepared food&quot;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  else
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    printfn &quot;Can not prepare non ordered food&quot;
</pre></div>
</div>
</div>

<p>The <code>if else</code> conditions represent the criteria mentioned in the business domain and for the sake of simplicity we are just writing the action in the console.</p>

<h2 id="serve-food">Serve Food</h2>

<p>Let’s move on to serving food</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>let isServingFoodCompletesOrder food ipo =
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  let nonServedFoods =
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    List.except ipo.ServedFoods ipo.PlacedOrder.Foods
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  nonServedFoods = [food]
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>let serveFood food ipo =
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  if List.contains food ipo.PlacedOrder.Foods  then
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    if List.contains food ipo.PreparedFoods then
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>      if not (List.contains food ipo.ServedFoods) then
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        if isServingFoodCompletesOrder food ipo then
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>          printfn &quot;Order Served&quot;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        else
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>          printfn &quot;Still some food(s) to serve&quot;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>      else
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        printfn &quot;Can not serve already served food&quot;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    else
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>      printfn &quot;Can not serve unprepared food&quot;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>  else
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    printfn &quot;Can not serve non ordered food&quot;
</pre></div>
</div>
</div>

<p>This is called <a href="http://c2.com/cgi/wiki?ArrowAntiPattern">Arrow Anti Pattern</a> and it is obvious that this code is hard to understand and maintain.</p>

<p>It can be improved by using the techniques mentioned <a href="http://programmers.stackexchange.com/questions/47789/how-would-you-refactor-nested-if-statements">in this StackExchange’s answers</a> and also by using the <a href="https://en.wikipedia.org/wiki/Specification_pattern">specification pattern</a> from the OO World.</p>

<p>Though the specification pattern solves the problem, it has a lot of code! No offense here but it can be done in a better way.</p>

<h2 id="f-active-patterns">F# Active Patterns</h2>

<blockquote>
  <p>Active Patterns allow programmers to wrap arbitrary values in a union-like data structure for easy pattern matching. For example, its possible wrap objects with an active pattern, so that you can use objects in pattern matching as easily as any other union type. - <a href="https://en.wikibooks.org/wiki/F_Sharp_Programming/Active_Patterns">F# Programming Wiki</a></p>
</blockquote>

<p>Let’s begin by defining a partial active pattern for <code>NonOrderedFood</code> and <code>UnPreparedFood</code></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>let (|NonOrderedFood|_|) order food =
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  match List.contains food order.Foods with
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  | false -&gt; Some food
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  | true -&gt; None
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>let (|UnPreparedFood|_|) ipo food =
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  match List.contains food ipo.PreparedFoods with
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  | false -&gt; Some food
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  | true -&gt; None
</pre></div>
</div>
</div>

<p>Then for <code>AlreadyPreparedFood</code> and <code>AlreadyServedFood</code></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>let (|AlreadyPreparedFood|_|) ipo food =
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  match List.contains food ipo.PreparedFoods with
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  | true -&gt; Some food
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  | false -&gt; None
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>let (|AlreadyServedFood|_|) ipo food =
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  match List.contains food ipo.ServedFoods with
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  | true -&gt; Some food
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  | false -&gt; None
</pre></div>
</div>
</div>

<p>Finally,</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>let (|CompletesOrder|_|) ipo food =
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  let nonServedFoods =
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    List.except ipo.ServedFoods ipo.PlacedOrder.Foods
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  match nonServedFoods = [food] with
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  | true -&gt; Some food
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>  | false -&gt; None
</pre></div>
</div>
</div>

<p>With this in place we can rewrite <code>serveFood</code> function as</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>let serveFood food ipo =
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  match food with
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  | NonOrderedFood ipo.PlacedOrder _ -&gt;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    printfn &quot;Can not serve non ordered food&quot;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  | UnPreparedFood ipo _ -&gt;
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    printfn &quot;Can not serve unprepared food&quot;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  | AlreadyServedFood ipo _ -&gt;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    printfn &quot;Can not serve already served food&quot;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  | CompletesOrder ipo _ -&gt;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    printfn &quot;Order Served&quot;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>  | _ -&gt; printfn &quot;Still some food(s) to serve&quot;
</pre></div>
</div>
</div>

<blockquote>
  <p>The goal is to have code that scrolls vertically a lot… but not so much horizontally. - <a href="http://blog.codinghorror.com/flattening-arrow-code/">Jeff Atwood</a></p>
</blockquote>

<p>Now the code expressing the business logic more clearly</p>

<p>To refactor <code>prepareFood</code> to use the parial active patterns we need one more. So, let’s define it</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>let (|PreparedFood|_|) ipo food =
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  match List.contains food ipo.PreparedFoods with
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  | true -&gt; Some food
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  | false -&gt; None
</pre></div>
</div>
</div>

<p>Now we all set to refactor <code>prepareFood</code> and here we go</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>let prepareFood food ipo =
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  match food with
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  | NonOrderedFood ipo.PlacedOrder _ -&gt;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    printfn &quot;Can not prepare non ordered food&quot;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  | PreparedFood ipo _ -&gt;
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    printfn &quot;Can not prepare already prepared food&quot;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  | AlreadyServedFood ipo _ -&gt;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    printfn &quot;Can not prepare already served food&quot;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  | _ -&gt; printfn &quot;Prepare Food&quot;
</pre></div>
</div>
</div>

<p>Awesome!</p>

<p>You can get the complete code in <a href="https://github.com/tamizhvendan/blog-samples/tree/master/RefactoringIfElse/src">my github repository</a></p>

<h2 id="summary">Summary</h2>

<blockquote>
  <p>F# is excellent at concisely expressing business and domain logic - <a href="https://www.thoughtworks.com/radar/languages-and-frameworks/f">ThoughtWorks Tech Radar 2012</a></p>
</blockquote>

<h3 id="related-posts">Related Posts</h3>

<p><a href="/blog/2015/04/02/step-10-refactoring-composition-root/">Refactoring Composition Root</a></p>
]]></content>
  </entry>
  
</feed>
