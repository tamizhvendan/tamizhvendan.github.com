<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: gorm | P3 Programmer]]></title>
  <link href="http://blog.tamizhvendan.in/blog/categories/gorm/atom.xml" rel="self"/>
  <link href="http://blog.tamizhvendan.in/"/>
  <updated>2017-07-23T13:57:20+05:30</updated>
  <id>http://blog.tamizhvendan.in/</id>
  <author>
    <name><![CDATA[Tamizhvendan S]]></name>
    <email><![CDATA[tamizh88@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Managing Data in golang using gorm - Part 1]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2017/07/23/managing-data-in-golang-using-gorm-part-1/"/>
    <updated>2017-07-23T07:55:59+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2017/07/23/managing-data-in-golang-using-gorm-part-1</id>
    <content type="html"><![CDATA[<p><a href="www.ajira.tech">We</a> have been using <a href="jinzhu.me/gorm/">gorm</a> as a primary tool to interact with <a href="https://www.PostgreSQL.org">PostgreSQL</a> from <a href="https://golang.org">golang</a> for almost a year now. </p>

<p>Gorm does an excellent job as an <a href="https://en.wikipedia.org/wiki/Object-relational_mapping">ORM</a> library, and we enjoyed using it in our projects. </p>

<p>Through this blog post series, I will be sharing our experiences on how we leveraged gorm to solve our client’s needs.</p>

<h2 id="the-domain">The Domain</h2>

<p>In this blog post series, we will be implementing the data persistence side of a blogging platform similar to <a href="https://medium.com">medium</a>, called <strong>gomidway</strong>.  </p>

<h2 id="part-1-introduction">Part-1 Introduction</h2>

<p>In this blog post, we will be working on defining the backend for signing up a new user and providing a provision for user login.</p>

<h2 id="the-user-model">The User Model</h2>

<p>Let’s start our modeling from the User table. </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="class">CREATE</span> <span class="type">TABLE</span> users(
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  id SERIAL <span class="directive">PRIMARY</span> <span class="type">KEY</span>,
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  username <span class="predefined-type">VARCHAR</span>(<span class="integer">50</span>) <span class="directive">UNIQUE</span> <span class="keyword">NOT</span> <span class="predefined-constant">NULL</span>,
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  email <span class="predefined-type">VARCHAR</span>(<span class="integer">255</span>) <span class="directive">UNIQUE</span> <span class="keyword">NOT</span> <span class="predefined-constant">NULL</span>,
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  password_hash <span class="predefined-type">TEXT</span> <span class="keyword">NOT</span> <span class="predefined-constant">NULL</span>
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>);
</pre></div>
</div>
</div>

<p>Then define an equivalent model in golang.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="keyword">type</span> User <span class="keyword">struct</span> {
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  ID           <span class="predefined-type">uint</span> <span class="shell"><span class="delimiter">`</span><span class="content">gorm:&quot;primary_key&quot;</span><span class="delimiter">`</span></span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  Username     <span class="predefined-type">string</span>
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  Email        <span class="predefined-type">string</span>
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  PasswordHash <span class="predefined-type">string</span>
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>}
</pre></div>
</div>
</div>

<p>Before taking the next steps, let me spend some time on explaining where to put this <code>User</code> <em>struct</em></p>

<h3 id="the-folder-structure">The Folder Structure</h3>

<p>There are two common ways to organize the models in golang. </p>

<p>One approach is defining a folder called <code>models</code> and put all the models here</p>

<p><img class="center" src="/images/gomidway/part1/models.png"></p>

<p>The another approach is an invert of this structure. In this design, we will have a separate folder for each model. </p>

<p><img class="center" src="/images/gomidway/part1/domain.png"></p>

<p>Both the approaches have pros and cons. Choosing one over the other is entirely opinionated, and my preference is the second one.</p>

<p>IMHO, the folder structure has <a href="https://8thlight.com/blog/uncle-bob/2011/09/30/Screaming-Architecture.html">to represent the domain</a> and the code associated a domain model should coexist with proper separation of concern. </p>

<p><img class="center" src="/images/gomidway/part1/folder_structure.png"></p>

<blockquote>
  <p>Software architectures are structures that support the use cases of the system - <a href="https://www.amazon.com/Object-Oriented-Software-Engineering-Driven-Approach/dp/0201403471">Ivar Jacobson</a></p>
</blockquote>

<p>In this gorm blog post series, I will be following the <code>domain</code> based folder structure. </p>

<h2 id="use-case-1---user-signup">Use Case #1 - User Signup</h2>

<p>The Signup use case of a user is defined as </p>

<ul>
  <li>A user should sign up himself by providing his email, username, and password</li>
  <li>If the username or the email already exists, we need to let him now </li>
  <li>We also need to let him know if there is any error while persisting his signup details</li>
  <li>If signup succeeds, he should be getting a unique identifier in the system</li>
</ul>

<p>To keep things simple and the focus of this series is on the data persistence side, we are not going to discuss/implement the HTTP portion of the application. Instead, we will be driving our implementation with some hard code values during the application bootstrap. </p>

<h3 id="defining-the-signup-handler">Defining the Signup handler</h3>

<p>Like many terms in software engineering, the term <strong>handler</strong> has different meanings. So, let me start by explaining what I mean by a handler here. </p>

<p>A handler is a function that represents an use-case. It takes its dependency(ies) and its input(s) as parameters and returns the outcome of the use case. </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="comment">// user/signup/handler.go</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="keyword">package</span> signup
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="keyword">type</span> Request <span class="keyword">struct</span> {
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  Username <span class="predefined-type">string</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  Email    <span class="predefined-type">string</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  Password <span class="predefined-type">string</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>}
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span class="keyword">type</span> Response <span class="keyword">struct</span> {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>  Id <span class="predefined-type">uint</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>}
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span><span class="keyword">func</span> Signup(db *gorm.DB, req *Request) (*Response, <span class="predefined-type">error</span>) { 
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>  <span class="comment">// ...</span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>}
</pre></div>
</div>
</div>

<p>One important thing to notice here is, the <code>Request</code> and the <code>Response</code> are golang structs. How the request is being populated from user’s request (JSON Post / HTML form Post / command from a message queue) and how the response communicated to the user (JSON response / HTML view / event in the message queue) are left up to the application boundary. </p>

<p>In the Signup function, as a first step, we need to create the hash for the password using <a href="https://godoc.org/golang.org/x/crypto/bcrypt">bcrypt</a> and then create the new user. </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="keyword">func</span> Signup(db *gorm.DB, req *Request) (*Response, <span class="predefined-type">error</span>) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  passwordHash, err := bcrypt.GenerateFromPassword([]<span class="predefined-type">byte</span>(req.Password), bcrypt.DefaultCost)
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  <span class="keyword">if</span> err != <span class="predefined-constant">nil</span> {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    <span class="keyword">return</span> <span class="predefined-constant">nil</span>, err
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  }
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  newUser := &amp;user.User{
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    Username:     req.Username,
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    Email:        req.Email,
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    PasswordHash: <span class="predefined-type">string</span>(passwordHash),
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  }
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>  <span class="comment">// ????</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>}
</pre></div>
</div>
</div>

<p>The next step is persisting this newly created user</p>

<h3 id="adding-user-create-function">Adding User Create function</h3>

<p>The create user function is straight forward. We just need to call the <a href="https://godoc.org/github.com/jinzhu/gorm#DB.Create">Create</a> method in gorm</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="comment">// user/create.go</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="keyword">package</span> user
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="keyword">func</span> Create(db *gorm.DB, user *User) (<span class="predefined-type">uint</span>, <span class="predefined-type">error</span>) {
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  err := db.Create(user).Error
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  <span class="keyword">if</span> err != <span class="predefined-constant">nil</span> {
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="keyword">return</span> <span class="integer">0</span>, err
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  }
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  <span class="keyword">return</span> user.ID, <span class="predefined-constant">nil</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>}
</pre></div>
</div>
</div>

<p>But the work is not done yet!</p>

<p>As per our use case, We need to let the handler to know if the username or the email already exists. </p>

<p>We already have unique constraints in place in the <code>users</code> table. </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>gomidway=# \d users
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>                                    Table &quot;public.users&quot;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    Column     |          Type          |                     Modifiers
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>---------------+------------------------+----------------------------------------------------
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span> id            | integer                | not null default nextval('users_id_seq'::regclass)
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span> username      | character varying(50)  | not null
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span> email         | character varying(255) | not null
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span> password_hash | text                   | not null
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>Indexes:
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    &quot;users_pkey&quot; PRIMARY KEY, btree (id)
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    &quot;users_email_key&quot; UNIQUE CONSTRAINT, btree (email)
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    &quot;users_username_key&quot; UNIQUE CONSTRAINT, btree (username)
</pre></div>
</div>
</div>

<p>So, the <code>Create</code> method in gorm would return an error of type <a href="http://godoc.org/github.com/lib/pq#Error">pq Error</a> with the <a href="http://godoc.org/github.com/lib/pq#ErrorCode">ErrorCode</a> as <code>"23505"</code> for <code>unique_violation</code>, and the <code>Constraint</code> field will be having the unique constraint key name <code>users_email_key</code> and <code>users_username_key</code> for email and username duplicate error respectively. </p>

<p>Though this error does communicate what we wanted, it is very generic and what we want is something concrete to our use case. </p>

<p>To make it happen, let’s create a new folder <code>postgres</code> (aka package) and write a utility function <code>IsUniqueConstraintError</code> which checks whether the given error is a unique constraint error or not.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="comment">// postgres/pq.go</span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span><span class="keyword">func</span> IsUniqueConstraintError(err <span class="predefined-type">error</span>, constraintName <span class="predefined-type">string</span>) <span class="predefined-type">bool</span> {
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  <span class="keyword">if</span> pqErr, ok := err.(*pq.Error); ok {
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    <span class="keyword">return</span> pqErr.Code == <span class="string"><span class="delimiter">&quot;</span><span class="content">23505</span><span class="delimiter">&quot;</span></span> &amp;&amp; pqErr.Constraint == constraintName
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  }
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>  <span class="keyword">return</span> <span class="predefined-constant">false</span>
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>}
</pre></div>
</div>
</div>

<p>and then in the <code>model.go</code>, where we have the User model, add the constraint names as constants.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="comment">// user/model.go</span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span><span class="comment">// ...</span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span><span class="keyword">const</span> (
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  UniqueConstraintUsername = <span class="string"><span class="delimiter">&quot;</span><span class="content">users_username_key</span><span class="delimiter">&quot;</span></span>
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  UniqueConstraintEmail    = <span class="string"><span class="delimiter">&quot;</span><span class="content">users_email_key</span><span class="delimiter">&quot;</span></span>
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>)
<span class="line-numbers"><a href="#n7" name="n7">7</a></span><span class="comment">// ...</span>
</pre></div>
</div>
</div>

<p>Finally, define the custom error types</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="comment">// user/model.go</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="comment">// ...</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="keyword">type</span> UsernameDuplicateError <span class="keyword">struct</span> {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  Username <span class="predefined-type">string</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>}
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span class="keyword">func</span> (e *UsernameDuplicateError) Error() <span class="predefined-type">string</span> {
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  <span class="keyword">return</span> fmt.Sprintf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Username '%s' already exists</span><span class="delimiter">&quot;</span></span>, e.Username)
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>}
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span class="keyword">type</span> EmailDuplicateError <span class="keyword">struct</span> {
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  Email <span class="predefined-type">string</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>}
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span><span class="keyword">func</span> (e *EmailDuplicateError) Error() <span class="predefined-type">string</span> {
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>  <span class="keyword">return</span> fmt.Sprintf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Email '%s' already exists</span><span class="delimiter">&quot;</span></span>, e.Email)
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>}
</pre></div>
</div>
</div>

<p>With this new helper function, constants and types in places, we can complete the create user function as follows.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="comment">// user/create.go</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="keyword">func</span> Create(db *gorm.DB, user *User) (<span class="predefined-type">uint</span>, <span class="predefined-type">error</span>) {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  err := db.Create(user).Error
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  <span class="keyword">if</span> err != <span class="predefined-constant">nil</span> {
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    <span class="keyword">if</span> postgres.IsUniqueConstraintError(err, UniqueConstraintUsername) {
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>      <span class="keyword">return</span> <span class="integer">0</span>, &amp;UsernameDuplicateError{Username: user.Username}
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    }
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span class="keyword">if</span> postgres.IsUniqueConstraintError(err, UniqueConstraintEmail) {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>      <span class="keyword">return</span> <span class="integer">0</span>, &amp;EmailDuplicateError{Email: user.Email}
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    }
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    <span class="keyword">return</span> <span class="integer">0</span>, err
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  }
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>  <span class="keyword">return</span> user.ID, <span class="predefined-constant">nil</span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>}
</pre></div>
</div>
</div>

<p>On the handler side, we just pass the outcome of this create function to the outside(application boundary) layer</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="comment">// user/signup/handler.go</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="comment">// ...</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="keyword">func</span> Signup(db *gorm.DB, req *Request) (*Response, <span class="predefined-type">error</span>) {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  <span class="comment">// ...</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  id, err := user.Create(db, newUser)
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  <span class="keyword">if</span> err != <span class="predefined-constant">nil</span> {
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="keyword">return</span> <span class="predefined-constant">nil</span>, err
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  }
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  <span class="keyword">return</span> &amp;Response{Id: id}, err
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>}
</pre></div>
</div>
</div>

<h3 id="test-driving-user-signup">Test Driving User Signup</h3>

<p>As we discussed earlier, let’s test drive the implementation from the application bootstrap. </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="comment">// main.go</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="keyword">func</span> panicOnError(err <span class="predefined-type">error</span>) {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  <span class="keyword">if</span> err != <span class="predefined-constant">nil</span> {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    <span class="predefined">panic</span>(err)
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  }
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>}
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span class="keyword">func</span> main() {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  db, err := gorm.Open(<span class="string"><span class="delimiter">&quot;</span><span class="content">postgres</span><span class="delimiter">&quot;</span></span>,
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    <span class="shell"><span class="delimiter">`</span><span class="content">host=localhost </span></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span class="shell"><span class="content">      user=postgres password=test</span></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span><span class="shell"><span class="content">      dbname=gomidway </span></span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span><span class="shell"><span class="content">      sslmode=disable</span><span class="delimiter">`</span></span>)
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>  panicOnError(err)
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>  <span class="keyword">defer</span> db.Close()
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>  signupUser(db)
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>}
</pre></div>
</div>
</div>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="comment">// main.go</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="comment">// ...</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="keyword">func</span> signupUser(db *gorm.DB) {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  res, err := signup.Signup(db, &amp;signup.Request{
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    Email:    <span class="string"><span class="delimiter">&quot;</span><span class="content">foo@bar.com</span><span class="delimiter">&quot;</span></span>,
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    Username: <span class="string"><span class="delimiter">&quot;</span><span class="content">foo</span><span class="delimiter">&quot;</span></span>,
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    Password: <span class="string"><span class="delimiter">&quot;</span><span class="content">foobar</span><span class="delimiter">&quot;</span></span>,
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  })
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  <span class="keyword">if</span> err != <span class="predefined-constant">nil</span> {
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    <span class="keyword">switch</span> err.(<span class="keyword">type</span>) {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    <span class="keyword">case</span> *user.UsernameDuplicateError:
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>      fmt.Println(<span class="string"><span class="delimiter">&quot;</span><span class="content">Bad Request: </span><span class="delimiter">&quot;</span></span>, err.Error())
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>      <span class="keyword">return</span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    <span class="keyword">case</span> *user.EmailDuplicateError:
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>      fmt.Println(<span class="string"><span class="delimiter">&quot;</span><span class="content">Bad Request: </span><span class="delimiter">&quot;</span></span>, err.Error())
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>      <span class="keyword">return</span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    <span class="keyword">default</span>:
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>      fmt.Println(<span class="string"><span class="delimiter">&quot;</span><span class="content">Internal Server Error: </span><span class="delimiter">&quot;</span></span>, err.Error())
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>      <span class="keyword">return</span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    }
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>  }
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>  fmt.Println(<span class="string"><span class="delimiter">&quot;</span><span class="content">Created: </span><span class="delimiter">&quot;</span></span>, res.Id)
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>}
</pre></div>
</div>
</div>

<p>if we run the program for the first time after setting up the PostgreSQL database <code>gomidway</code> with the <code>users</code> table, we will get the following output</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>Created:  1
</pre></div>
</div>
</div>

<p>if we rerun the program again, we’ll see the bad request error</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>Bad Request:  Username 'foo' already exists
</pre></div>
</div>
</div>

<p>if we modify the username from <code>foo</code> to <code>bar</code> and run the program, we’ll again get a bad request error for the email address</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>Bad Request:  Email 'foo@bar.com' already exists
</pre></div>
</div>
</div>

<p>That’s it! We have completed the first use case of <strong>gomidway</strong>!!</p>

<h2 id="use-case-2---user-login">Use Case #2 - User Login</h2>

<p>The next use case that we are going to implement is user login. The requirement for login has been defined as</p>

<ul>
  <li>
    <p>if the user logs in with a different email address or with a different password, we need to show him appropriate errors</p>
  </li>
  <li>
    <p>if the email and the password matches, let the user know that he has logged in</p>
  </li>
</ul>

<h3 id="defining-the-login-handler">Defining the Login handler</h3>

<p>As we did for the signup, let’s start our implementation from defining the handler for login</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="comment">// user/login/handler.go</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="keyword">type</span> Request <span class="keyword">struct</span> {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  Email    <span class="predefined-type">string</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  Password <span class="predefined-type">string</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>}
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span class="keyword">type</span> Response <span class="keyword">struct</span> {
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  User *user.User
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>}
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span class="keyword">func</span> Login(db *gorm.DB, req *Request) (*Response, <span class="predefined-type">error</span>) { 
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  <span class="comment">// ...</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>}
</pre></div>
</div>
</div>

<p>To implement login, we need some help from the persistence. In other words, we have to find whether the user with the given email address exists in our application.</p>

<h3 id="adding-user-findbyemail-function">Adding User FindByEmail function</h3>

<p>Let’s create a new file <code>find.go</code> in the <code>user</code> folder and define the <code>FindByEmail</code> function</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="comment">// user/find.go</span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span><span class="keyword">func</span> FindByEmail(db *gorm.DB, email <span class="predefined-type">string</span>) (*User, <span class="predefined-type">error</span>) {
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  <span class="keyword">var</span> user User
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  res := db.Find(&amp;user, &amp;User{Email: email})
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  <span class="keyword">return</span> &amp;user, res.Error
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>}
</pre></div>
</div>
</div>

<p>That’s great. But how are we going to find if the email didn’t exist in the first place?</p>

<p>Thankfully, We don’t need to anything extra other than calling the <a href="https://godoc.org/github.com/jinzhu/gorm#DB.RecordNotFound">RecordNotFound</a> to figure this out!</p>

<p>Let’s define a custom error type <code>EmailNotExistsError</code> and return it if no records found.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="comment">// user/find.go</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="keyword">type</span> EmailNotExistsError <span class="keyword">struct</span>{}
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="keyword">func</span> (*EmailNotExistsError) Error() <span class="predefined-type">string</span> {
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  <span class="keyword">return</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">email not exists</span><span class="delimiter">&quot;</span></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>}
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span class="keyword">func</span> FindByEmail(db *gorm.DB, email <span class="predefined-type">string</span>) (*User, <span class="predefined-type">error</span>) {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  <span class="keyword">var</span> user User
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  res := db.Find(&amp;user, &amp;User{Email: email})
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>  <span class="keyword">if</span> res.RecordNotFound() {
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    <span class="keyword">return</span> <span class="predefined-constant">nil</span>, &amp;EmailNotExistsError{}
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>  }
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>  <span class="keyword">return</span> &amp;user, <span class="predefined-constant">nil</span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>}
</pre></div>
</div>
</div>

<p>Now its time to turn our attention to Login handler to wire up the login functionality. </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="comment">// user/login/handler.go</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="comment">// ...</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="keyword">func</span> Login(db *gorm.DB, req *Request) (*Response, <span class="predefined-type">error</span>) {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  user, err := user.FindByEmail(db, req.Email)
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  <span class="keyword">if</span> err != <span class="predefined-constant">nil</span> {
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span class="keyword">return</span> <span class="predefined-constant">nil</span>, err
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  }
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  <span class="comment">// ...</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>}
</pre></div>
</div>
</div>

<p>The next scenario that we need to handle is, compare the password in the request with the password hash. As we need to let the user know in case of password mismatch, let’s create a <code>PasswordMismatchError</code> in the login handler and return it during the mismatch.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="comment">// user/login/handler.go</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="comment">// ...</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="keyword">type</span> PasswordMismatchError <span class="keyword">struct</span>{}
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="keyword">func</span> (e *PasswordMismatchError) Error() <span class="predefined-type">string</span> {
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  <span class="keyword">return</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">password didn't match</span><span class="delimiter">&quot;</span></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>}
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span class="keyword">func</span> Login(db *gorm.DB, req *Request) (*Response, <span class="predefined-type">error</span>) {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  <span class="comment">// ...</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  err = bcrypt.CompareHashAndPassword([]<span class="predefined-type">byte</span>(user.PasswordHash), []<span class="predefined-type">byte</span>(req.Password))
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>  <span class="keyword">if</span> err != <span class="predefined-constant">nil</span> {
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    <span class="keyword">return</span> <span class="predefined-constant">nil</span>, &amp;PasswordMismatchError{}
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>  }
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>  <span class="keyword">return</span> &amp;Response{User: user}, <span class="predefined-constant">nil</span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>}
</pre></div>
</div>
</div>

<p>With this, we are done with login handler implementation. Let’s test drive it!</p>

<h3 id="test-driving-user-login">Test Driving User Login</h3>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="comment">// main.go</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="comment">// ...</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="keyword">func</span> main() {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  <span class="comment">// ...</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  loginUser(db)
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>}
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span class="comment">// ...</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span class="keyword">func</span> loginUser(db *gorm.DB) {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  res, err := login.Login(db, &amp;login.Request{
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    Email: <span class="string"><span class="delimiter">&quot;</span><span class="content">foo@bar.com</span><span class="delimiter">&quot;</span></span>, 
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    Password: <span class="string"><span class="delimiter">&quot;</span><span class="content">foobar</span><span class="delimiter">&quot;</span></span>})
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  <span class="keyword">if</span> err != <span class="predefined-constant">nil</span> {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    <span class="keyword">switch</span> err.(<span class="keyword">type</span>) {
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    <span class="keyword">case</span> *user.EmailNotExistsError:
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>      fmt.Println(<span class="string"><span class="delimiter">&quot;</span><span class="content">Bad Request: </span><span class="delimiter">&quot;</span></span>, err.Error())
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>      <span class="keyword">return</span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    <span class="keyword">case</span> *login.PasswordMismatchError:
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>      fmt.Println(<span class="string"><span class="delimiter">&quot;</span><span class="content">Bad Request: </span><span class="delimiter">&quot;</span></span>, err.Error())
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>      <span class="keyword">return</span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    <span class="keyword">default</span>:
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>      fmt.Println(<span class="string"><span class="delimiter">&quot;</span><span class="content">Internal Server Error: </span><span class="delimiter">&quot;</span></span>, err.Error())
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>      <span class="keyword">return</span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    }
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>  }
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>  fmt.Printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Ok: User '%s' logged in</span><span class="delimiter">&quot;</span></span>, res.User.Username)
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>}
</pre></div>
</div>
</div>

<h2 id="summary">Summary</h2>

<p>In this blog post, we have seen how we can use the create and find function in gorm along with the use case driven approach. The source code can be found in <a href="https://github.com/tamizhvendan/gomidway/tree/part-1">my GitHub repository</a>. </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leveraging interfaces in golang - Part 2]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2017/07/03/leveraging-interfaces-in-golang-part-2/"/>
    <updated>2017-07-03T19:44:33+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2017/07/03/leveraging-interfaces-in-golang-part-2</id>
    <content type="html"><![CDATA[<p>In my previous <a href="/blog/2017/06/24/leveraging-interfaces-in-golang-part-1/">blog post</a>, we have seen how interfaces in golang can help us to come up with a cleaner design. In this blog post, we are going to see an another interesting use case of applying golang’s interfaces in creating adapters!</p>

<h2 id="some-context">Some Context</h2>

<p>In my current project, we are using <a href="https://www.postgresql.org/">Postgres</a> for persisting the application data. To make our life easier, we are using <a href="http://jinzhu.me/gorm/">gorm</a> to talk to Postgres from our golang code. Things were going well and we started rolling out new features without any challenges. One beautiful day, we came across an interesting requirement which gave us a run for the money.   </p>

<p>The requirement is to store and retrieve an array of strings from Postgres!</p>

<p><img class="center" src="/images/igo2/slice-to-array-conversion.png"></p>

<p>It sounds simple on paper but while implementing it we found that it is not straightforward. Let me explain what the challenge was and how we solved it through a <strong>Task list</strong> example</p>

<h2 id="the-database-side">The Database Side</h2>

<p>Let’s assume that we have database <code>mytasks</code> with a table <code>tasks</code> to keep track of the tasks. </p>

<p>The <code>tasks</code> table has the following schema </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="class">CREATE</span> <span class="type">TABLE</span> tasks (
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  id SERIAL <span class="directive">PRIMARY</span> <span class="type">KEY</span>,
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  name <span class="predefined-type">TEXT</span> <span class="keyword">NOT</span> <span class="predefined-constant">NULL</span>,
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  is_completed <span class="predefined-type">BOOL</span> <span class="keyword">NOT</span> <span class="predefined-constant">NULL</span>,
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  tags <span class="predefined-type">VARCHAR</span>(<span class="integer">10</span>)[]
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>)
</pre></div>
</div>
</div>

<p>An important thing to note over here is that each <code>task</code> has an array of <code>tags</code> of type <code>varchar(10)</code>.</p>

<h2 id="the-golang-side">The Golang Side</h2>

<p>The equivalent <a href="http://jinzhu.me/gorm/models.html#model-definition">model definition</a> of the <code>tasks</code> table would look like the following in <em>Golang</em></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="keyword">type</span> Task <span class="keyword">struct</span> {
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  Id          <span class="predefined-type">uint</span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  Name        <span class="predefined-type">string</span>
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  IsCompleted <span class="predefined-type">bool</span>
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  Tags        []<span class="predefined-type">string</span>
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>}
</pre></div>
</div>
</div>

<h2 id="the-challenge">The Challenge</h2>

<p>Everything is set to test drive the task creation. </p>

<p>Let’s see what happens when we try to create a new task!</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="keyword">package</span> main
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="keyword">import</span> (
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  <span class="string"><span class="delimiter">&quot;</span><span class="content">fmt</span><span class="delimiter">&quot;</span></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  <span class="string"><span class="delimiter">&quot;</span><span class="content">github.com/jinzhu/gorm</span><span class="delimiter">&quot;</span></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  _ <span class="string"><span class="delimiter">&quot;</span><span class="content">github.com/jinzhu/gorm/dialects/postgres</span><span class="delimiter">&quot;</span></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>)
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span><span class="keyword">func</span> panicOnError(err <span class="predefined-type">error</span>) {
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  <span class="keyword">if</span> err != <span class="predefined-constant">nil</span> {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    <span class="predefined">panic</span>(err)
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  }
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>}
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span><span class="keyword">func</span> CreateTask(db *gorm.DB, name <span class="predefined-type">string</span>, tags []<span class="predefined-type">string</span>) (<span class="predefined-type">uint</span>, <span class="predefined-type">error</span>) {
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>  newTask := &amp;Task{Name: name, Tags: tags}
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>  result := db.Create(newTask)
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>  <span class="keyword">if</span> result.Error != <span class="predefined-constant">nil</span> {
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    <span class="keyword">return</span> <span class="integer">0</span>, result.Error
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>  }
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>  <span class="keyword">return</span> newTask.Id, <span class="predefined-constant">nil</span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>}
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span><span class="keyword">func</span> main() {
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>  db, err := gorm.Open(<span class="string"><span class="delimiter">&quot;</span><span class="content">postgres</span><span class="delimiter">&quot;</span></span>,
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>    <span class="shell"><span class="delimiter">`</span><span class="content">host=localhost </span></span>
<span class="line-numbers"><a href="#n27" name="n27">27</a></span><span class="shell"><span class="content">      user=postgres password=test</span></span>
<span class="line-numbers"><a href="#n28" name="n28">28</a></span><span class="shell"><span class="content">      dbname=mytasks </span></span>
<span class="line-numbers"><a href="#n29" name="n29">29</a></span><span class="shell"><span class="content">      sslmode=disable</span><span class="delimiter">`</span></span>)
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>  panicOnError(err)
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>  <span class="keyword">defer</span> db.Close()
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>  id, err := CreateTask(db, <span class="string"><span class="delimiter">&quot;</span><span class="content">test 123</span><span class="delimiter">&quot;</span></span>, []<span class="predefined-type">string</span>{<span class="string"><span class="delimiter">&quot;</span><span class="content">personal</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">test</span><span class="delimiter">&quot;</span></span>})
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>  panicOnError(err)
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>  fmt.Printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Task %d has been created</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, id)
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>}
</pre></div>
</div>
</div>

<p>When we run this program, it will panic with the following error message </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>panic: sql: converting Exec argument $3 type: unsupported type []string, a slice of string
</pre></div>
</div>
</div>

<p>As the error message says, the SQL driver doesn’t support <code>[]string</code>. From <a href="https://golang.org/pkg/database/sql/driver/#Value">the documentation</a>, we can found that the <em>SQL drivers</em> only support the following values</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>int64
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>float64
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>bool
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>[]byte
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>string
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>time.Time
</pre></div>
</div>
</div>

<p>So, we can’t persist the <code>task</code> with the <code>tags</code> using this approach. </p>

<h2 id="golangs-interface-in-action">Golang’s interface in Action</h2>

<p>As a first step towards the solution, let’s see how the plain SQL <code>insert</code> query provides the value for arrays in <em>Postgres</em></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="class">INSERT</span> <span class="class">INTO</span> tasks(name,is_completed,tags) <span class="keyword">VALUES</span>(<span class="string"><span class="delimiter">'</span><span class="content">buy milk</span><span class="delimiter">'</span></span>,<span class="predefined-constant">false</span>,<span class="string"><span class="delimiter">'</span><span class="content">{&quot;home&quot;,&quot;delegate&quot;}</span><span class="delimiter">'</span></span>);
</pre></div>
</div>
</div>

<p>The clue here is the plain SQL expects the value for array as a string with the following format</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>'{ val1 delim val2 delim ... }'
</pre></div>
</div>
</div>

<blockquote>
  <p>double quotes around element values if they are empty strings, contain curly braces, delimiter characters, double quotes, backslashes, or white space, or match the word NULL. Double quotes and backslashes embedded in element values will be backslash-escaped. - <a href="https://www.postgresql.org/docs/9.6/static/arrays.html">Postgres Documentation</a></p>
</blockquote>

<p>That’s great! All we need to do is convert the <code>[]string</code> to <code>string</code> which follows the format specified above. </p>

<p>An easier approach would be changing the <code>Tags</code> field of the <code>Task</code> <strong>struct</strong> to <code>string</code> and do this conversion somewhere in the application code before persisting the task. </p>

<p>But it’s not a cleaner approach as the resulting code is not semantically correct!</p>

<p>Golang provides a neat solution to this problem through the <a href="https://golang.org/pkg/database/sql/driver/#Valuer">Valuer</a> interface</p>

<blockquote>
  <p>Types implementing Valuer interface are able to convert themselves to a driver Value.</p>
</blockquote>

<p>That is we need to have a type representing the <code>[]string</code> type and implement this interface to do the type conversion. </p>

<p>Like we did in the <a href="/blog/2017/06/24/leveraging-interfaces-in-golang-part-1/">part-1</a> of this series, let’s make use of <a href="https://golang.org/ref/spec#Type_identity">named types</a> by creating a new type called <code>StringSlice</code></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="keyword">type</span> StringSlice []<span class="predefined-type">string</span>
</pre></div>
</div>
</div>

<p>Then we need to do the type conversion in the <code>Value</code> method</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="keyword">func</span> (stringSlice StringSlice) Value() (driver.Value, <span class="predefined-type">error</span>) {
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  <span class="keyword">var</span> quotedStrings []<span class="predefined-type">string</span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  <span class="keyword">for</span> _, str := <span class="keyword">range</span> stringSlice {
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    quotedStrings = <span class="predefined">append</span>(quotedStrings, strconv.Quote(str))
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  }
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>  value := fmt.Sprintf(<span class="string"><span class="delimiter">&quot;</span><span class="content">{ %s }</span><span class="delimiter">&quot;</span></span>, strings.Join(quotedStrings, <span class="string"><span class="delimiter">&quot;</span><span class="content">,</span><span class="delimiter">&quot;</span></span>))
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>  <span class="keyword">return</span> value, <span class="predefined-constant">nil</span>
<span class="line-numbers"><a href="#n8" name="n8">8</a></span>}
</pre></div>
</div>
</div>

<p>Great! </p>

<p>With this new type in place, we can change the datatype of <code>Tags</code> field from <code>[]string</code> to <code>StringSlice</code> in the <code>Task</code> struct. </p>

<p>If we rerun the program, it will work as expected!!</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>Task 1 has been created
</pre></div>
</div>
</div>

<h2 id="filter-by-tag">Filter by tag</h2>

<p>Let’s move to the query side of the problem. </p>

<p>We would like to get a list of tasks associated with a particular tag. </p>

<p>It’d be a straightforward function that uses the <a href="http://jinzhu.me/gorm/crud.html#query">find method</a> in gorm.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="keyword">func</span> GetTasksByTag(db *gorm.DB, tag <span class="predefined-type">string</span>) ([]Task, <span class="predefined-type">error</span>) {
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  tasks := []Task{}
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  result := db.Find(&amp;tasks, <span class="string"><span class="delimiter">&quot;</span><span class="content">? = any(tags)</span><span class="delimiter">&quot;</span></span>, tag)
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  <span class="keyword">if</span> result.Error != <span class="predefined-constant">nil</span> {
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>    <span class="keyword">return</span> <span class="predefined-constant">nil</span>, result.Error
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>  }
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>  <span class="keyword">return</span> tasks, <span class="predefined-constant">nil</span>
<span class="line-numbers"><a href="#n8" name="n8">8</a></span>}
</pre></div>
</div>
</div>

<p>Then we need to call it from our main function </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="comment">// ...</span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span><span class="keyword">func</span> main() {
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  <span class="comment">// ...</span>
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  tasks, err := GetTasksByTag(db, <span class="string"><span class="delimiter">&quot;</span><span class="content">project-x</span><span class="delimiter">&quot;</span></span>)
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  panicOnError(err)
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>  fmt.Println(tasks)
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>}
</pre></div>
</div>
</div>

<p>Unfortunately, if we run the program, it will panic with the following error message</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>panic: sql: Scan error on column index 3: unsupported Scan, storing driver.Value type []uint8 into 
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>type *main.StringSlice; sql: Scan error on column index 3: unsupported Scan, 
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>storing driver.Value type []uint8 into type *main.StringSlice
</pre></div>
</div>
</div>

<p>As the error message says, the SQL driver unable to scan (unmarshal) the data type byte slice (<code>[]uint8</code>) into our custom type <code>StringSlice</code>. </p>

<p>To fix this, we need to provide a mechanism to convert <code>[]uint8</code> to <code>StringSlice</code> which in turn will be used by the SQL driver while scanning. </p>

<p>Like the <code>Valuer</code> interface, <em>Golang</em> provides <a href="https://golang.org/pkg/database/sql/#Scanner">Scanner</a> interface to do the data type conversion while scanning. </p>

<p>The signature of the <em>Scanner</em> interface returns an error and not the converted value. </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="keyword">type</span> Scanner <span class="keyword">interface</span> {  
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  Scan(src <span class="keyword">interface</span>{}) <span class="predefined-type">error</span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>}
</pre></div>
</div>
</div>
<p>So, it implies the implementor of this interface should have a pointer receiver (<code>*StringSlice</code>) which will mutate its value upon successful conversion.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="keyword">func</span> (stringSlice *StringSlice) Scan(src <span class="keyword">interface</span>{}) <span class="predefined-type">error</span> { 
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  <span class="comment">// ...</span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>}
</pre></div>
</div>
</div>

<p>In the implementation of this interface, we just need to convert the byte slice into a string slice by converting it to a <code>string</code> (Postgres representation of array value) first, and then to <code>StringSlice</code></p>

<pre><code>[]uint8 --&gt; {home,delegate} --&gt; []string{"home", "delegate"} 
</code></pre>

<p>After successful conversion, we need to assign the converted value to the receiver (<code>*stringSlice</code>)</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="keyword">func</span> (stringSlice *StringSlice) Scan(src <span class="keyword">interface</span>{}) <span class="predefined-type">error</span> { 
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  val, ok := src.([]<span class="predefined-type">byte</span>)
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  <span class="keyword">if</span> !ok {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    <span class="keyword">return</span> fmt.Errorf(<span class="string"><span class="delimiter">&quot;</span><span class="content">unable to scan</span><span class="delimiter">&quot;</span></span>)
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  }
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  value := strings.TrimPrefix(<span class="predefined-type">string</span>(val), <span class="string"><span class="delimiter">&quot;</span><span class="content">{</span><span class="delimiter">&quot;</span></span>)
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  value = strings.TrimSuffix(value, <span class="string"><span class="delimiter">&quot;</span><span class="content">}</span><span class="delimiter">&quot;</span></span>)
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  *stringSlice = strings.Split(value, <span class="string"><span class="delimiter">&quot;</span><span class="content">,</span><span class="delimiter">&quot;</span></span>)
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>  <span class="keyword">return</span> <span class="predefined-constant">nil</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>}
</pre></div>
</div>
</div>

<p>That’s it. If we run the program now, we can see the output as expected. </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>[{2 schedule meeting with the team false [project-x]} 
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  {3 prepare for client demo false [slides project-x]}]
</pre></div>
</div>
</div>

<h2 id="summary">Summary</h2>

<p>In this blog post, we have seen how we can make use of <code>Valuer</code> and <code>Scanner</code> interfaces in golang to marshal and unmarshal our custom data type from the database. </p>

<p>The source code can be found in <a href="https://github.com/tamizhvendan/igo2">my GitHub repository</a></p>
]]></content>
  </entry>
  
</feed>
