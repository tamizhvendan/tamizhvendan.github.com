<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: golang | P3 Programmer]]></title>
  <link href="http://blog.tamizhvendan.in/blog/categories/golang/atom.xml" rel="self"/>
  <link href="http://blog.tamizhvendan.in/"/>
  <updated>2017-07-28T08:29:53+05:30</updated>
  <id>http://blog.tamizhvendan.in/</id>
  <author>
    <name><![CDATA[Tamizhvendan S]]></name>
    <email><![CDATA[tamizh88@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Managing Data in Golang Using Gorm - Part 2]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2017/07/26/managing-data-in-golang-using-gorm-part-2/"/>
    <updated>2017-07-26T07:09:17+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2017/07/26/managing-data-in-golang-using-gorm-part-2</id>
    <content type="html"><![CDATA[<p>In my previous <a href="/blog/2017/07/23/managing-data-in-golang-using-gorm-part-1/">blog post</a>, we have seen how to use the create and find function in gorm along with use-case driven approach. In this blog post, we will be extending our blogging platform <strong>gomidway</strong> by implementing an another interesting use case. </p>

<h2 id="use-case-3---publishing-a-new-blog-post">Use Case #3 - Publishing a new blog post</h2>

<p>Publishing a new blog post use case involves the following</p>

<ul>
  <li>
    <p>A user can publish a new blog post by providing a title, body of the post and a set of tags.</p>
  </li>
  <li>
    <p>If the title already exists we need to let the user know about it.</p>
  </li>
  <li>
    <p>We also need to let him know if publish went well. </p>
  </li>
</ul>

<p>Though the requirement looks simple on paper, there are some complexities regarding organizing the code and orchestrating the entire operation. </p>

<p>Let’s dig up and see how we can solve it!</p>

<h2 id="the-database-schema">The Database Schema</h2>

<p>As a first step, let’s add some new tables to our existing schema which has only the <code>users</code> table.</p>

<p>The first one is the <code>posts</code> table</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="class">CREATE</span> <span class="type">TABLE</span> posts(
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  id SERIAL <span class="directive">PRIMARY</span> <span class="type">KEY</span>,
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  title <span class="predefined-type">VARCHAR</span>(<span class="integer">50</span>) <span class="directive">UNIQUE</span> <span class="keyword">NOT</span> <span class="predefined-constant">NULL</span>,
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  body <span class="predefined-type">TEXT</span> <span class="keyword">NOT</span> <span class="predefined-constant">NULL</span>,
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  published_at <span class="predefined-type">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="predefined-constant">NULL</span>,
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>  author_id <span class="predefined-type">INTEGER</span> <span class="keyword">NOT</span> <span class="predefined-constant">NULL</span> <span class="keyword">REFERENCES</span> users(id)
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>);
</pre></div>
</div>
</div>

<p>Then we need to have an another table for <code>tags</code></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="class">CREATE</span> <span class="type">TABLE</span> tags(
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  id SERIAL <span class="directive">PRIMARY</span> <span class="type">KEY</span>,
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  name <span class="predefined-type">VARCHAR</span>(<span class="integer">50</span>) <span class="keyword">NOT</span> <span class="predefined-constant">NULL</span>
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>);
</pre></div>
</div>
</div>

<p>And finally, a bridge table to associate <code>posts</code> and <code>tags</code></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="class">CREATE</span> <span class="type">TABLE</span> posts_tags(
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  tag_id <span class="predefined-type">INTEGER</span> <span class="keyword">REFERENCES</span> tags(id),
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  post_id <span class="predefined-type">INTEGER</span> <span class="keyword">REFERENCES</span> posts(id)
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>);
</pre></div>
</div>
</div>

<p><em>Note: a blog post can have multiple tags, and a tag can have multiple blog posts associated with it</em></p>

<h2 id="model-definitions---post-and-tag">Model Definitions - Post and Tag</h2>

<p>The next step is defining equivalent models for <code>Post</code> and <code>Tag</code> in golang. </p>

<p>Let’s create a new folder called <code>tag</code> and define the <code>Tag</code> model.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="comment">// tag/model.go</span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span><span class="keyword">package</span> tag
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>
<span class="line-numbers"><a href="#n4" name="n4">4</a></span><span class="keyword">type</span> Tag <span class="keyword">struct</span> {
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  ID   <span class="predefined-type">uint</span>
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>  Name <span class="predefined-type">string</span>
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>}
</pre></div>
</div>
</div>

<p>Then define the <code>Post</code> model in an another new folder <code>post</code></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="comment">// post/model.go</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="keyword">package</span> post
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="keyword">import</span> (
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  <span class="string"><span class="delimiter">&quot;</span><span class="content">time</span><span class="delimiter">&quot;</span></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  <span class="string"><span class="delimiter">&quot;</span><span class="content">github.com/tamizhvendan/gomidway/tag</span><span class="delimiter">&quot;</span></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>)
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span class="keyword">const</span> (
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>  UniqueConstraintTitle = <span class="string"><span class="delimiter">&quot;</span><span class="content">posts_title_key</span><span class="delimiter">&quot;</span></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>)
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span><span class="keyword">type</span> Post <span class="keyword">struct</span> {
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>  ID          <span class="predefined-type">uint</span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>  Title       <span class="predefined-type">string</span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>  Body        <span class="predefined-type">string</span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>  AuthorID    <span class="predefined-type">uint</span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>  Tags        []tag.Tag <span class="shell"><span class="delimiter">`</span><span class="content">gorm:&quot;many2many:posts_tags;&quot;</span><span class="delimiter">`</span></span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>  PublishedAt time.Time
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>}
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span><span class="keyword">type</span> TitleDuplicateError <span class="keyword">struct</span>{}
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>
<span class="line-numbers"><a href="#n25" name="n25">25</a></span><span class="keyword">func</span> (e *TitleDuplicateError) Error() <span class="predefined-type">string</span> {
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>  <span class="keyword">return</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">title already exists</span><span class="delimiter">&quot;</span></span>
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>}
</pre></div>
</div>
</div>

<p>As we have seen in <a href="https://github.com/tamizhvendan/gomidway/blob/part-1/user/create.go#L11-#L16">the previous blog post</a>, the constant <code>UniqueConstraintTitle</code> and the <code>TitleDuplicateError</code> are required for doing unique constraint violation error check on the <code>title</code> column and to communicate it to the application respectively. </p>

<p>The important thing to notice in this model definition is the <code>Tags</code> field</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="keyword">type</span> Post <span class="keyword">struct</span> {
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  <span class="comment">// ...</span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  Tags        []tag.Tag <span class="shell"><span class="delimiter">`</span><span class="content">gorm:&quot;many2many:posts_tags;&quot;</span><span class="delimiter">`</span></span>
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  <span class="comment">// ..</span>
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>}
</pre></div>
</div>
</div>

<p>The <code>Tags</code> field has a <a href="https://golang.org/ref/spec#Tag">golang struct tag</a> <code>gorm</code> defining the association type <code>many2many</code> and the name of the bridge table <code>posts_tags</code>.</p>

<h2 id="implementing-new-blog-post-use-case">Implementing new blog post use case</h2>

<p>Now we have all the models required to enable publishing a new blog post, and it’s time to have to go at its implementation.</p>

<p>Let’s start by creating a new folder <code>publish</code> under <code>post</code> and add the scaffolding for the handler </p>

<p><em>As we have seen earlier, the folder structure represent the use case, and the handler orchestrate the use case</em></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="comment">// post/publish/handler.go</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="keyword">package</span> publish
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="keyword">import</span> (
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  <span class="string"><span class="delimiter">&quot;</span><span class="content">github.com/jinzhu/gorm</span><span class="delimiter">&quot;</span></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>)
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span class="keyword">type</span> Request <span class="keyword">struct</span> {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  Title    <span class="predefined-type">string</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  Body     <span class="predefined-type">string</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>  AuthorID <span class="predefined-type">uint</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  Tags     []<span class="predefined-type">string</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>}
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span><span class="keyword">type</span> Response <span class="keyword">struct</span> {
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>  PostId <span class="predefined-type">uint</span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>}
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span><span class="keyword">func</span> NewPost(db *gorm.DB, req *Request) (*Response, <span class="predefined-type">error</span>) { 
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>  <span class="comment">// TODO</span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>}
</pre></div>
</div>
</div>

<p>The implementation of publishing a new post involves the following steps</p>

<ol>
  <li>
    <p>For all the <code>Tags</code> that are part of the request, we need to create an entry in the <code>tags</code> table. If it is already there, we don’t need to create.</p>
  </li>
  <li>
    <p>The next step is creating a new entry in the <code>posts</code> table with the given details. </p>
  </li>
  <li>
    <p>Finally, we need to associate the <code>Tags</code> with the newly created <code>Post</code> via the bridge table. </p>
  </li>
</ol>

<p>Since it involves multiple inserts on the database side, all the three steps should happen inside a transaction.</p>

<p><em>The first two steps can be executed in any order as they are independent of each other</em></p>

<h3 id="code-organization-aka-responsibility-separation">Code Organization (aka Responsibility Separation)</h3>

<p>We discussed a little bit about code organization in the <a href="/blog/2017/07/23/managing-data-in-golang-using-gorm-part-1/">last blog post</a>. One important thing which can help us, in the long run is having proper separation of concern in the code base. </p>

<p>There are multiple ways we can separate the concern. In our case, we are organizing by use cases with <code>handler</code> driving the implementation. The handler may access the <code>data</code> layer if the use case requires. </p>

<p>To keep things simple, we are not discussing dependency injection in <code>handler</code> and <code>data</code> layer interaction here. I am planning to cover this in my future blog posts.</p>

<p>Back to our business, the data access logic of the three steps will be in their respective packages and the <code>publish</code> handler coordinate the entire use case logic. </p>

<p><img class="center" src="/images/gomidway/part2/code_org.png"></p>

<h4 id="step-1-create-a-tag-if-not-exists">Step 1: Create a Tag if not exists</h4>

<p>The first step is creating a tag if it is not there in the database. For the both new tags and the existing tags we need to get its <code>id</code> from the database to associate it with the <code>posts</code>.</p>

<p>Gorm has a method called <a href="https://godoc.org/github.com/jinzhu/gorm#DB.FirstOrCreate">FirstOrCreate</a> to help us to implement this step. </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="comment">// tag/create.go</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="keyword">package</span> tag
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="keyword">import</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">github.com/jinzhu/gorm</span><span class="delimiter">&quot;</span></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span><span class="keyword">func</span> CreateIfNotExists(db *gorm.DB, tagName <span class="predefined-type">string</span>) (*Tag, <span class="predefined-type">error</span>) {
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  <span class="keyword">var</span> tag Tag
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  res := db.FirstOrCreate(&amp;tag, Tag{Name: tagName})
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  <span class="keyword">if</span> res.Error != <span class="predefined-constant">nil</span> {
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    <span class="keyword">return</span> <span class="predefined-constant">nil</span>, res.Error
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>  }
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  <span class="keyword">return</span> &amp;tag, <span class="predefined-constant">nil</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>}
</pre></div>
</div>
</div>

<p>The <em>FirstOrCreate</em> method populates the <code>Id</code> field of the tag.</p>

<h4 id="step-2-creating-a-new-post">Step 2: Creating a new Post</h4>

<p>It is similar to creating a new user that we saw in the last blog post</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="comment">// post/create.go</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="keyword">package</span> post
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="keyword">import</span> (
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  <span class="string"><span class="delimiter">&quot;</span><span class="content">github.com/jinzhu/gorm</span><span class="delimiter">&quot;</span></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  <span class="string"><span class="delimiter">&quot;</span><span class="content">github.com/tamizhvendan/gomidway/postgres</span><span class="delimiter">&quot;</span></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>)
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span><span class="keyword">func</span> Create(db *gorm.DB, post *Post) (<span class="predefined-type">uint</span>, <span class="predefined-type">error</span>) {
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  res := db.Create(post)
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>  <span class="keyword">if</span> res.Error != <span class="predefined-constant">nil</span> {
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    <span class="keyword">if</span> postgres.IsUniqueConstraintError(res.Error, UniqueConstraintTitle) {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>      <span class="keyword">return</span> <span class="integer">0</span>, &amp;TitleDuplicateError{}
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    }
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    <span class="keyword">return</span> <span class="integer">0</span>, res.Error
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>  }
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>  <span class="keyword">return</span> post.ID, <span class="predefined-constant">nil</span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>}
</pre></div>
</div>
</div>

<h4 id="step-3-associating-tag-with-post">Step 3: Associating Tag with Post</h4>

<p>The final step is associating the tag with the post in the database. Gorm has a decent support for <a href="http://jinzhu.me/gorm/associations.html">Associations</a>. The one that we needed from gorm to carry out the current step is its <a href="https://godoc.org/github.com/jinzhu/gorm#Association.Append">Append</a> method.</p>

<p>Let’s define a <code>constant</code> in <code>Post</code> model which holds the AssociationTag</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="comment">// post/model.go</span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span><span class="comment">// ...</span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span><span class="keyword">const</span> (
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  <span class="comment">// ...</span>
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  AssociationTags = <span class="string"><span class="delimiter">&quot;</span><span class="content">Tags</span><span class="delimiter">&quot;</span></span>
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>)
<span class="line-numbers"><a href="#n7" name="n7">7</a></span><span class="comment">// ...</span>
</pre></div>
</div>
</div>

<p>Then add a new file <em>tag.go</em> in the <em>post</em> folder and implement the third step as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="comment">// post/tag.go</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="keyword">package</span> post
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="keyword">import</span> (
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    <span class="string"><span class="delimiter">&quot;</span><span class="content">github.com/jinzhu/gorm</span><span class="delimiter">&quot;</span></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span class="string"><span class="delimiter">&quot;</span><span class="content">github.com/tamizhvendan/gomidway/tag</span><span class="delimiter">&quot;</span></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>)
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span><span class="keyword">func</span> AddTag(db *gorm.DB, post *Post, tag *tag.Tag) <span class="predefined-type">error</span> {
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  res := db.Model(post).Association(AssociationTags).Append(tag)
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>  <span class="keyword">return</span> res.Error
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>}
</pre></div>
</div>
</div>

<h3 id="publishing-new-blog-post">Publishing New Blog Post</h3>

<p>Now we have all the individual database layer functions ready for all the three steps, and it’s time to focus on the implementation of publishing a new blog post.</p>

<p>We already have the scaffolding in place</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="comment">// publish/handler.go</span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span><span class="comment">// ...</span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span><span class="keyword">func</span> NewPost(db *gorm.DB, req *Request) (*Response, <span class="predefined-type">error</span>) { 
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  <span class="comment">// TODO</span>
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>}
</pre></div>
</div>
</div>

<p>As a first step, let’s begin a new transaction using gorm’s <a href="https://godoc.org/github.com/jinzhu/gorm#DB.Begin">Begin</a> method. </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="keyword">func</span> NewPost(db *gorm.DB, req *Request) (*Response, <span class="predefined-type">error</span>) { 
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  tx := db.Begin()
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  <span class="keyword">if</span> tx.Error != <span class="predefined-constant">nil</span> {
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    <span class="keyword">return</span> <span class="predefined-constant">nil</span>, tx.Error
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  }
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>  <span class="comment">// TODO</span>
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>}
</pre></div>
</div>
</div>

<p>Then call the <code>Create</code> function in <code>post</code> package to create a new blog post</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="keyword">func</span> NewPost(db *gorm.DB, req *Request) (*Response, <span class="predefined-type">error</span>) { 
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  <span class="comment">// ...</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  newPost := &amp;post.Post{
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    AuthorID:    req.AuthorId,
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    Title:       req.Title,
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    Body:        req.Body,
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    PublishedAt: time.Now().UTC(),
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  }
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  _, err := post.Create(tx, newPost)
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  <span class="keyword">if</span> err != <span class="predefined-constant">nil</span> {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    <span class="keyword">return</span> <span class="predefined-constant">nil</span>, err
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  }
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>  <span class="comment">// TODO</span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>}
</pre></div>
</div>
</div>

<p>Then for all the tags in the request, call the <code>CreateIfNotExists</code> function in <code>tag</code> package to get its respective <em>Ids</em> and associate it with the newly created post using the <code>AddTag</code> function in the <code>post</code> package.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="keyword">func</span> NewPost(db *gorm.DB, req *Request) (*Response, <span class="predefined-type">error</span>) { 
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  <span class="comment">// ...</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  <span class="keyword">for</span> _, tagName := <span class="keyword">range</span> req.Tags {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    t, err := tag.CreateIfNotExists(tx, tagName)
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    <span class="keyword">if</span> err != <span class="predefined-constant">nil</span> {
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>      tx.Rollback()
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>      <span class="keyword">return</span> <span class="predefined-constant">nil</span>, err
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    }
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    err = post.AddTag(tx, newPost, t)
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    <span class="keyword">if</span> err != <span class="predefined-constant">nil</span> {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>      tx.Rollback()
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>      <span class="keyword">return</span> <span class="predefined-constant">nil</span>, err
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    }
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>  }
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>  <span class="comment">// TODO</span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>}
</pre></div>
</div>
</div>

<p>A thing to note here is we are rolling back the transaction using the <a href="https://godoc.org/github.com/jinzhu/gorm#DB.Rollback">RollBack</a> method in case of error. </p>

<p>The final step is committing the transaction and returning the newly created post id as response</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="keyword">func</span> NewPost(db *gorm.DB, req *Request) (*Response, <span class="predefined-type">error</span>) { 
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  <span class="comment">// ...</span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  res := tx.Commit()
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  <span class="keyword">if</span> res.Error != <span class="predefined-constant">nil</span> {
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>    <span class="keyword">return</span> <span class="predefined-constant">nil</span>, res.Error
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>  }
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>  <span class="keyword">return</span> &amp;Response{PostId: newPost.ID}, <span class="predefined-constant">nil</span>
<span class="line-numbers"><a href="#n8" name="n8">8</a></span>}
</pre></div>
</div>
</div>

<h3 id="test-driving-publish-new-blog-post">Test Driving Publish New Blog Post</h3>

<p>Let’s test drive our implementation from the <code>main</code> function with some hard coded value</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="comment">// main.go</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="keyword">package</span> main
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="keyword">import</span> (
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  <span class="comment">// ...</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  <span class="string"><span class="delimiter">&quot;</span><span class="content">github.com/tamizhvendan/gomidway/post</span><span class="delimiter">&quot;</span></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  <span class="string"><span class="delimiter">&quot;</span><span class="content">github.com/tamizhvendan/gomidway/post/publish</span><span class="delimiter">&quot;</span></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>)
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span><span class="comment">// ...</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span class="keyword">func</span> main() {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>  <span class="comment">// ...</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  publishPost(db)
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>}
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span><span class="keyword">func</span> publishPost(db *gorm.DB) {
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>  res, err := publish.NewPost(db, &amp;publish.Request{
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    AuthorId: <span class="integer">1</span>,
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    Body:     <span class="string"><span class="delimiter">&quot;</span><span class="content">Golang rocks!</span><span class="delimiter">&quot;</span></span>,
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    Title:    <span class="string"><span class="delimiter">&quot;</span><span class="content">My first gomidway post</span><span class="delimiter">&quot;</span></span>,
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    Tags:     []<span class="predefined-type">string</span>{<span class="string"><span class="delimiter">&quot;</span><span class="content">intro</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">golang</span><span class="delimiter">&quot;</span></span>},
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>  })
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>  <span class="keyword">if</span> err != <span class="predefined-constant">nil</span> {
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>    <span class="keyword">if</span> _, ok := err.(*post.TitleDuplicateError); ok {
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>      fmt.Println(<span class="string"><span class="delimiter">&quot;</span><span class="content">Bad Request: </span><span class="delimiter">&quot;</span></span>, err.Error())
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>      <span class="keyword">return</span>
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>    }
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>    fmt.Println(<span class="string"><span class="delimiter">&quot;</span><span class="content">Internal Server Error: </span><span class="delimiter">&quot;</span></span>, err.Error())
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>    <span class="keyword">return</span>
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>  }
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>  fmt.Println(<span class="string"><span class="delimiter">&quot;</span><span class="content">Created: </span><span class="delimiter">&quot;</span></span>, res.PostId)
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>}
</pre></div>
</div>
</div>

<p>if we run the program with these hard coded values, we will get the following output</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>Created: 1
</pre></div>
</div>
</div>

<p>if we rerun the program without changing anything, we will get the bad request error as expected</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>Bad Request: title already exists
</pre></div>
</div>
</div>

<h2 id="summary">Summary</h2>

<p>In this blog post, we have seen how to perform, create operation of a model having many to many relationship using gorm. The source code is available in my <a href="https://github.com/tamizhvendan/gomidway/tree/part-2">GitHub repository</a>. </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Data in golang using gorm - Part 1]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2017/07/23/managing-data-in-golang-using-gorm-part-1/"/>
    <updated>2017-07-23T07:55:59+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2017/07/23/managing-data-in-golang-using-gorm-part-1</id>
    <content type="html"><![CDATA[<p><a href="www.ajira.tech">We</a> have been using <a href="jinzhu.me/gorm/">gorm</a> as a primary tool to interact with <a href="https://www.PostgreSQL.org">PostgreSQL</a> from <a href="https://golang.org">golang</a> for almost a year now. </p>

<p>Gorm does an excellent job as an <a href="https://en.wikipedia.org/wiki/Object-relational_mapping">ORM</a> library, and we enjoyed using it in our projects. </p>

<p>Through this blog post series, I will be sharing our experiences on how we leveraged gorm to solve our client’s needs.</p>

<h2 id="the-domain">The Domain</h2>

<p>In this blog post series, we will be implementing the data persistence side of a blogging platform similar to <a href="https://medium.com">medium</a>, called <strong>gomidway</strong>.  </p>

<h2 id="part-1-introduction">Part-1 Introduction</h2>

<p>In this blog post, we will be working on defining the backend for signing up a new user and providing a provision for user login.</p>

<h2 id="the-user-model">The User Model</h2>

<p>Let’s start our modeling from the User table. </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="class">CREATE</span> <span class="type">TABLE</span> users(
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  id SERIAL <span class="directive">PRIMARY</span> <span class="type">KEY</span>,
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  username <span class="predefined-type">VARCHAR</span>(<span class="integer">50</span>) <span class="directive">UNIQUE</span> <span class="keyword">NOT</span> <span class="predefined-constant">NULL</span>,
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  email <span class="predefined-type">VARCHAR</span>(<span class="integer">255</span>) <span class="directive">UNIQUE</span> <span class="keyword">NOT</span> <span class="predefined-constant">NULL</span>,
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  password_hash <span class="predefined-type">TEXT</span> <span class="keyword">NOT</span> <span class="predefined-constant">NULL</span>
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>);
</pre></div>
</div>
</div>

<p>Then define an equivalent model in golang.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="keyword">type</span> User <span class="keyword">struct</span> {
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  ID           <span class="predefined-type">uint</span> <span class="shell"><span class="delimiter">`</span><span class="content">gorm:&quot;primary_key&quot;</span><span class="delimiter">`</span></span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  Username     <span class="predefined-type">string</span>
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  Email        <span class="predefined-type">string</span>
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  PasswordHash <span class="predefined-type">string</span>
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>}
</pre></div>
</div>
</div>

<p>Before taking the next steps, let me spend some time on explaining where to put this <code>User</code> <em>struct</em></p>

<h3 id="the-folder-structure">The Folder Structure</h3>

<p>There are two common ways to organize the models in golang. </p>

<p>One approach is defining a folder called <code>models</code> and put all the models here</p>

<p><img class="center" src="/images/gomidway/part1/models.png"></p>

<p>The another approach is an invert of this structure. In this design, we will have a separate folder for each model. </p>

<p><img class="center" src="/images/gomidway/part1/domain.png"></p>

<p>Both the approaches have pros and cons. Choosing one over the other is entirely opinionated, and my preference is the second one.</p>

<p>IMHO, the folder structure has <a href="https://8thlight.com/blog/uncle-bob/2011/09/30/Screaming-Architecture.html">to represent the domain</a> and the code associated a domain model should coexist with proper separation of concern. </p>

<p><img class="center" src="/images/gomidway/part1/folder_structure.png"></p>

<blockquote>
  <p>Software architectures are structures that support the use cases of the system - <a href="https://www.amazon.com/Object-Oriented-Software-Engineering-Driven-Approach/dp/0201403471">Ivar Jacobson</a></p>
</blockquote>

<p>In this gorm blog post series, I will be following the <code>domain</code> based folder structure. </p>

<h2 id="use-case-1---user-signup">Use Case #1 - User Signup</h2>

<p>The Signup use case of a user is defined as </p>

<ul>
  <li>A user should sign up himself by providing his email, username, and password</li>
  <li>If the username or the email already exists, we need to let him now </li>
  <li>We also need to let him know if there is any error while persisting his signup details</li>
  <li>If signup succeeds, he should be getting a unique identifier in the system</li>
</ul>

<p>To keep things simple and the focus of this series is on the data persistence side, we are not going to discuss/implement the HTTP portion of the application. Instead, we will be driving our implementation with some hard code values during the application bootstrap. </p>

<h3 id="defining-the-signup-handler">Defining the Signup handler</h3>

<p>Like many terms in software engineering, the term <strong>handler</strong> has different meanings. So, let me start by explaining what I mean by a handler here. </p>

<p>A handler is a function that represents an use-case. It takes its dependency(ies) and its input(s) as parameters and returns the outcome of the use case. </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="comment">// user/signup/handler.go</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="keyword">package</span> signup
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="keyword">type</span> Request <span class="keyword">struct</span> {
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  Username <span class="predefined-type">string</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  Email    <span class="predefined-type">string</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  Password <span class="predefined-type">string</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>}
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span class="keyword">type</span> Response <span class="keyword">struct</span> {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>  Id <span class="predefined-type">uint</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>}
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span><span class="keyword">func</span> Signup(db *gorm.DB, req *Request) (*Response, <span class="predefined-type">error</span>) { 
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>  <span class="comment">// ...</span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>}
</pre></div>
</div>
</div>

<p>One important thing to notice here is, the <code>Request</code> and the <code>Response</code> are golang structs. How the request is being populated from user’s request (JSON Post / HTML form Post / command from a message queue) and how the response communicated to the user (JSON response / HTML view / event in the message queue) are left up to the application boundary. </p>

<p>In the Signup function, as a first step, we need to create the hash for the password using <a href="https://godoc.org/golang.org/x/crypto/bcrypt">bcrypt</a> and then create the new user. </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="keyword">func</span> Signup(db *gorm.DB, req *Request) (*Response, <span class="predefined-type">error</span>) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  passwordHash, err := bcrypt.GenerateFromPassword([]<span class="predefined-type">byte</span>(req.Password), bcrypt.DefaultCost)
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  <span class="keyword">if</span> err != <span class="predefined-constant">nil</span> {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    <span class="keyword">return</span> <span class="predefined-constant">nil</span>, err
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  }
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  newUser := &amp;user.User{
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    Username:     req.Username,
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    Email:        req.Email,
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    PasswordHash: <span class="predefined-type">string</span>(passwordHash),
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  }
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>  <span class="comment">// ????</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>}
</pre></div>
</div>
</div>

<p>The next step is persisting this newly created user</p>

<h3 id="adding-user-create-function">Adding User Create function</h3>

<p>The create user function is straight forward. We just need to call the <a href="https://godoc.org/github.com/jinzhu/gorm#DB.Create">Create</a> method in gorm</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="comment">// user/create.go</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="keyword">package</span> user
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="keyword">func</span> Create(db *gorm.DB, user *User) (<span class="predefined-type">uint</span>, <span class="predefined-type">error</span>) {
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  err := db.Create(user).Error
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  <span class="keyword">if</span> err != <span class="predefined-constant">nil</span> {
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="keyword">return</span> <span class="integer">0</span>, err
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  }
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  <span class="keyword">return</span> user.ID, <span class="predefined-constant">nil</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>}
</pre></div>
</div>
</div>

<p>But the work is not done yet!</p>

<p>As per our use case, We need to let the handler to know if the username or the email already exists. </p>

<p>We already have unique constraints in place in the <code>users</code> table. </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>gomidway=# \d users
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>                                    Table &quot;public.users&quot;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    Column     |          Type          |                     Modifiers
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>---------------+------------------------+----------------------------------------------------
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span> id            | integer                | not null default nextval('users_id_seq'::regclass)
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span> username      | character varying(50)  | not null
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span> email         | character varying(255) | not null
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span> password_hash | text                   | not null
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>Indexes:
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    &quot;users_pkey&quot; PRIMARY KEY, btree (id)
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    &quot;users_email_key&quot; UNIQUE CONSTRAINT, btree (email)
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    &quot;users_username_key&quot; UNIQUE CONSTRAINT, btree (username)
</pre></div>
</div>
</div>

<p>So, the <code>Create</code> method in gorm would return an error of type <a href="http://godoc.org/github.com/lib/pq#Error">pq Error</a> with the <a href="http://godoc.org/github.com/lib/pq#ErrorCode">ErrorCode</a> as <code>"23505"</code> for <code>unique_violation</code>, and the <code>Constraint</code> field will be having the unique constraint key name <code>users_email_key</code> and <code>users_username_key</code> for email and username duplicate error respectively. </p>

<p>Though this error does communicate what we wanted, it is very generic and what we want is something concrete to our use case. </p>

<p>To make it happen, let’s create a new folder <code>postgres</code> (aka package) and write a utility function <code>IsUniqueConstraintError</code> which checks whether the given error is a unique constraint error or not.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="comment">// postgres/pq.go</span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span><span class="keyword">func</span> IsUniqueConstraintError(err <span class="predefined-type">error</span>, constraintName <span class="predefined-type">string</span>) <span class="predefined-type">bool</span> {
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  <span class="keyword">if</span> pqErr, ok := err.(*pq.Error); ok {
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    <span class="keyword">return</span> pqErr.Code == <span class="string"><span class="delimiter">&quot;</span><span class="content">23505</span><span class="delimiter">&quot;</span></span> &amp;&amp; pqErr.Constraint == constraintName
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  }
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>  <span class="keyword">return</span> <span class="predefined-constant">false</span>
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>}
</pre></div>
</div>
</div>

<p>and then in the <code>model.go</code>, where we have the User model, add the constraint names as constants.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="comment">// user/model.go</span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span><span class="comment">// ...</span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span><span class="keyword">const</span> (
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  UniqueConstraintUsername = <span class="string"><span class="delimiter">&quot;</span><span class="content">users_username_key</span><span class="delimiter">&quot;</span></span>
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  UniqueConstraintEmail    = <span class="string"><span class="delimiter">&quot;</span><span class="content">users_email_key</span><span class="delimiter">&quot;</span></span>
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>)
<span class="line-numbers"><a href="#n7" name="n7">7</a></span><span class="comment">// ...</span>
</pre></div>
</div>
</div>

<p>Finally, define the custom error types</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="comment">// user/model.go</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="comment">// ...</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="keyword">type</span> UsernameDuplicateError <span class="keyword">struct</span> {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  Username <span class="predefined-type">string</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>}
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span class="keyword">func</span> (e *UsernameDuplicateError) Error() <span class="predefined-type">string</span> {
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  <span class="keyword">return</span> fmt.Sprintf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Username '%s' already exists</span><span class="delimiter">&quot;</span></span>, e.Username)
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>}
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span class="keyword">type</span> EmailDuplicateError <span class="keyword">struct</span> {
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  Email <span class="predefined-type">string</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>}
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span><span class="keyword">func</span> (e *EmailDuplicateError) Error() <span class="predefined-type">string</span> {
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>  <span class="keyword">return</span> fmt.Sprintf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Email '%s' already exists</span><span class="delimiter">&quot;</span></span>, e.Email)
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>}
</pre></div>
</div>
</div>

<p>With this new helper function, constants and types in places, we can complete the create user function as follows.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="comment">// user/create.go</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="keyword">func</span> Create(db *gorm.DB, user *User) (<span class="predefined-type">uint</span>, <span class="predefined-type">error</span>) {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  err := db.Create(user).Error
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  <span class="keyword">if</span> err != <span class="predefined-constant">nil</span> {
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    <span class="keyword">if</span> postgres.IsUniqueConstraintError(err, UniqueConstraintUsername) {
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>      <span class="keyword">return</span> <span class="integer">0</span>, &amp;UsernameDuplicateError{Username: user.Username}
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    }
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span class="keyword">if</span> postgres.IsUniqueConstraintError(err, UniqueConstraintEmail) {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>      <span class="keyword">return</span> <span class="integer">0</span>, &amp;EmailDuplicateError{Email: user.Email}
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    }
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    <span class="keyword">return</span> <span class="integer">0</span>, err
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  }
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>  <span class="keyword">return</span> user.ID, <span class="predefined-constant">nil</span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>}
</pre></div>
</div>
</div>

<p>On the handler side, we just pass the outcome of this create function to the outside(application boundary) layer</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="comment">// user/signup/handler.go</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="comment">// ...</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="keyword">func</span> Signup(db *gorm.DB, req *Request) (*Response, <span class="predefined-type">error</span>) {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  <span class="comment">// ...</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  id, err := user.Create(db, newUser)
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  <span class="keyword">if</span> err != <span class="predefined-constant">nil</span> {
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="keyword">return</span> <span class="predefined-constant">nil</span>, err
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  }
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  <span class="keyword">return</span> &amp;Response{Id: id}, err
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>}
</pre></div>
</div>
</div>

<h3 id="test-driving-user-signup">Test Driving User Signup</h3>

<p>As we discussed earlier, let’s test drive the implementation from the application bootstrap. </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="comment">// main.go</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="keyword">func</span> panicOnError(err <span class="predefined-type">error</span>) {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  <span class="keyword">if</span> err != <span class="predefined-constant">nil</span> {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    <span class="predefined">panic</span>(err)
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  }
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>}
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span class="keyword">func</span> main() {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  db, err := gorm.Open(<span class="string"><span class="delimiter">&quot;</span><span class="content">postgres</span><span class="delimiter">&quot;</span></span>,
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    <span class="shell"><span class="delimiter">`</span><span class="content">host=localhost </span></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span class="shell"><span class="content">      user=postgres password=test</span></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span><span class="shell"><span class="content">      dbname=gomidway </span></span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span><span class="shell"><span class="content">      sslmode=disable</span><span class="delimiter">`</span></span>)
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>  panicOnError(err)
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>  <span class="keyword">defer</span> db.Close()
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>  signupUser(db)
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>}
</pre></div>
</div>
</div>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="comment">// main.go</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="comment">// ...</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="keyword">func</span> signupUser(db *gorm.DB) {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  res, err := signup.Signup(db, &amp;signup.Request{
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    Email:    <span class="string"><span class="delimiter">&quot;</span><span class="content">foo@bar.com</span><span class="delimiter">&quot;</span></span>,
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    Username: <span class="string"><span class="delimiter">&quot;</span><span class="content">foo</span><span class="delimiter">&quot;</span></span>,
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    Password: <span class="string"><span class="delimiter">&quot;</span><span class="content">foobar</span><span class="delimiter">&quot;</span></span>,
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  })
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  <span class="keyword">if</span> err != <span class="predefined-constant">nil</span> {
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    <span class="keyword">switch</span> err.(<span class="keyword">type</span>) {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    <span class="keyword">case</span> *user.UsernameDuplicateError:
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>      fmt.Println(<span class="string"><span class="delimiter">&quot;</span><span class="content">Bad Request: </span><span class="delimiter">&quot;</span></span>, err.Error())
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>      <span class="keyword">return</span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    <span class="keyword">case</span> *user.EmailDuplicateError:
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>      fmt.Println(<span class="string"><span class="delimiter">&quot;</span><span class="content">Bad Request: </span><span class="delimiter">&quot;</span></span>, err.Error())
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>      <span class="keyword">return</span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    <span class="keyword">default</span>:
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>      fmt.Println(<span class="string"><span class="delimiter">&quot;</span><span class="content">Internal Server Error: </span><span class="delimiter">&quot;</span></span>, err.Error())
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>      <span class="keyword">return</span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    }
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>  }
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>  fmt.Println(<span class="string"><span class="delimiter">&quot;</span><span class="content">Created: </span><span class="delimiter">&quot;</span></span>, res.Id)
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>}
</pre></div>
</div>
</div>

<p>if we run the program for the first time after setting up the PostgreSQL database <code>gomidway</code> with the <code>users</code> table, we will get the following output</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>Created:  1
</pre></div>
</div>
</div>

<p>if we rerun the program again, we’ll see the bad request error</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>Bad Request:  Username 'foo' already exists
</pre></div>
</div>
</div>

<p>if we modify the username from <code>foo</code> to <code>bar</code> and run the program, we’ll again get a bad request error for the email address</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>Bad Request:  Email 'foo@bar.com' already exists
</pre></div>
</div>
</div>

<p>That’s it! We have completed the first use case of <strong>gomidway</strong>!!</p>

<h2 id="use-case-2---user-login">Use Case #2 - User Login</h2>

<p>The next use case that we are going to implement is user login. The requirement for login has been defined as</p>

<ul>
  <li>
    <p>if the user logs in with a different email address or with a different password, we need to show him appropriate errors</p>
  </li>
  <li>
    <p>if the email and the password matches, let the user know that he has logged in</p>
  </li>
</ul>

<h3 id="defining-the-login-handler">Defining the Login handler</h3>

<p>As we did for the signup, let’s start our implementation from defining the handler for login</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="comment">// user/login/handler.go</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="keyword">type</span> Request <span class="keyword">struct</span> {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  Email    <span class="predefined-type">string</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  Password <span class="predefined-type">string</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>}
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span class="keyword">type</span> Response <span class="keyword">struct</span> {
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  User *user.User
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>}
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span class="keyword">func</span> Login(db *gorm.DB, req *Request) (*Response, <span class="predefined-type">error</span>) { 
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  <span class="comment">// ...</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>}
</pre></div>
</div>
</div>

<p>To implement login, we need some help from the persistence. In other words, we have to find whether the user with the given email address exists in our application.</p>

<h3 id="adding-user-findbyemail-function">Adding User FindByEmail function</h3>

<p>Let’s create a new file <code>find.go</code> in the <code>user</code> folder and define the <code>FindByEmail</code> function</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="comment">// user/find.go</span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span><span class="keyword">func</span> FindByEmail(db *gorm.DB, email <span class="predefined-type">string</span>) (*User, <span class="predefined-type">error</span>) {
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  <span class="keyword">var</span> user User
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  res := db.Find(&amp;user, &amp;User{Email: email})
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  <span class="keyword">return</span> &amp;user, res.Error
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>}
</pre></div>
</div>
</div>

<p>That’s great. But how are we going to find if the email didn’t exist in the first place?</p>

<p>Thankfully, We don’t need to anything extra other than calling the <a href="https://godoc.org/github.com/jinzhu/gorm#DB.RecordNotFound">RecordNotFound</a> to figure this out!</p>

<p>Let’s define a custom error type <code>EmailNotExistsError</code> and return it if no records found.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="comment">// user/find.go</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="keyword">type</span> EmailNotExistsError <span class="keyword">struct</span>{}
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="keyword">func</span> (*EmailNotExistsError) Error() <span class="predefined-type">string</span> {
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  <span class="keyword">return</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">email not exists</span><span class="delimiter">&quot;</span></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>}
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span class="keyword">func</span> FindByEmail(db *gorm.DB, email <span class="predefined-type">string</span>) (*User, <span class="predefined-type">error</span>) {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  <span class="keyword">var</span> user User
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  res := db.Find(&amp;user, &amp;User{Email: email})
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>  <span class="keyword">if</span> res.RecordNotFound() {
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    <span class="keyword">return</span> <span class="predefined-constant">nil</span>, &amp;EmailNotExistsError{}
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>  }
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>  <span class="keyword">return</span> &amp;user, <span class="predefined-constant">nil</span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>}
</pre></div>
</div>
</div>

<p>Now its time to turn our attention to Login handler to wire up the login functionality. </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="comment">// user/login/handler.go</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="comment">// ...</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="keyword">func</span> Login(db *gorm.DB, req *Request) (*Response, <span class="predefined-type">error</span>) {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  user, err := user.FindByEmail(db, req.Email)
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  <span class="keyword">if</span> err != <span class="predefined-constant">nil</span> {
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span class="keyword">return</span> <span class="predefined-constant">nil</span>, err
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  }
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  <span class="comment">// ...</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>}
</pre></div>
</div>
</div>

<p>The next scenario that we need to handle is, compare the password in the request with the password hash. As we need to let the user know in case of password mismatch, let’s create a <code>PasswordMismatchError</code> in the login handler and return it during the mismatch.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="comment">// user/login/handler.go</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="comment">// ...</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="keyword">type</span> PasswordMismatchError <span class="keyword">struct</span>{}
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="keyword">func</span> (e *PasswordMismatchError) Error() <span class="predefined-type">string</span> {
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  <span class="keyword">return</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">password didn't match</span><span class="delimiter">&quot;</span></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>}
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span class="keyword">func</span> Login(db *gorm.DB, req *Request) (*Response, <span class="predefined-type">error</span>) {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  <span class="comment">// ...</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  err = bcrypt.CompareHashAndPassword([]<span class="predefined-type">byte</span>(user.PasswordHash), []<span class="predefined-type">byte</span>(req.Password))
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>  <span class="keyword">if</span> err != <span class="predefined-constant">nil</span> {
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    <span class="keyword">return</span> <span class="predefined-constant">nil</span>, &amp;PasswordMismatchError{}
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>  }
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>  <span class="keyword">return</span> &amp;Response{User: user}, <span class="predefined-constant">nil</span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>}
</pre></div>
</div>
</div>

<p>With this, we are done with login handler implementation. Let’s test drive it!</p>

<h3 id="test-driving-user-login">Test Driving User Login</h3>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="comment">// main.go</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="comment">// ...</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="keyword">func</span> main() {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  <span class="comment">// ...</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  loginUser(db)
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>}
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span class="comment">// ...</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span class="keyword">func</span> loginUser(db *gorm.DB) {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  res, err := login.Login(db, &amp;login.Request{
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    Email: <span class="string"><span class="delimiter">&quot;</span><span class="content">foo@bar.com</span><span class="delimiter">&quot;</span></span>, 
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    Password: <span class="string"><span class="delimiter">&quot;</span><span class="content">foobar</span><span class="delimiter">&quot;</span></span>})
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  <span class="keyword">if</span> err != <span class="predefined-constant">nil</span> {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    <span class="keyword">switch</span> err.(<span class="keyword">type</span>) {
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    <span class="keyword">case</span> *user.EmailNotExistsError:
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>      fmt.Println(<span class="string"><span class="delimiter">&quot;</span><span class="content">Bad Request: </span><span class="delimiter">&quot;</span></span>, err.Error())
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>      <span class="keyword">return</span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    <span class="keyword">case</span> *login.PasswordMismatchError:
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>      fmt.Println(<span class="string"><span class="delimiter">&quot;</span><span class="content">Bad Request: </span><span class="delimiter">&quot;</span></span>, err.Error())
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>      <span class="keyword">return</span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    <span class="keyword">default</span>:
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>      fmt.Println(<span class="string"><span class="delimiter">&quot;</span><span class="content">Internal Server Error: </span><span class="delimiter">&quot;</span></span>, err.Error())
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>      <span class="keyword">return</span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    }
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>  }
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>  fmt.Printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Ok: User '%s' logged in</span><span class="delimiter">&quot;</span></span>, res.User.Username)
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>}
</pre></div>
</div>
</div>

<h2 id="summary">Summary</h2>

<p>In this blog post, we have seen how we can use the create and find function in gorm along with the use case driven approach. The source code can be found in <a href="https://github.com/tamizhvendan/gomidway/tree/part-1">my GitHub repository</a>. </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leveraging interfaces in golang - Part 2]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2017/07/03/leveraging-interfaces-in-golang-part-2/"/>
    <updated>2017-07-03T19:44:33+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2017/07/03/leveraging-interfaces-in-golang-part-2</id>
    <content type="html"><![CDATA[<p>In my previous <a href="/blog/2017/06/24/leveraging-interfaces-in-golang-part-1/">blog post</a>, we have seen how interfaces in golang can help us to come up with a cleaner design. In this blog post, we are going to see an another interesting use case of applying golang’s interfaces in creating adapters!</p>

<h2 id="some-context">Some Context</h2>

<p>In my current project, we are using <a href="https://www.postgresql.org/">Postgres</a> for persisting the application data. To make our life easier, we are using <a href="http://jinzhu.me/gorm/">gorm</a> to talk to Postgres from our golang code. Things were going well and we started rolling out new features without any challenges. One beautiful day, we came across an interesting requirement which gave us a run for the money.   </p>

<p>The requirement is to store and retrieve an array of strings from Postgres!</p>

<p><img class="center" src="/images/igo2/slice-to-array-conversion.png"></p>

<p>It sounds simple on paper but while implementing it we found that it is not straightforward. Let me explain what the challenge was and how we solved it through a <strong>Task list</strong> example</p>

<h2 id="the-database-side">The Database Side</h2>

<p>Let’s assume that we have database <code>mytasks</code> with a table <code>tasks</code> to keep track of the tasks. </p>

<p>The <code>tasks</code> table has the following schema </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="class">CREATE</span> <span class="type">TABLE</span> tasks (
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  id SERIAL <span class="directive">PRIMARY</span> <span class="type">KEY</span>,
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  name <span class="predefined-type">TEXT</span> <span class="keyword">NOT</span> <span class="predefined-constant">NULL</span>,
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  is_completed <span class="predefined-type">BOOL</span> <span class="keyword">NOT</span> <span class="predefined-constant">NULL</span>,
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  tags <span class="predefined-type">VARCHAR</span>(<span class="integer">10</span>)[]
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>)
</pre></div>
</div>
</div>

<p>An important thing to note over here is that each <code>task</code> has an array of <code>tags</code> of type <code>varchar(10)</code>.</p>

<h2 id="the-golang-side">The Golang Side</h2>

<p>The equivalent <a href="http://jinzhu.me/gorm/models.html#model-definition">model definition</a> of the <code>tasks</code> table would look like the following in <em>Golang</em></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="keyword">type</span> Task <span class="keyword">struct</span> {
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  Id          <span class="predefined-type">uint</span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  Name        <span class="predefined-type">string</span>
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  IsCompleted <span class="predefined-type">bool</span>
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  Tags        []<span class="predefined-type">string</span>
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>}
</pre></div>
</div>
</div>

<h2 id="the-challenge">The Challenge</h2>

<p>Everything is set to test drive the task creation. </p>

<p>Let’s see what happens when we try to create a new task!</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="keyword">package</span> main
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="keyword">import</span> (
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  <span class="string"><span class="delimiter">&quot;</span><span class="content">fmt</span><span class="delimiter">&quot;</span></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  <span class="string"><span class="delimiter">&quot;</span><span class="content">github.com/jinzhu/gorm</span><span class="delimiter">&quot;</span></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  _ <span class="string"><span class="delimiter">&quot;</span><span class="content">github.com/jinzhu/gorm/dialects/postgres</span><span class="delimiter">&quot;</span></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>)
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span><span class="keyword">func</span> panicOnError(err <span class="predefined-type">error</span>) {
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  <span class="keyword">if</span> err != <span class="predefined-constant">nil</span> {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    <span class="predefined">panic</span>(err)
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  }
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>}
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span><span class="keyword">func</span> CreateTask(db *gorm.DB, name <span class="predefined-type">string</span>, tags []<span class="predefined-type">string</span>) (<span class="predefined-type">uint</span>, <span class="predefined-type">error</span>) {
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>  newTask := &amp;Task{Name: name, Tags: tags}
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>  result := db.Create(newTask)
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>  <span class="keyword">if</span> result.Error != <span class="predefined-constant">nil</span> {
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    <span class="keyword">return</span> <span class="integer">0</span>, result.Error
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>  }
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>  <span class="keyword">return</span> newTask.Id, <span class="predefined-constant">nil</span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>}
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span><span class="keyword">func</span> main() {
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>  db, err := gorm.Open(<span class="string"><span class="delimiter">&quot;</span><span class="content">postgres</span><span class="delimiter">&quot;</span></span>,
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>    <span class="shell"><span class="delimiter">`</span><span class="content">host=localhost </span></span>
<span class="line-numbers"><a href="#n27" name="n27">27</a></span><span class="shell"><span class="content">      user=postgres password=test</span></span>
<span class="line-numbers"><a href="#n28" name="n28">28</a></span><span class="shell"><span class="content">      dbname=mytasks </span></span>
<span class="line-numbers"><a href="#n29" name="n29">29</a></span><span class="shell"><span class="content">      sslmode=disable</span><span class="delimiter">`</span></span>)
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>  panicOnError(err)
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>  <span class="keyword">defer</span> db.Close()
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>  id, err := CreateTask(db, <span class="string"><span class="delimiter">&quot;</span><span class="content">test 123</span><span class="delimiter">&quot;</span></span>, []<span class="predefined-type">string</span>{<span class="string"><span class="delimiter">&quot;</span><span class="content">personal</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">test</span><span class="delimiter">&quot;</span></span>})
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>  panicOnError(err)
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>  fmt.Printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Task %d has been created</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, id)
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>}
</pre></div>
</div>
</div>

<p>When we run this program, it will panic with the following error message </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>panic: sql: converting Exec argument $3 type: unsupported type []string, a slice of string
</pre></div>
</div>
</div>

<p>As the error message says, the SQL driver doesn’t support <code>[]string</code>. From <a href="https://golang.org/pkg/database/sql/driver/#Value">the documentation</a>, we can found that the <em>SQL drivers</em> only support the following values</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>int64
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>float64
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>bool
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>[]byte
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>string
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>time.Time
</pre></div>
</div>
</div>

<p>So, we can’t persist the <code>task</code> with the <code>tags</code> using this approach. </p>

<h2 id="golangs-interface-in-action">Golang’s interface in Action</h2>

<p>As a first step towards the solution, let’s see how the plain SQL <code>insert</code> query provides the value for arrays in <em>Postgres</em></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="class">INSERT</span> <span class="class">INTO</span> tasks(name,is_completed,tags) <span class="keyword">VALUES</span>(<span class="string"><span class="delimiter">'</span><span class="content">buy milk</span><span class="delimiter">'</span></span>,<span class="predefined-constant">false</span>,<span class="string"><span class="delimiter">'</span><span class="content">{&quot;home&quot;,&quot;delegate&quot;}</span><span class="delimiter">'</span></span>);
</pre></div>
</div>
</div>

<p>The clue here is the plain SQL expects the value for array as a string with the following format</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>'{ val1 delim val2 delim ... }'
</pre></div>
</div>
</div>

<blockquote>
  <p>double quotes around element values if they are empty strings, contain curly braces, delimiter characters, double quotes, backslashes, or white space, or match the word NULL. Double quotes and backslashes embedded in element values will be backslash-escaped. - <a href="https://www.postgresql.org/docs/9.6/static/arrays.html">Postgres Documentation</a></p>
</blockquote>

<p>That’s great! All we need to do is convert the <code>[]string</code> to <code>string</code> which follows the format specified above. </p>

<p>An easier approach would be changing the <code>Tags</code> field of the <code>Task</code> <strong>struct</strong> to <code>string</code> and do this conversion somewhere in the application code before persisting the task. </p>

<p>But it’s not a cleaner approach as the resulting code is not semantically correct!</p>

<p>Golang provides a neat solution to this problem through the <a href="https://golang.org/pkg/database/sql/driver/#Valuer">Valuer</a> interface</p>

<blockquote>
  <p>Types implementing Valuer interface are able to convert themselves to a driver Value.</p>
</blockquote>

<p>That is we need to have a type representing the <code>[]string</code> type and implement this interface to do the type conversion. </p>

<p>Like we did in the <a href="/blog/2017/06/24/leveraging-interfaces-in-golang-part-1/">part-1</a> of this series, let’s make use of <a href="https://golang.org/ref/spec#Type_identity">named types</a> by creating a new type called <code>StringSlice</code></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="keyword">type</span> StringSlice []<span class="predefined-type">string</span>
</pre></div>
</div>
</div>

<p>Then we need to do the type conversion in the <code>Value</code> method</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="keyword">func</span> (stringSlice StringSlice) Value() (driver.Value, <span class="predefined-type">error</span>) {
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  <span class="keyword">var</span> quotedStrings []<span class="predefined-type">string</span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  <span class="keyword">for</span> _, str := <span class="keyword">range</span> stringSlice {
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    quotedStrings = <span class="predefined">append</span>(quotedStrings, strconv.Quote(str))
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  }
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>  value := fmt.Sprintf(<span class="string"><span class="delimiter">&quot;</span><span class="content">{ %s }</span><span class="delimiter">&quot;</span></span>, strings.Join(quotedStrings, <span class="string"><span class="delimiter">&quot;</span><span class="content">,</span><span class="delimiter">&quot;</span></span>))
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>  <span class="keyword">return</span> value, <span class="predefined-constant">nil</span>
<span class="line-numbers"><a href="#n8" name="n8">8</a></span>}
</pre></div>
</div>
</div>

<p>Great! </p>

<p>With this new type in place, we can change the datatype of <code>Tags</code> field from <code>[]string</code> to <code>StringSlice</code> in the <code>Task</code> struct. </p>

<p>If we rerun the program, it will work as expected!!</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>Task 1 has been created
</pre></div>
</div>
</div>

<h2 id="filter-by-tag">Filter by tag</h2>

<p>Let’s move to the query side of the problem. </p>

<p>We would like to get a list of tasks associated with a particular tag. </p>

<p>It’d be a straightforward function that uses the <a href="http://jinzhu.me/gorm/crud.html#query">find method</a> in gorm.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="keyword">func</span> GetTasksByTag(db *gorm.DB, tag <span class="predefined-type">string</span>) ([]Task, <span class="predefined-type">error</span>) {
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  tasks := []Task{}
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  result := db.Find(&amp;tasks, <span class="string"><span class="delimiter">&quot;</span><span class="content">? = any(tags)</span><span class="delimiter">&quot;</span></span>, tag)
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  <span class="keyword">if</span> result.Error != <span class="predefined-constant">nil</span> {
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>    <span class="keyword">return</span> <span class="predefined-constant">nil</span>, result.Error
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>  }
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>  <span class="keyword">return</span> tasks, <span class="predefined-constant">nil</span>
<span class="line-numbers"><a href="#n8" name="n8">8</a></span>}
</pre></div>
</div>
</div>

<p>Then we need to call it from our main function </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="comment">// ...</span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span><span class="keyword">func</span> main() {
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  <span class="comment">// ...</span>
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  tasks, err := GetTasksByTag(db, <span class="string"><span class="delimiter">&quot;</span><span class="content">project-x</span><span class="delimiter">&quot;</span></span>)
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  panicOnError(err)
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>  fmt.Println(tasks)
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>}
</pre></div>
</div>
</div>

<p>Unfortunately, if we run the program, it will panic with the following error message</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>panic: sql: Scan error on column index 3: unsupported Scan, storing driver.Value type []uint8 into 
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>type *main.StringSlice; sql: Scan error on column index 3: unsupported Scan, 
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>storing driver.Value type []uint8 into type *main.StringSlice
</pre></div>
</div>
</div>

<p>As the error message says, the SQL driver unable to scan (unmarshal) the data type byte slice (<code>[]uint8</code>) into our custom type <code>StringSlice</code>. </p>

<p>To fix this, we need to provide a mechanism to convert <code>[]uint8</code> to <code>StringSlice</code> which in turn will be used by the SQL driver while scanning. </p>

<p>Like the <code>Valuer</code> interface, <em>Golang</em> provides <a href="https://golang.org/pkg/database/sql/#Scanner">Scanner</a> interface to do the data type conversion while scanning. </p>

<p>The signature of the <em>Scanner</em> interface returns an error and not the converted value. </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="keyword">type</span> Scanner <span class="keyword">interface</span> {  
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  Scan(src <span class="keyword">interface</span>{}) <span class="predefined-type">error</span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>}
</pre></div>
</div>
</div>
<p>So, it implies the implementor of this interface should have a pointer receiver (<code>*StringSlice</code>) which will mutate its value upon successful conversion.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="keyword">func</span> (stringSlice *StringSlice) Scan(src <span class="keyword">interface</span>{}) <span class="predefined-type">error</span> { 
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  <span class="comment">// ...</span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>}
</pre></div>
</div>
</div>

<p>In the implementation of this interface, we just need to convert the byte slice into a string slice by converting it to a <code>string</code> (Postgres representation of array value) first, and then to <code>StringSlice</code></p>

<pre><code>[]uint8 --&gt; {home,delegate} --&gt; []string{"home", "delegate"} 
</code></pre>

<p>After successful conversion, we need to assign the converted value to the receiver (<code>*stringSlice</code>)</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="keyword">func</span> (stringSlice *StringSlice) Scan(src <span class="keyword">interface</span>{}) <span class="predefined-type">error</span> { 
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  val, ok := src.([]<span class="predefined-type">byte</span>)
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  <span class="keyword">if</span> !ok {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    <span class="keyword">return</span> fmt.Errorf(<span class="string"><span class="delimiter">&quot;</span><span class="content">unable to scan</span><span class="delimiter">&quot;</span></span>)
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  }
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  value := strings.TrimPrefix(<span class="predefined-type">string</span>(val), <span class="string"><span class="delimiter">&quot;</span><span class="content">{</span><span class="delimiter">&quot;</span></span>)
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  value = strings.TrimSuffix(value, <span class="string"><span class="delimiter">&quot;</span><span class="content">}</span><span class="delimiter">&quot;</span></span>)
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  *stringSlice = strings.Split(value, <span class="string"><span class="delimiter">&quot;</span><span class="content">,</span><span class="delimiter">&quot;</span></span>)
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>  <span class="keyword">return</span> <span class="predefined-constant">nil</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>}
</pre></div>
</div>
</div>

<p>That’s it. If we run the program now, we can see the output as expected. </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>[{2 schedule meeting with the team false [project-x]} 
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  {3 prepare for client demo false [slides project-x]}]
</pre></div>
</div>
</div>

<h2 id="summary">Summary</h2>

<p>In this blog post, we have seen how we can make use of <code>Valuer</code> and <code>Scanner</code> interfaces in golang to marshal and unmarshal our custom data type from the database. </p>

<p>The source code can be found in <a href="https://github.com/tamizhvendan/igo2">my GitHub repository</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leveraging interfaces in golang - Part 1]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2017/06/24/leveraging-interfaces-in-golang-part-1/"/>
    <updated>2017-06-24T13:38:16+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2017/06/24/leveraging-interfaces-in-golang-part-1</id>
    <content type="html"><![CDATA[<p>In my previous blog post <a href="/blog/2017/05/01/using-golang-in-production-my-experiences/">on using golang in production</a>, I have mentioned that <a href="https://gobyexample.com/interfaces">interfaces</a> are my favorite feature in golang. </p>

<p>As a follow-up of this comment, I would like to share how we are using (my current project is also in golang!) the interfaces to keep our code clean and consistent through a series of three blog posts</p>

<p>This blog post series assumes that you are familiar with the basics of interfaces in golang. If would like to know what it brings to the table, I strongly recommend to check out <a href="https://hackernoon.com/why-i-like-gos-interfaces-2891adf2803c">this well-written article</a> by <a href="https://twitter.com/theburningmonk">Yan Cui</a>.</p>

<p>Let me start the series with a solution that we have implemented a few days back. </p>

<h2 id="some-context">Some Context</h2>

<p>The product that we are building consists of a suite of web applications. To authenticate the users, these web applications talk to a centralized web application called “Identity Server”. </p>

<p>Upon receiving valid login credentials, the Identity Server generates <a href="https://jwt.io/introduction/">a JSON Web Token</a>(JWT) with the corresponding user claims and signs it using a public/private key pair using RSA. </p>

<p>The downstream web applications will then use this JWT to grant the access to their corresponding protected resources. </p>

<p>Let’s assume a simple JWT claims payload</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>{
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  <span class="key"><span class="delimiter">&quot;</span><span class="content">sub</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">1234567890</span><span class="delimiter">&quot;</span></span>,
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">John D</span><span class="delimiter">&quot;</span></span>,
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  <span class="key"><span class="delimiter">&quot;</span><span class="content">admin</span><span class="delimiter">&quot;</span></span>: <span class="value">true</span>
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>}
</pre></div>
</div>
</div>

<p>The above payload uses one of the <a href="https://tools.ietf.org/html/rfc7519#section-4.1">JWT standard claims</a>, <code>sub</code>, to communicate the unique identifier of the user in the product for all the web applications. The <code>name</code> and <code>admin</code> are the custom claims. </p>

<p>As per the JWT spec, <a href="https://self-issued.info/docs/draft-ietf-oauth-json-web-token.html#subDef">the sub claim</a> is a case-sensitive string containing a StringOrURI value which is locally unique in the context of the issuer or be globally unique, but in our system, the unique identifier of a user is an unsigned integer(uint) type. </p>

<p>As we will be sharing the JWT with other third party applications, we made a call to stick to the JWT spec and converted the uint to string type while generating the token and did the reverse while authenticating the user using this token.</p>

<blockquote>
  <p><em>Update</em> - After writing this blog post, I came to know from <a href="http://disq.us/p/1kcwwkh">the comment</a> that the use case of this blog post, unmarshalling a JSON string to <code>uint</code> type can be done by adding <code>string</code> to the <code>json</code> tag. Being said that, if you’d like to know about how to use an interface to solve it, the rest of the post would help. </p>
</blockquote>

<h2 id="unmarshalling-jwt---a-naive-approach">Unmarshalling JWT - A Naive Approach</h2>

<p>Before witnessing the golang interface in action, let’s see a naive implementation how we can unmarshal the claim and use.</p>

<p>The straightforward thing would be creating a struct matching the properties of the claim </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="keyword">type</span> UserJwt <span class="keyword">struct</span> {
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  Sub    <span class="predefined-type">string</span> 
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  Name   <span class="predefined-type">string</span>
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  Admin  <span class="predefined-type">bool</span>
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>}
</pre></div>
</div>
</div>

<p>and unmarshalling using the <a href="https://golang.org/pkg/encoding/json/">json package</a> in golang </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>claims := <span class="shell"><span class="delimiter">`</span><span class="content"></span></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="shell"><span class="content">{</span></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="shell"><span class="content">  &quot;sub&quot;: &quot;1234567890&quot;,</span></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="shell"><span class="content">  &quot;name&quot;: &quot;John D&quot;,</span></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span class="shell"><span class="content">  &quot;admin&quot;: true</span></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span><span class="shell"><span class="content">}</span><span class="delimiter">`</span></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span class="keyword">var</span> userJwt *UserJwt
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>err := json.Unmarshal([]<span class="predefined-type">byte</span>(claims), &amp;userJwt)
</pre></div>
</div>
</div>

<p>To convert the <code>sub</code> from <code>string</code> to <code>uint</code>, we can have a method <code>Id</code> on the <code>UserJwt</code> type.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="keyword">func</span> (u *UserJwt) Id() (<span class="predefined-type">uint</span>, <span class="predefined-type">error</span>) {
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  v, err := strconv.ParseUint(u.Sub, <span class="integer">10</span>, strconv.IntSize)
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  <span class="keyword">if</span> err != <span class="predefined-constant">nil</span> {
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    <span class="keyword">return</span> <span class="integer">0</span>, err
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  }
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>  <span class="keyword">return</span> <span class="predefined-type">uint</span>(v), <span class="predefined-constant">nil</span>
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>}
</pre></div>
</div>
</div>

<p>and use it after successful unmarshalling of the JWT claims. </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="comment">// ...</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>err := json.Unmarshal([]<span class="predefined-type">byte</span>(claims), &amp;userJwt)
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="keyword">if</span> err != <span class="predefined-constant">nil</span> {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  <span class="keyword">return</span> err
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>}
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>id, err := userJwt.Id()
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span class="keyword">if</span> err != <span class="predefined-constant">nil</span> {
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  <span class="keyword">return</span> err
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>}
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span class="comment">// Do something with the id of type uint</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>fmt.Println(id)
</pre></div>
</div>
</div>

<p>That’s great. But did you see any code smell here?</p>

<p>Let me share what’s wrong with this approach,</p>

<p>Let’s say that we have the following JSON claim with <code>sub</code> has the value <code>user/john</code> instead of a string representing the unsigned integer identifier of the user.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>claims := <span class="shell"><span class="delimiter">`</span><span class="content"></span></span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span><span class="shell"><span class="content">{</span></span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span><span class="shell"><span class="content">  &quot;sub&quot;: &quot;user/john&quot;,</span></span>
<span class="line-numbers"><a href="#n4" name="n4">4</a></span><span class="shell"><span class="content">  &quot;name&quot;: &quot;John D&quot;,</span></span>
<span class="line-numbers"><a href="#n5" name="n5">5</a></span><span class="shell"><span class="content">  &quot;admin&quot;: true</span></span>
<span class="line-numbers"><a href="#n6" name="n6">6</a></span><span class="shell"><span class="content">}</span><span class="delimiter">`</span></span>
</pre></div>
</div>
</div>

<p>Unmarshalling this claim will work, and it won’t return any error</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="comment">// ...</span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>err := json.Unmarshal([]<span class="predefined-type">byte</span>(claims), &amp;userJwt)
<span class="line-numbers"><a href="#n3" name="n3">3</a></span><span class="keyword">if</span> err != <span class="predefined-constant">nil</span> {
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  <span class="keyword">return</span> err
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>}
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>
</pre></div>
</div>
</div>

<p>We can share the unmarshalled <code>userJwt</code> with the rest of the code to carry the business logic. </p>

<p>We will come to know that the claim has an invalid <code>sub</code> value only when we try to get the id of the user by calling the <code>Id</code> method</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="comment">// ...</span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>id, err := userJwt.Id()
<span class="line-numbers"><a href="#n3" name="n3">3</a></span><span class="comment">// This will return the following error</span>
<span class="line-numbers"><a href="#n4" name="n4">4</a></span><span class="comment">// strconv.ParseUint: parsing &quot;name/john&quot;: invalid syntax</span>
</pre></div>
</div>
</div>

<p>If we didn’t call the <code>Id</code> method, this subtle bug slip silently into the product and someday will end up as a production issue! </p>

<p>In a nutshell, this approach is not robust, and the resulting code is not clean.</p>

<h2 id="using-interfaces---a-better-approach">Using Interfaces - A better approach</h2>

<p>Ideally, we want the <code>json.Unmarshal</code> function should return an error if the <code>sub</code> doesn’t contain a <code>uint</code> value as string.</p>

<p>To make it happen, we need to inform the <code>json.Unmarshal</code> function somehow to do the type conversion while unmarshalling and return an error if the conversion fails. </p>

<p>How to make it happen? </p>

<p>We can do this by using the <a href="https://golang.org/pkg/encoding/json/#Unmarshaler">Unmarshaler</a> interface. </p>

<p>In our case, we can declare the <code>UnmarshalJSON</code> method with the <code>UserJwt</code> type and in the definition, we can do the type conversion. But that’d be an overkill as we need to do the unmarshalling of the other fields, <code>Name</code>, and <code>Admin</code>, which is already working well without any custom logic. </p>

<p>In other words, the effective way would be overriding the JSON unmarshalling behavior of <code>Sub</code> field alone by having the <code>UnmarshalJSON</code> method with <code>uint</code> type. But according to golang’s spec we can’t do it</p>

<blockquote>
  <p>You can only declare a method with a receiver whose type is defined in the same package as the method. You cannot declare a method with a receiver whose type is defined in another package (which includes the built-in types such as int).</p>
</blockquote>

<p>To handle this kind of scenario, we can make use of the <a href="https://golang.org/ref/spec#Type_identity">named types</a> in golang and define a new type called <code>Sub</code> with an underlying type <code>uint</code></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="keyword">type</span> Sub <span class="predefined-type">uint</span>
</pre></div>
</div>
</div>

<p>Then we can declare the <code>UnmarshalJSON</code> method with this <code>Sub</code> type. </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="keyword">func</span> (s *Sub) UnmarshalJSON(b []<span class="predefined-type">byte</span>) <span class="predefined-type">error</span> {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  sub := strings.Replace(<span class="predefined-type">string</span>(b), <span class="shell"><span class="delimiter">`</span><span class="content">&quot;</span><span class="delimiter">`</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>, <span class="integer">2</span>)
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  v, err := strconv.ParseUint(sub, <span class="integer">10</span>, strconv.IntSize)
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  <span class="keyword">if</span> err != <span class="predefined-constant">nil</span> {
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    <span class="keyword">return</span> err
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  }
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  *s = Sub(<span class="predefined-type">uint</span>(v))
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  <span class="keyword">return</span> <span class="predefined-constant">nil</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>}
</pre></div>
</div>
</div>

<blockquote>
  <p>Using the <code>Replace</code> function, we are getting rid of the double quotes in the actual JSON encoded value </p>
</blockquote>

<p>With this new <code>Sub</code> type in place, We can rewrite the <code>UserJwt</code> by replacing the <code>Sub</code> field with the <code>Id</code> field of type <code>Sub</code>.  </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="keyword">type</span> UserJwt <span class="keyword">struct</span> {
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  Id    Sub <span class="shell"><span class="delimiter">`</span><span class="content">json:&quot;sub&quot;</span><span class="delimiter">`</span></span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  Name  <span class="predefined-type">string</span>
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  Admin <span class="predefined-type">bool</span>
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>}
</pre></div>
</div>
</div>

<blockquote>
  <p>The <code>json</code> tag with the value <code>"sub"</code> is required to map the <code>sub</code> key in the JSON claim with the Id. </p>
</blockquote>

<p>Now if we try to unmarshal the invalid claim, the <code>json.Unmarshal</code> function will return an error</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>claims := <span class="shell"><span class="delimiter">`</span><span class="content"></span></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="shell"><span class="content">{</span></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="shell"><span class="content">  &quot;sub&quot;: &quot;user/john&quot;,</span></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="shell"><span class="content">  &quot;name&quot;: &quot;John D&quot;,</span></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span class="shell"><span class="content">  &quot;admin&quot;: true</span></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span><span class="shell"><span class="content">}</span><span class="delimiter">`</span></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span class="keyword">var</span> userJwt *UserJwt
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>err := json.Unmarshal([]<span class="predefined-type">byte</span>(claims), &amp;userJwt)
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span><span class="comment">// This will return the following error</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span class="comment">// strconv.ParseUint: parsing &quot;name/john&quot;: invalid syntax</span>
</pre></div>
</div>
</div>

<p>For a valid claim, we can now get the <code>Id</code> directly from the <code>UserJwt</code> <code>Id</code> field.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>claims := <span class="shell"><span class="delimiter">`</span><span class="content"></span></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="shell"><span class="content">{</span></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="shell"><span class="content">  &quot;sub&quot;: &quot;1234567890&quot;,</span></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="shell"><span class="content">  &quot;name&quot;: &quot;John D&quot;,</span></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span class="shell"><span class="content">  &quot;admin&quot;: true</span></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span><span class="shell"><span class="content">}</span><span class="delimiter">`</span></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span class="keyword">var</span> userJwt *UserJwt
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>err := json.Unmarshal([]<span class="predefined-type">byte</span>(claims), &amp;userJwt)
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span><span class="comment">// ...</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>fmt.Println(userJwt.Id)
</pre></div>
</div>
</div>

<p>That’s it! The code is in better shape now :)</p>

<h2 id="summary">Summary</h2>

<p>In this blog post, we have seen how we can write cleaner code by leveraging the interfaces. The source code is available in <a href="https://github.com/tamizhvendan/igo1">my GitHub repository</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Golang in Production - My Experiences]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2017/05/01/using-golang-in-production-my-experiences/"/>
    <updated>2017-05-01T07:50:32+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2017/05/01/using-golang-in-production-my-experiences</id>
    <content type="html"><![CDATA[<p>For the last one year, I was working with the development team of a leading media entertainment company in India and developed a cloud platform to distribute the <a href="https://en.wikipedia.org/wiki/Digital_Cinema_Package">DCPs</a> across the globe in a uniform, scalable and cost-effective manner.</p>

<p>We built the entire platform using <a href="https://golang.org/">golang</a> and <a href="https://www.nginx.com/blog/event-driven-data-management-microservices/">event-driven microservices architecture</a>. It was an exciting journey, and this blog post summarizes my experiences of using golang in this project.</p>

<h2 id="the-learning-curve">The Learning Curve</h2>

<p>Golang is <a href="https://www.youtube.com/watch?v=rFejpH_tAHM">a simple language</a> to learn. Any developer who has some good experience in any programming language can pick it in a month. It took me two weeks to understand the language. </p>

<p>I’ve also learned a lot from the code review comments from the other developers of my team who are already familiar with the language. </p>

<p>The official golang site has done an excellent job in coming up two important learning resources for the beginners.</p>

<ul>
  <li><a href="https://tour.golang.org">A Tour of Go</a> - Through a series of in-browser hands-on tutorials you can get a good feel of the language in few hours. </li>
  <li><a href="https://golang.org/doc/effective_go.html">Effective Go</a> - It is one the best introduction as well as best practices documentation of a programming language that I have read. Right from package naming convention to how to do state sharing, this documentation will provide all it required to write an idiomatic golang code. </li>
</ul>

<p>In addition to these resources, I recommend the <a href="https://golang.org/doc/faq">Golang FAQs</a> and the <a href="https://gobyexample.com/">GoByExample</a> for the beginners. </p>

<h2 id="go-routines-channels-and-select">Go Routines, Channels and Select</h2>

<p>In my perspective, go routines, channels and select are the sweet spots of golang. These <a href="https://talks.golang.org/2015/simplicity-is-complicated.slide#21">abstractions</a> are elegant and enable you to write concurrent programs without any hassles.</p>

<p>We have made substantial use of golang concurrency whenever it made sense, and the benefits were incredible. The blog post on <a href="https://blog.golang.org/pipelines">Go Concurrency Patterns</a> is an excellent read to get a feel of it.</p>

<h2 id="interfaces-in-golang">Interfaces in golang</h2>

<p>My favorite feature in golang is its support for <a href="https://gobyexample.com/interfaces">interfaces</a>. </p>

<p>Unlike C# or Java, you don’t need to specify the name of the interface when a type implements an interface. Because of this, the package in which the type present, doesn’t need to refer the package in which the interface has been declared.</p>

<p>Yan Cui has written a great <a href="https://hackernoon.com/why-i-like-gos-interfaces-2891adf2803c">blog post</a> about its elegance.</p>

<blockquote>
  <p>The design for Go’s interface stems from the observation that <strong>patterns and abstractions only become apparent after we’ve seen it a few times</strong>. So rather than locking us in with abstractions at the start of a project when we’re at the point of our greatest ignorance, we can define these abstractions as and when they become apparent to us. - <em>Yan Cui</em></p>
</blockquote>

<h2 id="the-go-proverbs">The Go Proverbs</h2>

<p>The <a href="https://go-proverbs.github.io/">Go Proverbs</a> provides a set of principles and guidelines while developing software in golang. </p>

<p>Though certain principles <em>(A little copying is better than a little dependency.)</em> look weird, they have profound meaning behind it. </p>

<p>Like the saying, <em>“You need to spend time crawling alone through shadows to truly appreciate what it is to stand in the sun.”</em>, to appreciate these proverbs you need to spend a decent amount time in developing software in go.</p>

<h2 id="golang-standard-library">Golang Standard Library</h2>

<p>The golang <a href="https://golang.org/pkg/">standard library</a> is futuristic. It has pretty much all that is required for solving the general problems efficiently. </p>

<p>The surprising factor for me is treating <a href="https://golang.org/pkg/encoding/json/">JSON</a> as a first class citizen in the standard library. </p>

<p>Most of the languages rely on an open source library to deal with JSON. Having JSON handling as part of the standard library shows how much thought and care has been put in.</p>

<h2 id="declared-and-not-used-compiler-error">Declared and Not used Compiler Error</h2>

<p>Another good thing that golang got it right is showing compiler errors for unused variables and packages. </p>

<p>The software which we write evolve along with its business requirements. Continuous refactoring, feature addition or deletion, changing the architecture to meet the new demands are some the stuff that we do during the evolution of the software. During these activities often we miss removing the unused code and the packages that we were using before.</p>

<p>Through this compiler error, golang forces the developer to write better code. The biggest advantage is while reading the code written by someone, you can be sure that the variables and the packages are always being used.</p>

<p>Also removing unused packages results in smaller binary size.</p>

<h2 id="go-command-command-line-interface-and-go-tools">go Command (Command Line Interface) and go tools</h2>

<p>The <a href="https://golang.org/cmd/go/">go command</a> is an another well thought out feature in golang which comes by default with the installation. </p>

<p>Using <code>go command</code>, you can compile &amp; build the code, download and install external packages, run the tests and lot more without relying on any other external tools. The <code>go test</code> command is incredibly fast and it made our job easier while doing Test-Driven development. </p>

<p>The <a href="https://golang.org/cmd/gofmt/">gofmt</a> command enabled our team to follow a consistent formatting of golang source files. Thanks to this awesome tool we hardly had code review comments on the format of the code.</p>

<p>The <a href="https://godoc.org/golang.org/x/tools">golang tools</a>, especially <a href="https://godoc.org/golang.org/x/tools/cmd/goimports">goimports</a> and <a href="https://godoc.org/golang.org/x/tools/cmd/gorename">gorename</a> has been extremely useful </p>

<h2 id="go-install-and-single-executable-binary">go install and Single executable binary</h2>

<p>The command which I loved the most in golang is the <code>go install</code> command. It takes care of compiling the code and produces a stand alone executable binary. Due to caching of intermediary packages, it builds the executable binary incredibly fast.</p>

<p>To run this resulted binary file, we don’t have to install anything on the target machine <em>(Like JVM, .NET)</em>.</p>

<p>It enabled us to share the microservice as an executable file with the other team members to create <a href="http://www.extremeprogramming.org/rules/spike.html">spikes</a>, develop and locally test other dependent microservices. </p>

<blockquote>
  <p>Just like bundling the front-end assets into single javascript file and serving them via CDNs, we can even do continuous deployment of golang codebase by serving the binaries from a content provider like Amazon S3, if it makes sense!</p>
</blockquote>

<p>We can also do <a href="https://dave.cheney.net/2015/08/22/cross-compilation-with-go-1-5">cross-compilation</a> of your golang code for different OSes and Architectures using <code>go build</code> command. </p>

<h2 id="open-source-libraries-in-golang">Open Source Libraries in golang</h2>

<p>Golang has a thriving open source community, and it houses a vast collection of <a href="https://github.com/avelino/awesome-go">open source libraries and frameworks</a>. Here is the list of some of the things that we have used heavily</p>

<ul>
  <li><a href="https://github.com/streadway/amqp">AMQP</a> - To interact with RabbitMQ</li>
  <li><a href="https://github.com/jinzhu/gorm">GORM</a> - To perform database operations in PostgreSQL</li>
  <li><a href="https://github.com/satori/go.uuid">go-uuid</a> - To generate and use UUIDs</li>
  <li><a href="https://github.com/mattes/migrate">migrate</a> - For database migrations</li>
  <li><a href="https://github.com/kelseyhightower/envconfig">envconfig</a> - For managing configuration data from environment variables</li>
  <li><a href="https://github.com/urfave/negroni">negroni</a> - To write HTTP middlewares</li>
  <li><a href="http://github.com/julienschmidt/httprouter">httprouter</a> - For handling HTTP routes. We have used this along with golang’s <a href="https://golang.org/doc/articles/wiki/">standard HTTP handlers</a> </li>
  <li><a href="http://github.com/sirupsen/logrus">logrus</a> - Simple and powerful library for logging</li>
  <li><a href="https://github.com/stretchr/testify">testify</a> - For unit test assertions</li>
</ul>

<p>For most of the common things that you’d like to do in your project, you can always find an off the shelf open source library</p>

<h2 id="private-methods-functions-and-struct-fields">Private methods, functions and struct fields</h2>

<p>I was admired when I came to know that just by using <a href="https://golang.org/ref/spec#Exported_identifiers">a naming convention</a>, I can specify public and private methods, functions and struct fields. </p>

<p>It is a smart feature in the language. If you want to expose them as public, start with an upper case letter and start with a lower case letter if you want to them to be used only inside a package or a struct. </p>

<h2 id="not-so-good-features-in-golang">Not So Good Features in Golang</h2>

<p>So far in this blog post, I’ve shared the features that I liked very much in golang. In the rest of the post, I am about to share the not so good features in golang. The heading was intentionally started with “Not So Good” as the things that I am about to share are not bad ones according to the golang language design principles and the go proverbs that we have seen earlier.</p>

<p>IMHO there is no perfect programming language, and there is no silver bullet. All languages shine in certain areas and not so good in some other areas. At the end of the day, a programming language is just a tool which we use to solve the business problems. We need to pick an appropriate language that solves the problem in hand. </p>

<blockquote>
  <p>Disclaimer: The intention of this blog post is to share my experiences and provide honest feedback to the people who is evaluating golang. </p>
</blockquote>

<h2 id="the-golang-way-of-handling-errors">The Golang way of handling errors</h2>

<p>The imperative way of handling errors is one of the <a href="http://stackoverflow.com/questions/18771569/avoid-checking-if-error-is-nil-repetition">common complaint raised</a> by many people.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>    _, err = foobar1()
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    <span class="keyword">if</span> err != <span class="predefined-constant">nil</span> {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>     <span class="keyword">return</span> err
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    }
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    _, err = foobar2()
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span class="keyword">if</span> err != <span class="predefined-constant">nil</span> {
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>     <span class="keyword">return</span> err
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    }
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    _, err = foobar3()
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    <span class="keyword">if</span> err != <span class="predefined-constant">nil</span> {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>     <span class="keyword">return</span> err
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    }
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    <span class="comment">// and so on</span>
</pre></div>
</div>
</div>

<p>Rob Pike addresses this concern in a detailed blog post, <a href="https://blog.golang.org/errors-are-values">Errors are values</a> and quotes a pattern using <code>errWriter</code> to avoid the repetition. It is a good design and elegantly wraps the <code>nil</code> check on the <code>error</code>. The downside of this approach is we need to write an extra wrapper for every new type to get rid of the repetitiveness. The wrapper approach may get complex if the <code>foobar1</code>, <code>foobar2</code>, and <code>foobar3</code> are addressing different concerns. </p>

<p>For people who is coming from typed functional programming languages (F#, Haskell, Scala) background, like me, this may look little awkward to write it in this way. There is a <a href="https://github.com/golang/go/issues/19991">proposal</a> to include Result type in golang but I feel it may not be incorporated.</p>

<h2 id="treating-nil-as-value">Treating nil as value</h2>

<p>While other languages are moving away from dealing with null values and replacing it with option types, golang is taking a backward step by treating <code>nil</code> (equivalent for <code>null</code> in Go) as a valid value. So we need to be cautious while using the nil value. Lack of discipline may result in runtime exceptions (panic in go vocabulary)</p>

<p>This problem can be avoided to some degree by having a function/method to return two values, the actual value to be returned and the error, and ensuring that the actual value will never be <code>nil</code>, if the error is <code>nil</code> and vice versa. Unfortunately, this approach leads to the repetition concern that we just saw.</p>

<h2 id="absence-of-generics">Absence of generics</h2>

<p>This also an another typical critic in golang. There is an answer of for this question in <a href="https://golang.org/doc/faq#generics">golang FAQ</a> saying, it is in the pipeline but my opinion is it may not be in the near future.</p>

<p>There are some workarounds like using <a href="https://tour.golang.org/methods/14">an empty interface</a> and casting it to appropriate types using <a href="https://tour.golang.org/methods/15">type assertion</a>. </p>

<p>The real concern is trying to do map, filter, reduce operations over collections. Again there are workarounds by using <a href="http://bouk.co/blog/idiomatic-generics-in-go/">templating and reflection</a>, but it has its own cost (performance and boilerplate code). After fiddling around with different options, We went back to the classic way of iterating through <code>for loop</code>.</p>

<h2 id="mutable-variables-and-imperative-coding">Mutable variables and imperative coding</h2>

<p>For developers who is coming from the functional programming background, the mutable variables and imperative way of writing code are speed breakers in the golang journey.</p>

<p>Though golang has some <a href="https://golang.org/doc/codewalk/functions/">good support</a> for doing functional programming, the presence of mutable variables and imperative way doing certain things, hinder the progress.</p>

<h2 id="summary">Summary</h2>

<p>Apart from these few concerns, I’ve liked golang and enjoyed using it.</p>

<p>The language design principles of golang are my important takeaways. I strongly recommend watching the <a href="http://go-lang.cat-v.org/talks/">talks of Rob Pike</a> on golang design; even you are not going to use golang.</p>

<p>I’d consider using golang in an another project in future for sure if it is an appropriate language for the problem at hand.</p>

]]></content>
  </entry>
  
</feed>
