<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: web-api | P3 Programmer]]></title>
  <link href="http://blog.tamizhvendan.in/blog/categories/web-api/atom.xml" rel="self"/>
  <link href="http://blog.tamizhvendan.in/"/>
  <updated>2015-11-23T20:55:07+05:30</updated>
  <id>http://blog.tamizhvendan.in/</id>
  <author>
    <name><![CDATA[Tamizhvendan S]]></name>
    <email><![CDATA[tamizh88@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Step-8 Adding Shopping Cart]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2015/03/20/step-8-adding-shopping-cart/"/>
    <updated>2015-03-20T11:49:35+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2015/03/20/step-8-adding-shopping-cart</id>
    <content type="html"><![CDATA[<blockquote>
  <p>This is step 8 of my blog series on <a href="{% post_url 2014-12-10-web-application-development-in-fsharp-using-asp-dot-net-mvc %}">Web Application Development in Fsharp using ASP.NET MVC</a></p>
</blockquote>

<p>In the <a href="{% post_url 2015-03-02-step-7-validation-and-error-handling-using-rop %}">last blog post</a> we have seen how to do validation and error handling in fsharp and in this blog post we are going to add shopping cart feature to the phone-cat application that we are developing in this blog series. To keep this blog post simple, we are going to see only adding an item to shopping cart. Remvoing an item from shopping cart is a straightforward implementation and I leave it to you as an exercise</p>

<p>{% img /images/fsharp_phonecat/step_8/cart_intro.png %}</p>

<h3 id="the-shopping-cart-domain">The Shopping Cart Domain</h3>

<p>Let’s start with defining the domain model for handling shopping cart. Create a source file <code>ShoppingCart</code> in the <strong>Domain</strong> project and add the following code</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>module ShoppingCart =    
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  type ProductId = string
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  type Cart =
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    | Empty
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    | Active of ProductId List
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  let addItem cart productId =
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    match cart with
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    | Empty -&gt; Active [productId]
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    | Active items -&gt; Active (productId :: items)
</pre></div>
</div>
</div>

<p>The <code>ProductId</code> is an alias of <code>string</code> type represents the id of the phone.</p>

<p>The <code>Cart</code> is a <code>Sum</code> type represents the two possible states of Shopping Cart. The <code>Cart</code> would be either empty or contain product ids that has been added to the cart.</p>

<p>We have added a function which adds a product id to the cart. It just checks the state of the cart and based on the state it either creates the cart with <code>Active</code> state or appends the product id to the existing list.</p>

<p>Thanks to the strong fsharp type system, we have modeled the domain with less lines of code.</p>

<h3 id="persisting-shopping-cart">Persisting Shopping Cart</h3>

<p>Now we have the domain logic to represent the shopping cart and adding items to it. The next step is persisting the cart. We can persist it anywhere as the domain model is persistent ignorant. To keep things simple, we will be persisting it in-memory. </p>

<p>As we did during the <a href="{% post_url 2015-01-02-step-3-phonecat-recommendation-system-using-f-number-agents %}">recommendation step</a> we will be using a dictionary to store the cart with Asp.Net’s <a href="http://msdn.microsoft.com/en-us/library/system.web.httprequest.anonymousid%28v=vs.110%29.aspx">anonymousId</a> as the key. </p>

<p>Create a source file <code>CartStorage</code> in the <strong>DataAccess</strong> project and update it as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>module CartStorage =  
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  let private inMemoryStorage = 
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    new Dictionary&lt;string, Cart&gt;()
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  let create anonymousId cart = 
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    inMemoryStorage.Add(anonymousId, cart)
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    cart
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  let update anonymousId cart =
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    inMemoryStorage.Remove(anonymousId) |&gt; ignore
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    create anonymousId cart
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>  let get anonymousId =
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    match inMemoryStorage.ContainsKey(anonymousId) with
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    | true -&gt; Some inMemoryStorage.[anonymousId] 
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    | _ -&gt; None
</pre></div>
</div>
</div>

<p>The code is very straight forward to understand. It contains typical CRUD operations of a shopping cart using an in-memory dictionary object.</p>

<h3 id="shopping-cart-api">Shopping Cart Api</h3>

<p>It’s time to code the api for the shopping cart. Let’s add a source file <code>ShoppingCartController</code> in the <strong>Web</strong> project and update it as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>[&lt;RoutePrefix(&quot;api/cart&quot;)&gt;]
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>type ShoppingCartController 
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  (
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    cart : Cart,
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    updateCart : Cart -&gt; Cart
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  ) =
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  inherit ApiController () 
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  [&lt;Route(&quot;&quot;)&gt;]
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  member this.Get() = cart
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  [&lt;HttpPost&gt;]
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>  [&lt;Route(&quot;add&quot;)&gt;]
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>  member this.AddItem([&lt;FromBody&gt;]productId : string) = 
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    addItem cart productId |&gt; updateCart
</pre></div>
</div>
</div>

<p>The <code>ShoppingCartController</code> has two dependencies.<br />
  1. <code>Cart</code> - Cart associated with the current session<br />
  2. <code>updateCart</code> - a function to update the cart</p>

<p>To keep it simple, I haven’t added error handling or validation here. The action method <code>Get</code> returns the cart and the action method <code>AddItem</code> adds the item to the cart and then update the cart in the storage.</p>

<h3 id="wiring-things-up">Wiring things up</h3>

<p>Now we have all the pieces to add shopping cart to our application and the final step is tying them together. As we did it in other steps we need to do it in the composition root. Open <code>Infrastructure</code> in the <strong>Web</strong> project and update it as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>type CompositionRoot 
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  (
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    // ... Exisitng Code ...
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  ) = 
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  interface IHttpControllerActivator with           
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    member this.Create(request, controllerDescriptor, controllerType) =
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>      // ... Exisiting Code ...
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>      else if controllerType = typeof&lt;ShoppingCartController&gt; then                  
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        let anonymousID = HttpContext.Current.Request.AnonymousID
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        let shoppingCart = 
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>          match CartStorage.get anonymousID with
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>          | Some cart -&gt; cart
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>          | None -&gt; CartStorage.create anonymousID ShoppingCart.Empty
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>                                                                                  
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        let shoppingCartController = new ShoppingCartController(shoppingCart, CartStorage.update anonymousID)
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        shoppingCartController :&gt; IHttpController
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>      // ... Existing Code ...
</pre></div>
</div>
</div>

<p>Here before the creating an instance of <code>ShoppingCartController</code> we retrieve the anonymous id from the incoming request and get the cart associated with the anonymous id from the storage. In case if the cart is not available, we are creating one. For the <code>update</code> function, we pass the partially applied <code>update</code> function of <code>CartStorage</code>.</p>

<p>That’s it!!</p>

<h3 id="the-front-end-code">The front-end code</h3>

<p>In the front end, we just call the <code>ShoppingCartController</code> action methods using plain jQuery ajax methods and update the UI. Since it is out of the scope of this blog post I haven’t covered it here and you can find <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/8/Web/Scripts/site.js">the code here</a>.</p>

<h3 id="summary">Summary</h3>

<p>In this blog post we have seen how to implement shopping cart in a web application written in fsharp. I leave some exercises for you to extend it to use some other storage and also to add validation and error handling. You can find the source code in the <a href="https://github.com/tamizhvendan/fsharp-phonecat/tree/8">github phonecat repository</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Step-2 Fsharp-PhoneCat Views using Razor]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2014/12/23/step-2-fsharp-phonecat-views-using-razor/"/>
    <updated>2014-12-23T19:47:20+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2014/12/23/step-2-fsharp-phonecat-views-using-razor</id>
    <content type="html"><![CDATA[<blockquote>
  <p>This is step 2 of my blog series on <a href="{% post_url 2014-12-10-web-application-development-in-fsharp-using-asp-dot-net-mvc %}">Web Application Development in Fsharp using ASP.NET MVC</a></p>
</blockquote>

<p>In the <a href="{% post_url 2014-12-17-phonecat-backend-using-web-api-and-typeproviders %}">last blog post</a> we have created web-api endpoints which serve the data for the home page and in this blog post we are going to create views of the phones and manufacturers using <a href="http://en.wikipedia.org/wiki/ASP.NET_Razor_view_engine">Razor</a>.</p>

<h3 id="phone-view">Phone View</h3>
<p>{% img /images/fsharp_phonecat/step_2/Phone.png %}</p>

<p>As we did it in the step-1 we are going to start with the controller which serves the phone view. Let’s get started by creating a source file in <strong>Web</strong> project under the folders <em>Controllers</em> with the name <code>PhoneController</code></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>type PhoneController(phones : seq&lt;Phone&gt;) =
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  inherit Controller()
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  member this.Show (id : string) = 
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    let phone = phones |&gt; Seq.find (fun p -&gt; p.Id = id) |&gt; PhoneViewModel.ToPhoneViewModel 
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>    this.View(phone)
</pre></div>
</div>
</div>

<p>The action method <code>Show</code> just picks the phone with the given id, converts the selected phone to a view model and returns the view.</p>

<p>The <code>phones</code> data which is being passed to the controller is actually a domain model representing the data that are required to show in the UI. Let’s create it in the <em>Domain</em> project. Create a source file in the <strong>Domain</strong> project and name it as <code>Catalog</code>.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace PhoneCat.Domain
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>open PhoneCat.Domain.Measures
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>module Catalog =    
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  type Display = {
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    ScreenResolution : string
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    ScreenSize : float&lt;inch&gt;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    TouchScreen : bool
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  }
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  type Storage = {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    Flash : float&lt;MB&gt;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    Ram : float&lt;MB&gt;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>  }
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>  type Android = {
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    OS : string
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    UI : string
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>  }
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>  type Camera = {
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    Features : seq&lt;string&gt;
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>    Primary : string
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>  }
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>  type Phone = {
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>    Id : string
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>    Name : string
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>    Description : string
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>    Android : Android
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>    Camera : Camera
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>    Display : Display
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>    Weight : float&lt;g&gt;
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>    Storage : Storage
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>    Images : seq&lt;string&gt;
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>  }
</pre></div>
</div>
</div>
<p>It’s a <a href="http://fsharpforfunandprofit.com/series/understanding-fsharp-types.html">typical type definition</a> in fsharp which describes the domain model <code>Phone</code>. Also if you remember we have already created a type with the same name <code>Phone</code> in <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/1/Domain/Production.fs#L29-L33">the previous step</a>. Though they share the name both are being used for different purposes. One for showing all the details of a phone and other one is for showing only few details about a phone. </p>

<p>This is what we call us <a href="http://martinfowler.com/bliki/BoundedContext.html">bounded context in DDD</a>. In fsharp we can easily achieve it using modules with less verbosity.</p>

<p>We have also used another awesome feature of fsharp called <a href="http://fsharpforfunandprofit.com/posts/units-of-measure/">units-of-measure</a> which help us <a href="http://en.wikipedia.org/wiki/Mars_Climate_Orbiter#Cause_of_failure">avoid failures in unit-coversion</a> by providing strong typed data.</p>

<p>In the later posts we will be extending the domain based on theses measure types right now it just expresses the domain correct. These measure types are not created yet so lets create them by adding a source file in <strong>Domain</strong> project with the name <code>Measures</code></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace PhoneCat.Domain
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>module Measures = 
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  [&lt;Measure&gt;] type inch
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  [&lt;Measure&gt;] type g
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  [&lt;Measure&gt;] type MB
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  let private toUOM (measureString : string) stringToReplace (uom : float&lt;_&gt;) = 
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    let value = 
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>      if measureString = &quot;&quot; then 0.
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>      else measureString.Replace(stringToReplace, &quot;&quot;) |&gt; float
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    value |&gt; ((*) uom)
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>  
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>  let toInch (inchStr : string) = toUOM inchStr &quot;inches&quot; 1.0&lt;inch&gt;
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>  let toGram (weightStr : string) = toUOM weightStr &quot;grams&quot; 1.0&lt;g&gt;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>  let toMB (storageStr : string) = toUOM storageStr &quot;MB&quot; 1.0&lt;MB&gt;
</pre></div>
</div>
</div>

<p>We have defined types to represents measures in inch, gram and megabytes. We have also added few utility methods to translate the raw string to strongly typed data which does the following</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>&quot;200.5inches&quot; to 200.5&lt;inch&gt;
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>&quot;1200MB&quot; to 1200.&lt;MB&gt;
</pre></div>
</div>
</div>
<p>With the domain model in place the next step is to populate this domain model from the data-store. To do it we are going to reuse the PhoneTypeProvider that we have <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/1/DataAccess/TypeProviders.fs#L25">created in the step-1</a>. Since it has all the properties that we needed, we just need to add a function which does the mapping.</p>

<p>Open <code>TypeProviders</code> and add the below function</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>let ToCatalogPhone(phone : PhoneTypeProvider.Root) = 
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  let android = { OS = phone.Android.Os; UI = phone.Android.Ui }
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>      
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  let camera = 
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    { Features = phone.Camera.Features
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>      Primary = phone.Camera.Primary }        
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>      
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  let display = 
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    { ScreenResolution = phone.Display.ScreenResolution
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>      ScreenSize = toInch phone.Display.ScreenSize
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>      TouchScreen = phone.Display.TouchScreen }
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>  let storage = 
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    { Flash = toMB phone.Storage.Flash
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>      Ram = toMB phone.Storage.Ram}
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>  { Id = phone.Id
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    Name = phone.Name
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    Description = phone.Description
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    Android = android
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    Camera = camera
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    Display = display
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    Weight = toGram phone.SizeAndWeight.Weight
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>    Storage = storage 
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>    Images = phone.Images}
</pre></div>
</div>
</div>
<p>We are leveraging the utility functions <code>toGram</code>, <code>toMB</code> defined above as part of measure types and do seamless mapping of domain model from data store.</p>

<p>The next step is wiring the controller with the domain model and the data-store. We are going to follow the same <strong>Composition Root</strong> design as we <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/1/Web/Infrastructure.fs#L19-38">did in step-1</a></p>

<p>Add a source file in the <em>Web</em> project with the name <code>MvcInfrastructure</code> and add the following code</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace PhoneCat.Web
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>open PhoneCat.DataAccess
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>open PhoneCat.Domain
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>open PhoneCat.Web.Controllers
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>open System
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>open System.Web.Mvc
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>module MvcInfrastructure = 
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  type CompositionRoot(phones : seq&lt;PhoneTypeProvider.Root&gt;) = 
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    inherit DefaultControllerFactory() with
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>      override this.GetControllerInstance(requestContext, controllerType) = 
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        if controllerType = typeof&lt;HomeController&gt; then 
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>          let homeController = new HomeController()
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>          homeController :&gt; IController
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        else if controllerType = typeof&lt;PhoneController&gt; then
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>          let phones' = phones |&gt; Seq.map TypeProviders.ToCatalogPhone
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>          let phoneController = new PhoneController(phones')
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>          phoneController :&gt; IController
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>        else
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>          raise &lt;| ArgumentException((sprintf &quot;Unknown controller type requested: %A&quot; controllerType))
</pre></div>
</div>
</div>

<p>Similar to step-1 we are creating the composition root by passing the phones data and doing the wiring of different components.</p>

<p>Since we have created our custom ControllerFactory, we need to update the MVC configuration to use it when the framework creates the controllers.</p>

<p>Update the ```Global.asax.fs`` file as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>member x.Application_Start() =
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  let phones = GitHubRepository.getPhones()
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  AreaRegistration.RegisterAllAreas()
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  GlobalConfiguration.Configure(new Action&lt;HttpConfiguration&gt;(fun config -&gt; Global.RegisterWebApi(config, phones)))
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  Global.RegisterFilters(GlobalFilters.Filters)
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>  Global.RegisterRoutes(RouteTable.Routes)
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>  ControllerBuilder.Current.SetControllerFactory(MvcInfrastructure.CompositionRoot(phones))
<span class="line-numbers"><a href="#n8" name="n8">8</a></span>  BundleConfig.RegisterBundles BundleTable.Bundles
</pre></div>
</div>
</div>
<p>In the last step the we have retrieved the phones data <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/1/Web/Global.asax.fs#L65">inside the RegisterWebApi method</a> and in this step we have moved it outside so that it can be used by both MVC Controllers and Web-Api controllers.</p>

<p>We have also changed the signature of RegisterWebApi method. In the <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/1/Web/Global.asax.fs#L51">earlier step</a> it gets the configuration parameter alone and now it has two parameters <code>httpConfiguration</code> and <code>phones</code></p>

<p>The next pending task in Phone View is translating the Phone Domain model to Phone View Model. Add the Phone View model in the <code>PhoneController</code> created before and update it us below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>type PhoneViewModel = 
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    Name : string
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    Description : string
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    Os : string
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    Ui : string
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    Flash : string
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    Ram : string
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    Weight : string
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    ScreenResolution : string
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    ScreenSize : string
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    TouchScreen : string
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    Primary : string
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    Features : seq&lt;string&gt;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    Images : seq&lt;string&gt;    
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>  }
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>  with static member ToPhoneViewModel(phone : Phone) =
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    let roundToDigits (value:float) = String.Format(&quot;{0:0.00}&quot;, value)
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    let concatWithSpace str2 str1 = str1 + &quot; &quot; + str2
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    let uomToString (measureValue: float&lt;_&gt;) measureName =
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>      measureValue |&gt; float |&gt; roundToDigits |&gt; concatWithSpace measureName
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>    { 
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>      Name = phone.Name
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>      Description = phone.Description
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>      Os = phone.Android.OS
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>      Ui = phone.Android.UI
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>      Flash = phone.Storage.Flash |&gt; int |&gt; sprintf &quot;%d MB&quot;
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>      Ram =  phone.Storage.Ram |&gt; int |&gt; sprintf &quot;%d MB&quot;
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>      Weight = uomToString phone.Weight &quot;grams&quot;
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>      ScreenResolution = phone.Display.ScreenResolution
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>      ScreenSize = uomToString phone.Display.ScreenSize &quot;inches&quot;
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>      TouchScreen = if phone.Display.TouchScreen then &quot;Yes&quot; else &quot;No&quot;
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>      Primary = phone.Camera.Primary
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>      Features = phone.Camera.Features
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>      Images = phone.Images
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>    }
</pre></div>
</div>
</div>
<p>With all in place, we just need to create a razor view with the name <code>Show.cshtml</code> inside the <strong>View</strong> -&gt; <strong>Phone</strong> directory of <em>Web</em> project and update it <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/2/Web/Views/Phone/Show.cshtml">as mentioned here.</a> </p>

<p>That’s it. Phone View is up and running! Click the Phone Links in the Home Page it will take you to the Phones View Page.</p>

<h3 id="manufacturers-view">Manufacturers View</h3>
<p>{% img /images/fsharp_phonecat/step_2/Manufacturer.png %}<br />
Manufactures View follows the similar steps that we have used to create the Phone View. It displays the Phones manufactured by a selected manufacturer in the home page.</p>

<p>Let’s start from the controller. Create a controller in the <strong>Web</strong> project with the name <code>ManufacturerController</code></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace PhoneCat.Web.Controllers
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>open System.Web
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>open System.Web.Mvc
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>open PhoneCat.Domain
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>open System
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>type ManufacturerViewModel = {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  Name : string
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  Phones : seq&lt;Phone&gt;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>}
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>with static member ToManufacturerViewModel (name, phones) =
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>      {Name = ManufacturerName.ToString name; Phones = phones}
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>type ManufacturerController 
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>  (
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    getPhones : ManufacturerName -&gt; (ManufacturerName * seq&lt;Phone&gt;)
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>  ) =
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>  inherit Controller()
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>  
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>  member this.Show (id : string) = 
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    let viewModel = 
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>      id 
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>      |&gt; ManufacturerName.ToManufacturerName
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>      |&gt; getPhones
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>      |&gt; ManufacturerViewModel.ToManufacturerViewModel
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>    this.View(viewModel)
</pre></div>
</div>
</div>

<p>The <code>ManufacturerController</code> depends on the function <code>getPhones</code> which gives the Phones manufactured by the given manufacturer. The action method <code>Show</code> converts given id to the manufaturer name,  gets the Phones, converts them to <code>ManufacturerViewModel</code> and renders the view.</p>

<p>The domain model <code>Phone</code> mentioned here is the one that we have <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/1/Domain/Production.fs#L29-L33">already created in step-1</a>. The <code>getPhones</code> domain function is yet to be created. </p>

<p>Open <code>Phones</code> file in the <em>Domain</em> project and add the <code>getPhonesOfManufacturer</code> function.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>let getPhonesOfManufacturer (phones : seq&lt;Phone&gt;) (manufacturerName) =
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>    let phones' = 
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>      phones
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>      |&gt; Seq.filter (fun p -&gt; ManufacturerName.ToManufacturerName p.Name = manufacturerName)
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>    (manufacturerName, phones')
</pre></div>
</div>
</div>
<p>The <code>getPhonesOfManufacturer</code> function takes a sequence of phones and a manufacturer name, filters them for the given manufacturer and return a <a href="http://fsharpforfunandprofit.com/posts/tuples/">tuple</a> that contain the manufacturer name and the sequence of phones.</p>

<p>As we have already created the data-store functions which serves the required data, we just need to wire up the controller.</p>

<p>Update <code>MvcInfrastructure</code> file in the <em>Web</em> project to create <code>ManufacturerController</code></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>module MvcInfrastructure = 
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  type CompositionRoot(phones : seq&lt;PhoneTypeProvider.Root&gt;) = 
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    inherit DefaultControllerFactory() with
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>      override this.GetControllerInstance(requestContext, controllerType) = 
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        // ... Existing code ignored for brevity 
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        else if controllerType = typeof&lt;ManufacturerController&gt; then
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>          let getPhonesByManufactuerName = phones |&gt; Seq.map TypeProviders.ToPhone |&gt; Phones.getPhonesOfManufacturer
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>          let manufacturerController = new ManufacturerController(getPhonesByManufactuerName)
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>          manufacturerController :&gt; IController
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        else
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>          raise &lt;| ArgumentException((sprintf &quot;Unknown controller type requested: %A&quot; controllerType))
</pre></div>
</div>
</div>

<p>Thanks to the <a href="http://fsharpforfunandprofit.com/posts/partial-application/">partial function</a> we have partially applied the first parameter alone for the <code>Phones.getPhonesOfManufacturer</code> function which has the signature </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>seq&lt;Phone&gt; -&gt; ManufacturerName -&gt; seq&lt;Phone&gt;
</pre></div>
</div>
</div>
<p>and created a new function on the fly with the signature </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>ManufacturerName -&gt; seq&lt;Phone&gt;
</pre></div>
</div>
</div>
<p>which is the exactly the function that is needed by the <code>ManufacturerController</code></p>

<p>The final step is to create a razor view with the name <code>Show.cshtml</code> inside the <strong>View</strong> -&gt; <strong>Manufacturer</strong> directory of <strong>Web</strong> project and update it <a href="https://github.com/tamizhvendan/fsharp-phonecat/blob/2/Web/Views/Manufacturer/Show.cshtml">as mentioned here.</a> </p>

<h3 id="summary">Summary</h3>
<p>In this blog post we have seen how to create MVC Razor views in fsharp. You can find the <a href="https://github.com/tamizhvendan/fsharp-phonecat/tree/2">source code in the github repository</a>. In the later posts we will be adding more interactivity. Stay tuned !!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Step 1 - Phonecat backend using Web Api and TypeProviders]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2014/12/17/phonecat-backend-using-web-api-and-typeproviders/"/>
    <updated>2014-12-17T17:31:44+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2014/12/17/phonecat-backend-using-web-api-and-typeproviders</id>
    <content type="html"><![CDATA[<blockquote>
  <p>This is step 1 of my blog series on <a href="{% post_url 2014-12-10-web-application-development-in-fsharp-using-asp-dot-net-mvc %}">Web Application Development in Fsharp using ASP.NET MVC</a></p>
</blockquote>

<p>In the <a href="{% post_url 2014-12-10-step-0-setting-up-the-fsharp-phonecat-solution %}">last blog post</a> we have created the basic home page of phone cat with the placeholders and in this post we are going it wire the home page with the backend web apis.</p>

<p>{% img /images/fsharp_phonecat/step_1/home_page.png %}</p>

<p>As the above screenshot indicates we are going to develop three web api endpoints which serve the data to the front-end and we are going to use the existing json data available in <a href="https://github.com/angular/angular-phonecat/tree/master/app/phones">angular-phonecat</a> repository as our backend data store.</p>

<p>Initially I’ve planned to include TDD steps in this post but to keep it simple I am ignoring it. If you are interested in the tests that I’ve written check the <a href="https://github.com/tamizhvendan/fsharp-phonecat/tree/1">source code.</a></p>

<h3 id="promotions-api">Promotions Api</h3>

<p>Let’s start with the promotions api which serves the data of three recently launched mobile phones. The first step is to create an ApiController called “PromotionsController”. You can create it by right clicking on the “Controllers” directory in the <strong>Web</strong> project and select <strong>Add -&gt; Source file</strong>. In the dialog box, name it as “PromotionsController”</p>

<p>After creating, update the controller with the dependencies as mentioned below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace Web.Controllers
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>open System.Web.Http
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>open PhoneCat.Domain
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>[&lt;RoutePrefix(&quot;api/promotions&quot;)&gt;]
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>type PromotionsController
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  (
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    getPromotions : seq&lt;PhoneIndex&gt; -&gt; seq&lt;PromotionPhone&gt;,
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    phoneIndexes: seq&lt;PhoneIndex&gt;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>  ) =
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  inherit ApiController()
</pre></div>
</div>
</div>

<p>The <code>PromotionsController</code> has two dependencies. </p>

<ul>
  <li>
    <p><code>getPromotions</code> is a function a that takes a sequence of a domain model <code>PhoneIndex</code> and returns the sequence of domain model <code>PromotionPhone</code> which represents the phones that are recently launched.</p>
  </li>
  <li>
    <p><code>phoneIndexes</code> is a sequence of domain model <code>PhoneIndex</code> that represents the phones available in the backend data store.</p>
  </li>
</ul>

<p>These domain models currently not exists, so add them in the domain project as mentioned below</p>

<p>Right click on the domain project and select <strong>Add -&gt; Source file</strong>. In the dialog box, name it as “Promotions”. It creates a fsharp module with the name <code>Promotions</code> and add the <code>PromotionPhone</code> domain model</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace PhoneCat.Domain
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>[&lt;AutoOpen&gt;]
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>module Promotions = 
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  type PromotionPhone = {
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    Id : string
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    ImageUrl : string
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    Name : string
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  }
</pre></div>
</div>
</div>
<p>Similarly, create an another source file called <code>Production</code> and add the domain model <code>PhoneIndex</code></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace PhoneCat.Domain
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>[&lt;AutoOpen&gt;]
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>module Production = 
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  type PhoneIndex =
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    { Id : string
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>      Name : string
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>      ImageUrl : string
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>      Age : int }
</pre></div>
</div>
</div>

<p>The <code>Age</code> property represents the age of the phone since its launch (so lower is younger!). Now the domain models are ready, the next step is to create an end point to expose it. </p>

<p>Let’s add a action method in PromotionsController which does the same</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>  [&lt;Route(&quot;&quot;)&gt;]
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  member this.Get () = 
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    getPromotions phoneIndexes
</pre></div>
</div>
</div>

<p>The scaffolding is ready and the next step is to add the domain method <code>getPromotions</code> which does the actual business logic of giving recently launched phones.</p>

<p>Add the <code>getPromotions</code> function in the <code>Promotions</code> file as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>let getPromotions (phoneIndexes : seq&lt;PhoneIndex&gt;) = 
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  phoneIndexes 
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  |&gt; Seq.filter (fun phone -&gt; phone.Age &lt; 3) 
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  |&gt; Seq.map (fun phone -&gt; {Id = phone.Id; Name = phone.Name; ImageUrl = phone.ImageUrl})
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>
</pre></div>
</div>
</div>

<p>The <code>getPromotions</code> just filters the phones with the age less than 3 and map them to the corresponding <code>PromotionPhone</code> types.</p>

<p>Now its time to get the actual data from the data store. As I have mentioned earlier we will be using <a href="https://github.com/angular/angular-phonecat/tree/master/app/phones">angular-phonecat</a> repository as our data store. To access the data we will be using <a href="http://fsharp.github.io/FSharp.Data/library/JsonProvider.html">JsonTypeProvider</a>.</p>

<p>In the <em>DataAccess</em> project install the nuget package <a href="https://www.nuget.org/packages/FSharp.Data">FSharp.Data</a> and add a source file <code>TypeProviders</code>. Then update it with the type provider for Phone Index</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace PhoneCat.DataAccess
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>open FSharp.Data
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>open PhoneCat.Domain
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>[&lt;AutoOpen&gt;]
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>module TypeProviders =
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  [&lt;Literal&gt;]
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  let private samplePhoneIndexes = &quot;&quot;&quot;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  [{
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>      &quot;age&quot;: 1,
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>      &quot;id&quot;: &quot;id0&quot;,
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>      &quot;imageUrl&quot;: &quot;id0.jpg&quot;,
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>      &quot;name&quot;: &quot;Name0&quot;,
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>      &quot;snippet&quot;: &quot;Sample Snippet0&quot;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>  },{
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>      &quot;age&quot;: 2,
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>      &quot;id&quot;: &quot;id1&quot;,
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>      &quot;imageUrl&quot;: &quot;id1.jpg&quot;,
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>      &quot;name&quot;: &quot;Name1&quot;,
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>      &quot;snippet&quot;: &quot;Sample Snippet2&quot;
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>  }]
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>  &quot;&quot;&quot;
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>  
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>  type PhoneIndexTypeProvider = JsonProvider&lt;samplePhoneIndexes&gt;
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>  let ToPhoneIndex (phoneIndex : PhoneIndexTypeProvider.Root) =
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>    { Id = phoneIndex.Id; Name = phoneIndex.Name; Age = phoneIndex.Age; ImageUrl = phoneIndex.ImageUrl }
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>
</pre></div>
</div>
</div>

<p>The <code>ToPhoneIndex</code> is a utility function which converts the data store model <code>PhoneIndexTypeProvider.Root</code> to the domain model <code>PhoneIndex</code></p>

<p>Now we got the type provide for <code>PhoneIndex</code>, the next step is populating it from the github repository. To do that add a source file <code>GitHubRepository</code> and update it as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>namespace PhoneCat.DataAccess
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>open PhoneCat.Domain
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>module GitHubRepository = 
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  [&lt;Literal&gt;]
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  let private gitHubRepoUrl = &quot;https://raw.githubusercontent.com/angular/angular-phonecat/master/app/phones/&quot;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  let private phoneIndexes = PhoneIndexTypeProvider.Load(gitHubRepoUrl + &quot;phones.json&quot;)
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  let getPhoneIndexes () = phoneIndexes
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>
</pre></div>
</div>
</div>

<p>That’s it! just three line of code to get the data from the <a href="https://raw.githubusercontent.com/angular/angular-phonecat/master/app/phones/phones.json">angular-phonecat repo</a> and map to the equivalent strongly typed models  </p>

<h4 id="composition-root">Composition Root</h4>

<p>Now we need to wire up the controller with the domain and the data access. We can use a <a href="http://www.hanselman.com/blog/ListOfNETDependencyInjectionContainersIOC.aspx">Dependency Injection Container</a> to achieve it. In fact it used to be my default decision. But after reading this <a href="http://blog.ploeh.dk/2012/11/06/WhentouseaDIContainer/">wonderful blog post</a> by <a href="https://twitter.com/ploeh">Mark Seeman</a> I have actually started rethinking about dependency injection. In this sample application we are going to use the <a href="http://blog.ploeh.dk/2011/07/28/CompositionRoot/">Composition Root</a> as suggested by Mark Seeman.</p>

<p>In the <em>Web</em> project create a source file with the name <code>Infrastructure</code> and add the following composition root</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace PhoneCat.Web
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>open System
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>open System.Web.Http.Dispatcher
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>open System.Web.Http.Controllers
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>open Web.Controllers
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>open PhoneCat.DataAccess
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>open PhoneCat.Domain
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>module Infrastructure =       
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  type CompositionRoot 
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    (
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>      phoneIndexes : seq&lt;PhoneIndexTypeProvider.Root&gt;  
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    ) =                
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    interface IHttpControllerActivator with           
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>      member this.Create(request, controllerDescriptor, controllerType) =
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>          
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>        let phoneIndexes' = phoneIndexes |&gt; Seq.map TypeProviders.ToPhoneIndex
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>        if controllerType = typeof&lt;PromotionsController&gt; then
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>            let promotionsController = new PromotionsController(getPromotions, phoneIndexes')
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>            promotionsController :&gt; IHttpController
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>        else
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>            raise &lt;| ArgumentException((sprintf &quot;Unknown controller type requested: %A&quot; controllerType))
</pre></div>
</div>
</div>

<p>We have actually created a custom implementation of <code>IHttpControllerActivator</code> as mentioned <a href="http://blog.ploeh.dk/2012/09/28/DependencyInjectionandLifetimeManagementwithASP.NETWebAPI/">here</a> which takes care of initializing the controllers by wiring the data store and the domain functions with the controller</p>

<p>The only pending task is tell ASP.NET Web Api to use this composition root. Update the <em>Global.asax.fs</em> file as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>static member RegisterWebApi(config: HttpConfiguration) =
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>       
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  // existing configuration will be here
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  // Additional Web API settings
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>  let phoneIndexes = GitHubRepository.getPhoneIndexes()
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>  config.Services.Replace(typeof&lt;IHttpControllerActivator&gt;, CompositionRoot(phoneIndexes))
</pre></div>
</div>
</div>
<p>We have done an optimization by getting the phone indexes from the github when the application is starting, so that any requests to the application doesn’t get the data from github (typical enterprise performance improvement!).</p>

<h3 id="manufacturers-api">Manufacturers Api</h3>

<p>We are going to create the Manufacturers Api in the same way as Promotions Api. Let’s start from <code>ManufacturersController</code></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace Web.Controllers
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>open System.Web.Http
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>open PhoneCat.Domain
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>type ManufacturerViewModel = { Name : string }
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>[&lt;RoutePrefix(&quot;api/manufactures&quot;)&gt;]
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>type ManufacturersController
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  (
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    getManufacturerNames : seq&lt;Phone&gt; -&gt; seq&lt;ManufacturerName&gt;,
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    phones : seq&lt;Phone&gt;              
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>  ) = 
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>  inherit ApiController()
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>  [&lt;Route(&quot;&quot;)&gt;]
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>  member this.Get () =
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    getManufacturerNames phones
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    |&gt; Seq.distinct
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    |&gt; Seq.map (fun name -&gt; {Name = ManufacturerName.ToString name})
</pre></div>
</div>
</div>

<p>As <code>PromotionsController</code>, <code>ManufacturersController</code> has also two dependencies.</p>

<ul>
  <li>
    <p><code>getManufacturerNames</code> is a function takes a sequence of domain model <code>Phone</code> and returns the sequence of domain model <code>ManufacturerName</code> which represents the manufacturer names of the given phones.</p>
  </li>
  <li>
    <p><code>phones</code> is a sequence of domain model ```Phone`` that represents the phones available in the backend data store</p>
  </li>
</ul>

<p>The <code>Get</code> method in the <code>ManufacturersController</code> returns the manufacturer names for the given phones</p>

<p>The <code>ManufacturerViewModel</code> is just a DTO that is used to share the data across the wire.</p>

<p>The next step is to add the domain models. In the <code>Production</code> file of <em>Domain</em> project add the following</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>type ManufacturerName = 
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  Samsung | Motorola | Dell | LG | TMobile | Sanyo | Unknown
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  static member ToString = function           
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>      | Samsung -&gt; &quot;Samsung&quot;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>      | Motorola -&gt; &quot;Motorola&quot;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>      | Dell -&gt; &quot;Dell&quot;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>      | LG -&gt; &quot;LG&quot;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>      | TMobile -&gt; &quot;T-Mobile&quot;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>      | Sanyo -&gt; &quot;Sanyo&quot;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>      | Unknown -&gt; &quot;Unknown&quot;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>  static member ToManufacturerName (name : string) =
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>      match name.ToLower() with
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>      | n when n.Contains(&quot;samsung&quot;) -&gt; Samsung
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>      | n when n.Contains(&quot;motorola&quot;) -&gt; Motorola
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>      | n when n.Contains(&quot;dell&quot;) -&gt; Dell
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>      | n when n.Contains(&quot;lg&quot;) -&gt; LG
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>      | n when n.Contains(&quot;t-mobile&quot;) -&gt; TMobile
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>      | n when n.Contains(&quot;sanyo&quot;) -&gt; Sanyo
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>      | n when n.Contains(&quot;nexus&quot;) -&gt; Samsung
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>      | _ -&gt; Unknown
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>type Phone = 
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>  { Id : string
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>    Name : string
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>    Description : string
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>    ImageUrl : string }
</pre></div>
</div>
</div>
<p>As the backend data-store doesn’t directly gives the manufacturer name, we will be adding two <strong>static</strong> members that derives the manufacturer name from the phone name. The <code>ToString</code> function translates to the domain model to its equivalent string version</p>

<p>After defining the domain models, add the business logic for the getting the manufacturer names from the phone in the new source file <code>Phones</code> of the <em>Domain</em> project.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace PhoneCat.Domain
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>[&lt;AutoOpen&gt;]
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>module Phones =    
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  let getManufacturerNames (phones : seq&lt;Phone&gt;) = 
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    phones
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    |&gt; Seq.map (fun p -&gt; ManufacturerName.ToManufacturerName p.Name)
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
</pre></div>
</div>
</div>
<p>The <code>getManufacturerNames</code> is a straight forward function that map given the phones to its equivalent manufacture names.</p>

<p>The next step would be fetching the phones from the data-store. </p>

<p>Let’s start by defining a type provider for the phone. Update the <code>TypeProviders</code> module in the <em>DataAccess</em> project as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>[&lt;Literal&gt;]
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>let private samplePhoneJson = &quot;&quot;&quot;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>{
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  &quot;additionalFeatures&quot;: &quot;Trackball&quot;, 
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  &quot;android&quot;: {
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>      &quot;os&quot;: &quot;Android 2.2&quot;, 
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>      &quot;ui&quot;: &quot;&quot;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  }, 
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  &quot;availability&quot;: [
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>      &quot;Sprint&quot;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>  ], 
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  &quot;battery&quot;: {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>      &quot;standbyTime&quot;: &quot;&quot;, 
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>      &quot;talkTime&quot;: &quot;4 hours&quot;, 
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>      &quot;type&quot;: &quot;Lithium Ion (Li-Ion) (1130 mAH)&quot;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>  }, 
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>  &quot;camera&quot;: {
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>      &quot;features&quot;: [
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>          &quot;Video&quot;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>      ], 
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>      &quot;primary&quot;: &quot;3.2 megapixels&quot;
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>  }, 
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>  &quot;connectivity&quot;: {
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>      &quot;bluetooth&quot;: &quot;Bluetooth 2.1&quot;, 
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>      &quot;cell&quot;: &quot;CDMA2000 1xEV-DO Rev.A&quot;, 
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>      &quot;gps&quot;: true, 
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>      &quot;infrared&quot;: false, 
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>      &quot;wifi&quot;: &quot;802.11 b/g&quot;
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>  }, 
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>  &quot;description&quot;: &quot;Zio uses CDMA2000 1xEV-DO rev&quot;, 
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>  &quot;display&quot;: {
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>      &quot;screenResolution&quot;: &quot;WVGA (800 x 480)&quot;, 
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>      &quot;screenSize&quot;: &quot;3.5 inches&quot;, 
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>      &quot;touchScreen&quot;: true
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>  }, 
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>  &quot;hardware&quot;: {
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>      &quot;accelerometer&quot;: true, 
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>      &quot;audioJack&quot;: &quot;3.5mm&quot;, 
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>      &quot;cpu&quot;: &quot;600MHz Qualcomm MSM7627&quot;, 
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>      &quot;fmRadio&quot;: false, 
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>      &quot;physicalKeyboard&quot;: false, 
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>      &quot;usb&quot;: &quot;USB 2.0&quot;
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>  }, 
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>  &quot;id&quot;: &quot;sanyo-zio&quot;, 
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>  &quot;images&quot;: [
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>      &quot;img/phones/sanyo-zio.0.jpg&quot;, 
<span class="line-numbers"><a href="#n47" name="n47">47</a></span>      &quot;img/phones/sanyo-zio.1.jpg&quot;, 
<span class="line-numbers"><a href="#n48" name="n48">48</a></span>      &quot;img/phones/sanyo-zio.2.jpg&quot;
<span class="line-numbers"><a href="#n49" name="n49">49</a></span>  ], 
<span class="line-numbers"><strong><a href="#n50" name="n50">50</a></strong></span>  &quot;name&quot;: &quot;SANYO ZIO&quot;, 
<span class="line-numbers"><a href="#n51" name="n51">51</a></span>  &quot;sizeAndWeight&quot;: {
<span class="line-numbers"><a href="#n52" name="n52">52</a></span>      &quot;dimensions&quot;: [
<span class="line-numbers"><a href="#n53" name="n53">53</a></span>          &quot;58.6 mm (w)&quot;, 
<span class="line-numbers"><a href="#n54" name="n54">54</a></span>          &quot;116.0 mm (h)&quot;, 
<span class="line-numbers"><a href="#n55" name="n55">55</a></span>          &quot;12.2 mm (d)&quot;
<span class="line-numbers"><a href="#n56" name="n56">56</a></span>      ], 
<span class="line-numbers"><a href="#n57" name="n57">57</a></span>      &quot;weight&quot;: &quot;105.0 grams&quot;
<span class="line-numbers"><a href="#n58" name="n58">58</a></span>  }, 
<span class="line-numbers"><a href="#n59" name="n59">59</a></span>  &quot;storage&quot;: {
<span class="line-numbers"><strong><a href="#n60" name="n60">60</a></strong></span>      &quot;flash&quot;: &quot;130MB&quot;, 
<span class="line-numbers"><a href="#n61" name="n61">61</a></span>      &quot;ram&quot;: &quot;256MB&quot;
<span class="line-numbers"><a href="#n62" name="n62">62</a></span>  }
<span class="line-numbers"><a href="#n63" name="n63">63</a></span>}
<span class="line-numbers"><a href="#n64" name="n64">64</a></span>
<span class="line-numbers"><a href="#n65" name="n65">65</a></span>&quot;&quot;&quot;
<span class="line-numbers"><a href="#n66" name="n66">66</a></span>
<span class="line-numbers"><a href="#n67" name="n67">67</a></span>type PhoneTypeProvider = JsonProvider&lt;samplePhoneJson&gt;
<span class="line-numbers"><a href="#n68" name="n68">68</a></span>
<span class="line-numbers"><a href="#n69" name="n69">69</a></span>let ToPhone (phone : PhoneTypeProvider.Root) =
<span class="line-numbers"><strong><a href="#n70" name="n70">70</a></strong></span>    { Id = phone.Id; Name = phone.Name; Description = phone.Description; ImageUrl = phone.Images.[0] }
</pre></div>
</div>
</div>
<p>Like <code>ToPhoneIndex</code> utility function,  <code>ToPhone</code> converts the data store model <code>PhoneTypeProvider.Root</code> to the domain model <code>Phone</code></p>

<p>Unlike the phone index, <a href="https://github.com/angular/angular-phonecat/tree/master/app/phones">angular-phonecat</a> repository stores the details of each phones in a seperate json file with the naming convention of <strong>{phoneId}.json</strong>. So, in order to get the details of all the phones, we need to fire multiple requests to get the details. Thanks to <a href="http://blogs.msdn.com/b/dsyme/archive/2010/01/09/async-and-parallel-design-patterns-in-f-parallelizing-cpu-and-i-o-computations.aspx">fsharp async workflow</a> we can easily pull all the data parallelly and populate the strongly typed domain models from them.</p>

<p>Update the <code>GitHubRepository</code> module with the code to populate the data from the data store.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace PhoneCat.DataAccess
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>open PhoneCat.Domain
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>module GitHubRepository = 
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  [&lt;Literal&gt;]
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  let private gitHubRepoUrl = &quot;https://raw.githubusercontent.com/angular/angular-phonecat/master/app/phones/&quot;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  let private phoneIndexes = PhoneIndexTypeProvider.Load(gitHubRepoUrl + &quot;phones.json&quot;)
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>  let private phoneIds = phoneIndexes |&gt; Seq.map (fun p -&gt; p.Id)
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>  let private pMap ids =
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>      seq {for id in ids -&gt; async { return id, PhoneTypeProvider.Load(gitHubRepoUrl + id + &quot;.json&quot;) }}
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>      |&gt; Async.Parallel
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>      |&gt; Async.RunSynchronously
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>  let private phones = pMap phoneIds |&gt; Map.ofSeq
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>  let getPhoneIndexes () = phoneIndexes
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>  let getPhones () = phones |&gt; Seq.map (fun p -&gt; p.Value)
</pre></div>
</div>
</div>
<p>Expressiveness is one of the reason behind my fsharp addiction. Just see the above code we have done some much thing with just few lines of code. We have fetched the details of all the phones using their ids from phone index and created an in-memory map.</p>

<p>The <code>getPhones</code> function returns the strongly typed <code>PhoneTypeProvider</code> models from the in-memory map.</p>

<p>The last thing is to wire up all the things and create the <code>ManufacturersController</code>. Update the <code>CompositionRoot</code> type in the <code>Infrastructure</code> module with the below code</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>type CompositionRoot 
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  (
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    phones : seq&lt;PhoneTypeProvider.Root&gt;,
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    phoneIndexes : seq&lt;PhoneIndexTypeProvider.Root&gt;  
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  ) =                
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  interface IHttpControllerActivator with
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  member this.Create(request, controllerDescriptor, controllerType) =
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    let phones' = phones |&gt; Seq.map TypeProviders.ToPhone
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    let phoneIndexes' = phoneIndexes |&gt; Seq.map TypeProviders.ToPhoneIndex
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    if controllerType = typeof&lt;PromotionsController&gt; then
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        let promotionsController = 
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>          new PromotionsController(getPromotions, phoneIndexes')
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        promotionsController :&gt; IHttpController
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    else if controllerType = typeof&lt;ManufacturersController&gt; then
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>        let manufacturersController = 
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>          new ManufacturersController(getManufacturerNames, phones')
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>        manufacturersController :&gt; IHttpController 
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    else
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>        raise &lt;| ArgumentException((sprintf &quot;Unknown controller type requested: %A&quot; controllerType))
</pre></div>
</div>
</div>

<p>And update the <em>Global.asax.fs</em> as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>static member RegisterWebApi(config: HttpConfiguration) =
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>       
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  // existing configuration will be here
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  // Additional Web API settings
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>  let phones = GitHubRepository.getPhones()
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>  let phoneIndexes = GitHubRepository.getPhoneIndexes()
<span class="line-numbers"><a href="#n8" name="n8">8</a></span>  config.Services.Replace(typeof&lt;IHttpControllerActivator&gt;, CompositionRoot(phones, phoneIndexes))
</pre></div>
</div>
</div>

<h3 id="top-selling-phones-api">Top Selling Phones Api</h3>

<p>Create <code>PhonesController</code> in the <em>Web</em> project and add the api to return the top selling phones</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace Web.Controllers
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>open System.Web.Http
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>open PhoneCat.Domain
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>[&lt;RoutePrefix(&quot;api/phones&quot;)&gt;]
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>type PhonesController
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  (
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    getTopSellingPhones : int -&gt; seq&lt;Phone&gt; -&gt; seq&lt;Phone&gt;,
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    phones : seq&lt;Phone&gt;              
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>  ) = 
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  inherit ApiController()
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>  [&lt;Route(&quot;topselling&quot;)&gt;]
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>  member this.GetTopSelling () =
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    getTopSellingPhones 3 phones
</pre></div>
</div>
</div>

<p>The <code>getTopSellingPhones</code> picks given count of phones from the given phones and return them.</p>

<p>In the <code>Phones</code> module of <em>Domain</em> project add the function <code>getTopSellingPhones</code></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>let getTopSellingPhones (phonesSold : seq&lt;PhoneSold&gt;) phoneCount (phones : seq&lt;Phone&gt;) = 
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  phonesSold
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  |&gt; Seq.map (fun p -&gt; p.Quantity, (phones |&gt; Seq.find (fun p' -&gt; p'.Id = p.Id)))
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  |&gt; Seq.sortBy (fun x -&gt; -(fst x))
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  |&gt; Seq.take phoneCount
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>  |&gt; Seq.map snd
</pre></div>
</div>
</div>

<p>The <code>PhoneSold</code> domain model represents how much quantity of each phone has been sold. The <code>getTopSellingPhones</code> sorts the given phones in the descending order based on the quantity being sold and return the given count of the phones from the sorting result</p>

<p>Right now the <code>PhoneSold</code> domain model is not added. So add them in the new module <code>Purchases</code> in the <em>Domain</em> project as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>namespace PhoneCat.Domain
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>[&lt;AutoOpen&gt;]
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>module Purchases =    
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  type PhoneSold = {
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>    Id : string
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>    Quantity : int
<span class="line-numbers"><a href="#n8" name="n8">8</a></span>  } 
</pre></div>
</div>
</div>

<p>The angular data-store doesn’t provide quantity sold information, so we need to get it from somewhere else. To keep it simple, we are going add an <code>InMemoryInventory</code> in <em>DataAccess</em> project as below</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>namespace PhoneCat.DataAccess
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>open PhoneCat.Domain
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>module InMemoryInventory =
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  let getPhonesSold () = [
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    { Id = &quot;motorola-xoom-with-wi-fi&quot;; Quantity = 10}
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    { Id = &quot;motorola-atrix-4g&quot;; Quantity = 24}
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    { Id = &quot;nexus-s&quot;; Quantity = 4}
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    { Id = &quot;samsung-galaxy-tab&quot;; Quantity = 41}
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    { Id = &quot;sanyo-zio&quot;; Quantity = 31}
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    { Id = &quot;motorola-xoom&quot;; Quantity = 6}
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  ]
</pre></div>
</div>
</div>

<p>As previous api’s we need wire things up and create the controller in the <code>CompositeRoot</code></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span> else if controllerType = typeof&lt;PhonesController&gt; then                    
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  let getTopSellingPhones = Phones.getTopSellingPhones (InMemoryInventory.getPhonesSold())                    
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  let phonesController = new PhonesController(getTopSellingPhones, phones') 
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  phonesController :&gt; IHttpController
</pre></div>
</div>
</div>
<p>We have used <a href="http://fsharpforfunandprofit.com/posts/partial-application/">partial application</a> of the <code>Phones.getTopSellingPhones</code> function here. Its signature is <code>seq&lt;PhoneSold&gt; -&gt; int -&gt; seq&lt;Phone&gt; -&gt; seq&lt;Phone&gt;</code><br />
but the controller expects the function with the signature <code>int -&gt; seq&lt;Phone&gt; -&gt; seq&lt;Phone&gt;</code>.</p>

<p>The expression</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>let getTopSellingPhones = Phones.getTopSellingPhones (InMemoryInventory.getPhonesSold())      
</pre></div>
</div>
</div>
<p>actually does this.</p>

<h3 id="front-end">Front-End</h3>

<p>As front-end is out of the scope of this blog post I am not covering it here. I’ve actually developed it using knockout.js.</p>

<h2 id="summary">Summary</h2>

<p>We have covered a quite a large ground here by creating three web-api endpoints in fsharp using Web Api 2. In the later posts we will be adding error handling and making it robust. The source code for this step can be found in the <a href="https://github.com/tamizhvendan/fsharp-phonecat/tree/1">github repository</a></p>
]]></content>
  </entry>
  
</feed>
