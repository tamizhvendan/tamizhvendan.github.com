<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: craftsmanship | P3 Programmer]]></title>
  <link href="http://blog.tamizhvendan.in/blog/categories/craftsmanship/atom.xml" rel="self"/>
  <link href="http://blog.tamizhvendan.in/"/>
  <updated>2017-05-01T23:13:07+05:30</updated>
  <id>http://blog.tamizhvendan.in/</id>
  <author>
    <name><![CDATA[Tamizhvendan S]]></name>
    <email><![CDATA[tamizh88@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Expressing Business Logic with F#'s Partial Active Patterns]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2016/04/28/expressing-business-logic-with-f-number-s-partial-active-patterns/"/>
    <updated>2016-04-28T20:16:14+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2016/04/28/expressing-business-logic-with-f-number-s-partial-active-patterns</id>
    <content type="html"><![CDATA[<p>Checking the state of the system and performing a requested action only if certain conditions met, is an indispensable requirement in most of the software we write. Though it is a straightforward thing to do, things will get complex/messier when we need to check multiple conditions.</p>

<p>Recently I encountered such a situation while developing a sample application for <a href="https://twitter.com/tamizhvendan/status/713365205871235072">my fsharp book</a>. Initially, I solved it with a typical nested <code>if else</code> and then I improved it by applying fsharp’s <a href="http://www.developerfusion.com/article/133772/pattern-matching-in-f-part-2-active-patterns/">Partial Active Patterns</a>.</p>

<p>In this blog post , I will be sharing what exactly I did and how it can help you to write an elegant code in fsharp.</p>

<h2 id="business-domain">Business Domain</h2>

<p>Let’s start with a description of the problem domain that we are going to solve.</p>

<p>When an individual visits a restaurant, he can place an order, specifying the list of foods he wants. The foods he ordered will be prepared by the chef and then it will be served.</p>

<p>Preparing a food should satisfy the following conditions</p>

<ul>
  <li>The Food should be a part of the order</li>
  <li>It should not be prepared already</li>
  <li>It should not be served already</li>
</ul>

<p>Serving a food should satisfy the following conditions</p>

<ul>
  <li>The Food should be a part of the order</li>
  <li>It should be prepared already</li>
  <li>It should not be served already</li>
</ul>

<p>If serving a food completes the order, we should tell that the order is served otherwise we should tell that there are some other foods to be served.</p>

<h2 id="starting-with-the-types">Starting with the types</h2>

<p>Let’s start with the types that are needed to solve our problem. If you would like to know why we need to start with the types do check out <a href="http://tomasp.net/blog/type-first-development.aspx/">this wonderful blog post</a> by <a href="https://twitter.com/tomaspetricek">Tomas Petricek</a>.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>type Food = {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  MenuNumber : int
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  Name : string
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>}
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>type Order = {
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  Foods : Food list
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>}
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>type InProgressOrder = {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>  PlacedOrder : Order
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  PreparedFoods : Food list
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>  ServedFoods : Food list
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>}
</pre></div>
</div>
</div>

<p>The names of the types and its properties clearly describe what they represent, so let’s get to the crux of the problem straight</p>

<h2 id="prepare-food">Prepare Food</h2>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>let prepareFood food ipo =
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  if List.contains food ipo.PlacedOrder.Foods  then
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    if not (List.contains food ipo.PreparedFoods) then
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>      if not (List.contains food ipo.ServedFoods) then
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>          printfn &quot;Prepare Food&quot;
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>      else
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        printfn &quot;Can not prepare already served food&quot;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    else
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>      printfn &quot;Can not prepare already prepared food&quot;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  else
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    printfn &quot;Can not prepare non ordered food&quot;
</pre></div>
</div>
</div>

<p>The <code>if else</code> conditions represent the criteria mentioned in the business domain and for the sake of simplicity we are just writing the action in the console.</p>

<h2 id="serve-food">Serve Food</h2>

<p>Let’s move on to serving food</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>let isServingFoodCompletesOrder food ipo =
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  let nonServedFoods =
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    List.except ipo.ServedFoods ipo.PlacedOrder.Foods
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  nonServedFoods = [food]
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>let serveFood food ipo =
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  if List.contains food ipo.PlacedOrder.Foods  then
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    if List.contains food ipo.PreparedFoods then
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>      if not (List.contains food ipo.ServedFoods) then
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        if isServingFoodCompletesOrder food ipo then
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>          printfn &quot;Order Served&quot;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        else
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>          printfn &quot;Still some food(s) to serve&quot;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>      else
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        printfn &quot;Can not serve already served food&quot;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    else
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>      printfn &quot;Can not serve unprepared food&quot;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>  else
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    printfn &quot;Can not serve non ordered food&quot;
</pre></div>
</div>
</div>

<p>This is called <a href="http://c2.com/cgi/wiki?ArrowAntiPattern">Arrow Anti Pattern</a> and it is obvious that this code is hard to understand and maintain.</p>

<p>It can be improved by using the techniques mentioned <a href="http://programmers.stackexchange.com/questions/47789/how-would-you-refactor-nested-if-statements">in this StackExchange’s answers</a> and also by using the <a href="https://en.wikipedia.org/wiki/Specification_pattern">specification pattern</a> from the OO World.</p>

<p>Though the specification pattern solves the problem, it has a lot of code! No offense here but it can be done in a better way.</p>

<h2 id="f-active-patterns">F# Active Patterns</h2>

<blockquote>
  <p>Active Patterns allow programmers to wrap arbitrary values in a union-like data structure for easy pattern matching. For example, its possible wrap objects with an active pattern, so that you can use objects in pattern matching as easily as any other union type. - <a href="https://en.wikibooks.org/wiki/F_Sharp_Programming/Active_Patterns">F# Programming Wiki</a></p>
</blockquote>

<p>Let’s begin by defining a partial active pattern for <code>NonOrderedFood</code> and <code>UnPreparedFood</code></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>let (|NonOrderedFood|_|) order food =
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  match List.contains food order.Foods with
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  | false -&gt; Some food
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  | true -&gt; None
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>let (|UnPreparedFood|_|) ipo food =
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  match List.contains food ipo.PreparedFoods with
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  | false -&gt; Some food
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  | true -&gt; None
</pre></div>
</div>
</div>

<p>Then for <code>AlreadyPreparedFood</code> and <code>AlreadyServedFood</code></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>let (|AlreadyPreparedFood|_|) ipo food =
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  match List.contains food ipo.PreparedFoods with
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  | true -&gt; Some food
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  | false -&gt; None
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>let (|AlreadyServedFood|_|) ipo food =
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  match List.contains food ipo.ServedFoods with
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  | true -&gt; Some food
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  | false -&gt; None
</pre></div>
</div>
</div>

<p>Finally,</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>let (|CompletesOrder|_|) ipo food =
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  let nonServedFoods =
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    List.except ipo.ServedFoods ipo.PlacedOrder.Foods
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  match nonServedFoods = [food] with
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  | true -&gt; Some food
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>  | false -&gt; None
</pre></div>
</div>
</div>

<p>With this in place we can rewrite <code>serveFood</code> function as</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>let serveFood food ipo =
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  match food with
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  | NonOrderedFood ipo.PlacedOrder _ -&gt;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    printfn &quot;Can not serve non ordered food&quot;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  | UnPreparedFood ipo _ -&gt;
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    printfn &quot;Can not serve unprepared food&quot;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  | AlreadyServedFood ipo _ -&gt;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    printfn &quot;Can not serve already served food&quot;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  | CompletesOrder ipo _ -&gt;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    printfn &quot;Order Served&quot;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>  | _ -&gt; printfn &quot;Still some food(s) to serve&quot;
</pre></div>
</div>
</div>

<blockquote>
  <p>The goal is to have code that scrolls vertically a lot… but not so much horizontally. - <a href="http://blog.codinghorror.com/flattening-arrow-code/">Jeff Atwood</a></p>
</blockquote>

<p>Now the code expressing the business logic more clearly</p>

<p>To refactor <code>prepareFood</code> to use the parial active patterns we need one more. So, let’s define it</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>let (|PreparedFood|_|) ipo food =
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  match List.contains food ipo.PreparedFoods with
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  | true -&gt; Some food
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>  | false -&gt; None
</pre></div>
</div>
</div>

<p>Now we all set to refactor <code>prepareFood</code> and here we go</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>let prepareFood food ipo =
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  match food with
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  | NonOrderedFood ipo.PlacedOrder _ -&gt;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    printfn &quot;Can not prepare non ordered food&quot;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>  | PreparedFood ipo _ -&gt;
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    printfn &quot;Can not prepare already prepared food&quot;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>  | AlreadyServedFood ipo _ -&gt;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    printfn &quot;Can not prepare already served food&quot;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  | _ -&gt; printfn &quot;Prepare Food&quot;
</pre></div>
</div>
</div>

<p>Awesome!</p>

<p>You can get the complete code in <a href="https://github.com/tamizhvendan/blog-samples/tree/master/RefactoringIfElse/src">my github repository</a></p>

<h2 id="summary">Summary</h2>

<blockquote>
  <p>F# is excellent at concisely expressing business and domain logic - <a href="https://www.thoughtworks.com/radar/languages-and-frameworks/f">ThoughtWorks Tech Radar 2012</a></p>
</blockquote>

<h3 id="related-posts">Related Posts</h3>

<p><a href="/blog/2015/04/02/step-10-refactoring-composition-root/">Refactoring Composition Root</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keep it Simple]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2016/02/01/keep-it-simple/"/>
    <updated>2016-02-01T15:51:46+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2016/02/01/keep-it-simple</id>
    <content type="html"><![CDATA[<p>Last week, I was working on a task which involves populating some PostgreSQL database tables from CSV files. Though this is a straight forward work, I’ve encountered an interesting approach while manipulating a CSV file to adhere some changes in the database schema. In this blog post, I will be sharing what it is and how it made me think better.</p>

<p>Unlike my other blog posts, this post is more on the thought process behind my approach than the code.</p>

<h3 id="the-story">The Story</h3>

<p>The CSV file that we suppose to import to a database table has the following Structure with 1000 rows</p>

<pre><code>code,value
XAS,0.23
SDR,3.21
WFZ,1.87
........
........

</code></pre>

<p>The column name <code>code</code> and <code>value</code> are just for illustration.</p>

<p>The Proposed schema change is introduce a new column called <code>year</code> with a fixed value <code>2015</code> for all the rows. So, the expected CSV file would like</p>

<pre><code>year,code,value
2015,XAS,0.23
2015,SDR,3.21
2015,WFZ,1.87
........
........
</code></pre>

<p>A Very Simple Task</p>

<p>Now, How can we solve it?</p>

<h3 id="approach-1---dont-try-this-at-your-officehome">Approach 1 - Don’t try this at your office/home</h3>

<p>Let me start with an approach number one</p>

<blockquote>
  <p>Edit all the rows manually</p>
</blockquote>

<p>It is something that you never wanted to see/do. So, let me move on to the next approach without wasting any time here</p>

<h3 id="approach-2---leverage-your-programming-skill">Approach 2 - Leverage your programming skill</h3>

<blockquote>
  <p>Pick your favorite programming language and whack the CSV file  </p>
</blockquote>

<p>I believe this would be the approach that came to your mind when you read the problem statement. A typical programmer’s instinct!</p>

<p>So, you picked your programming language ‘X’, what would be the next steps</p>

<ul>
  <li>Open the IDE/Editor - <em>Wait for it to load!</em></li>
  <li>Create a Project - <em>if required and wait for it also to load!</em></li>
  <li>Start typing - <em>and your phone rings</em></li>
  <li>Refer library documentation - <em>or Refer Stackoverflow</em></li>
  <li>Compile - <em>and wait for it</em> - <em>Ignore this step and wait for a run-time error if your programming language is dynamic</em></li>
  <li>Execute - <em>A bug -&gt; Go to Google -&gt; Stack Overflow -&gt; Change the code -&gt; Start again</em></li>
  <li>You are done!</li>
</ul>

<p><em>I’ve exaggerated some things here. If you don’t agree with any steps, just ignore that step</em></p>

<p>After 2 to 15 minutes (based on your ability &amp; the ceremony of your programming language) you have solved the problem.</p>

<p>Is it really worth? Well, It depends on the context.</p>

<p>If there are lot of CSV files which require the same change or also few more like this will about to come in the near future, then this effort really makes sense</p>

<p>But, here it is only one file which requires the change. So, I feel it is a complex response to a simple problem</p>

<h3 id="approach-3---use-a-tool">Approach 3 - Use a tool</h3>

<blockquote>
  <p>Use a shiny CSV management tool to make the changes</p>
</blockquote>

<p>It is slightly better approach than the previous one but it also has its own downsides</p>

<ul>
  <li>Googling to find the tool</li>
  <li>Download it - <em>Your office firewall is blocking that site! / Registration on the tool site / Requires Java x.x version</em></li>
  <li>Open the CSV file.</li>
  <li>Refer the tool’s documentation</li>
  <li>Get the job done</li>
</ul>

<p>You can also Microsoft Excel to achieve this. But again a heavy solution to solve a simple problem!</p>

<p>There should be a simple approach! That’s what we are going to see next.</p>

<h3 id="approach-4---find-and-replace">Approach 4 - Find And Replace</h3>

<blockquote>
  <p>Just use Find and Replace in an advanced editor</p>
</blockquote>

<p>This approach involves just three steps</p>

<ul>
  <li>Open the CSV file in an advanced text editor (notepad++, atom, sublime text, etc.,)</li>
  <li>Select all the text and press <code>tab</code></li>
  <li>Open <code>Find and Replace</code>. Find for <code>tab</code> and replace it with <code>2015,</code></li>
</ul>

<p>That’s it!</p>

<h3 id="summary">Summary</h3>

<blockquote class="twitter-tweet" lang="en"><p lang="en" dir="ltr">The older I get, the more I realize the biggest problem to solve in tech is to get people to stop making things harder than they have to be.</p>&mdash; Chad Fowler (@chadfowler) <a href="https://twitter.com/chadfowler/status/646624348028190720">September 23, 2015</a></blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An interesting JSON Model Binding behaviour in ASP.NET MVC3]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2012/04/13/interesting-json-model-binding/"/>
    <updated>2012-04-13T00:00:00+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2012/04/13/interesting-json-model-binding</id>
    <content type="html"><![CDATA[<div class="post">
    <h3>Introduction</h3>
    <p>
        <a href="http://msdn.microsoft.com/en-us/library/dd410405.aspx">Model Binding</a> is one of the coolest feature in ASP.NET MVC3.
        Like a magic wand, your form element values, <a href="http://www.json.org/">JSON values</a>, also query string values automatically get converted to the equivalent C# object and
        makes the life of the developer easier.
    </p> <p>
        The default behaviour of MVC3 model binding works well in more common scenarios.
        But in certain cases it wont work as expected, and in such situations we need to <a href="http://odetocode.com/blogs/scott/archive/2009/04/27/6-tips-for-asp-net-mvc-model-binding.aspx">
            write
            custom model binders
        </a>. Two weeks before while I was working with model binding on JSON values, I’ve encountered an interesting behaviour of JSON model binding.
    </p>

    <p>
        If a JSON property contains a string, it get bind to a string property of the equivalent C# object. But if that same JSON property contains a empty string, while model binding,
        the equivalent C# object’s property is assigned to null and not to empty string! The same happened with arrays. If it contains elements, it get bind without any problems.
        But if the array is empty it get bind to null!!
    </p> <p>
        In this blog post, we are going to get rid of this intriguing behaviour by writing a Custom JSON model binder.
        Hope it would be useful and save you some hairs <i class='emoji smile'></i>

        <h3>The Sample Application – “MyMobileStore”</h3>
    <p>
        In this blog post we are going to see a small application called “MyMobileStore”. This sample app has two features. One will help you to search the mobiles
        in the “MyMobileStore” by using the company name and the mobile types. An another feature will help you to find out the sales details of the mobiles from a given
        company for the specified mobile types.
    </p>

    <h3>Show me the code</h3>
    <p>Core classes</p>
    <p><img class="center" src="/images/JsonModelBinding/CoreClasses.png" title="" ></p>
    <p>As mentioned earlier, the two features of “MyMobileStore” are exposed as controller action methods as below</p>
    <p>
    <p><img class="center" src="/images/JsonModelBinding/MobileController.png" title="" ></p>
    <p>
        Both action methods uses a parameter of type “MobileFilter” which actually holds the filter criteria for finding out the mobiles. It has two properties,
        the companyname of the mobile and the collection of mobile types (Normal, DualSim or SmartPhone)
    </p>
    <p>
    <p><img class="center" src="/images/JsonModelBinding/MobileFilter.png" title="" ></p>
    </p> <p>
        The SearchMobiles action method retrieves all the mobiles from the repository and filter it first by the company name and then by the mobile types.
        One small tweak, if the mobile types count is more than 3, it would take only the first 3 types (Added for demo purpose). I just left the logic of SalesDetails
        action method blank to keep it simple. Both actions returns a JSON result to make them consumed by ajax.
    </p>

    <p><em>(Note: I’ve violated some design principles in the sample code as I just wanted to make this blog post as simple as possible) </em></p>

    <h3>The Problem (Opportunity in my language)</h3>
    <p>
        In a good world, if the user selected either or both the company name and the mobiles types to be filtered, then our controller in “MyMobileStore”
        will happily accepts them as a parameter and continue its work without any mishaps.
    </p>

    <p><img class="center" src="/images/JsonModelBinding/Problem.png" title="" ></p>
    <p>
        But in the bad world, if the user missed out either the company names or the mobiles types or both, ASP.NET MVC3 treat them as nulls which might cause null
        reference exception and breaks the functionality!!
    </p>
    <p><img class="center" src="/images/JsonModelBinding/BadWorld.png" title="" ></p>
    <p><img class="center" src="/images/JsonModelBinding/NullException.png" title="" ></p>

    <p>
        <em>
            (Now you might have understood why I added a tweak in the number of mobile types
            <i class='emoji smile'></i>)
        </em>
    </p>
    <h3>Possible Solutions</h3>
    <ol>
        <li>Perform null check inside the “SearchMobiles” action method and assign empty array.</li>
        <li>Write a Custom Model Binder for “MobileFilter” and perform the null check inside the model binding logic</li>
    </ol>
    <p>
        Though the option 1 is a simple and straightforward thing, what would you do if the “SalesDetails” action method works with the mobile types collection.
        You certainly need to duplicate the null checking inside it also. Let us assume that we have some more action methods in our “MyMobileStore” which has “MobileFilter”
        as their parameter. Do you still duplicate the null check there ?. Think!!
    </p>
    <p>
        If you do so, I am sorry my dear friend, you are violating the <a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself">DRY</a> principle and creating
        <a href="http://pragprog.com/the-pragmatic-programmer/extracts/software-entropy">a broken window</a> in your codebase! So, lets go ahead and write
        <a href="http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882">clean code</a> by making use of Custom Model Binder for our “MobileFilter”.
    </p>

    <h3>The Pragmatic Solution – MobileFilterModelBinder</h3>
    <p>
        <img class="center" src="/images/JsonModelBinding/MobileFilterModelBinder.png" title="" >
    </p>

    <p>
        Our custom model binder is very simple, it just makes use of Default Model binding behaviour. After the default behaviour has been done,
        it checks for null values using <a href="http://msdn.microsoft.com/en-us/library/ms173224.aspx">Null-Coalescing operator</a> and assign empty values if
        the values are null.
    </p> <p>Don’t forget add the custom model binder in the Global.asax.cs file.</p>

    <p>
        <img class="center" src="/images/JsonModelBinding/Global.png" title="" >
    </p>
    <p>Now our “MyAppStore” is robust enough to tackle the bad world!!</p>
    <p>
        <img class="center" src="/images/JsonModelBinding/NoMoreBadWorld.png" title="" >
    </p> 
    <h3>Conclusion</h3> 
    <p>In this blog post you have seen an exciting problematic behaviour of JSON model binding in ASP.NET MVC3 and a simple way to get rid of the default model 
        binding problems. In my next blog post I would share my experiences in how to unit test this custom model binders. 
    You can download the source code that I have used in this blog post from <a href="http://www.box.com/s/16dbb662bb2f94babe27">here</a></p>

</p></p></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit Testing Html Helpers in ASP.NET MVC3–The Cleaner Way]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2012/03/04/unit-testing-html-helpers-in-aspnet/"/>
    <updated>2012-03-04T00:00:00+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2012/03/04/unit-testing-html-helpers-in-aspnet</id>
    <content type="html"><![CDATA[<div class="post">
    <p>Would you like if your unit test have an assertion like this ?</p>
    <div style="text-align: center;clear:both">
        <img src="http://lh5.ggpht.com/-Z7XXVGQ3sX4/T1J73ct1gqI/AAAAAAAAASQ/qw-uSNrLoOE/image_thumb3.png?imgmax=800" />
    </div>
    <p>
        IMHO having a unit test assertion like this with a long magical string value would become a maintenance problem with additional logic being added.
        It breaks with even minor changes like “adding an extra whitespace” though it is logically correct(Browsers ignores the whitespaces while rendering html)!.
        It is harder to debug to!!
    </p>
    <p>
        How can we get rid of this long string assertion ? Is there any better way to do assertion against this long magical string ejected from a
        <a href="http://stephenwalther.com/blog/archive/2009/03/03/chapter-6-understanding-html-helpers.aspx">HtmlHelper</a> ? One thing which strikes on my mind when I come
        across this problem is why don’t we parse the string as an xml and assert against the xml element instead. It might appear like laborious at the first sight,
        but by making use of <a href="http://msdn.microsoft.com/en-us/library/system.xml.linq.xelement.aspx">XElement</a> and
        <a href="http://msdn.microsoft.com/en-us/library/bb383977.aspx">extension methods</a> we can easily do that.
    </p>

    <p>In the blog post we are going to see how can we implement this in a more cleaner way. </p>

    <p>Okay.. Enough texts.. Its time to see some code!!</p>

    <p>
        The first step is to convert the “html string” returned by the html helper to XElement. Generally most of the helpers returns
        <a href="http://stackoverflow.com/questions/2293357/what-is-an-mvchtmlstring-and-when-should-i-use-it">MvcHtmlString</a>, So, we can easily achieve this
        by writing an extension method called “ToXElement” on MvcHtmlString.
    </p>

    <div style="text-align: center;clear:both">
        <img src="http://lh4.ggpht.com/-cwtnsV7pl2c/T1J763QmH1I/AAAAAAAAASg/6QKxAEGZ5uM/image_thumb%25255B2%25255D.png?imgmax=800" />
    </div>

    <p>That’s it! All set to redefine the way custom html helpers are being tested. </p>

    <p>Fine, Let us see it in action. We will start with a handy HtmlHelper method called “Button” which would render a “Html button tag” and here is the test to assert it.</p>

    <div style="text-align: center;clear:both">
        <img src="http://lh4.ggpht.com/-Zl-hH4zYH1A/T1J7_Y9Qr3I/AAAAAAAAASw/PyWZZJMadV0/image_thumb%25255B10%25255D.png?imgmax=800" />
    </div>
    <p>
        The first test uses the ToXElement extension method and assert against the XElement’s properties whereas the second test uses the
        “magical string with tags added” to do the assertion. Now you may feel what’s wrong with this guy the second test look clean to me,
        why he is making fuss about it. Yes you are correct, the second one looks clean. But it appears to be clean as the requirement in hand is very simple.
    </p>
    <p>IMHO the custom html helpers that we are building in our real world application won’t be as simple as having a button tag with just plain caption in it. </p>
    <p>Fine, lets see the real world. Voice from your team lead <em></em></p>
    <p>
        <em>
            Hey! the Button HtmlHelper you designed has did a tremendous job. Can you make a small change on it so that it would
            <strong>generate a button with a class attribute having the value ‘appbutton’ by default</strong>.
            We need it because it make the button styling consistent with rest of our application ”
        </em>
    </p>

    <p>Let us implement the feature by starting with the test for it</p>
    <p>
        <a href="http://lh4.ggpht.com/-HScL-9YaD1s/T1J8Awk2YbI/AAAAAAAAAS4/Q3E6JlpRItM/s1600-h/image%25255B23%25255D.png">
            <img src="http://lh5.ggpht.com/-MyHzxXBfdCM/T1J8DL_KgbI/AAAAAAAAATA/Vvt1j4k-KYo/image_thumb%25255B14%25255D.png?imgmax=800" />
        </a>
    </p>
    <p>
        Now tell me is the second test clean ? I don’t think so. The generate html string is bit long now also having double quotes inside double quotes makes it hard to read.
        At the same time the first test remains robust and clean.
    </p>

    <p>
        Still not convinced, okay just go up and see the very first test that we have wrote to test the button caption.
        Do you think the <strong>hard way test</strong> with the “<strong>long magical string</strong>” still pass ??
    </p>

    <p style="text-align: center; color: #ff0000; font-weight: bold">It would fail</p>

    <p>Why ?? Here is the error message </p>
    <p>
        <a href="http://lh5.ggpht.com/-K6RjhSEMhLA/T1J8EpZAZ-I/AAAAAAAAATI/TUutsjz0XdE/s1600-h/image%25255B28%25255D.png">
            <img src="http://lh4.ggpht.com/-SpmB-mDwffk/T1J8HO3Np4I/AAAAAAAAATQ/oKxboMdbr6I/image_thumb%25255B17%25255D.png?imgmax=800" />
        </a>
    </p>
    <p>Now what would you do, if you decided to persist with the “long magical string”, then your action would be editing the test as below</p>
    <div style="text-align: center;clear:both">
        <img src="http://lh6.ggpht.com/-RJKnvJ5K8dI/T1J8LTJG_iI/AAAAAAAAATg/TAKyOA5Ej9w/image_thumb%25255B21%25255D.png?imgmax=800" />
    </div>
    <p>Nice job. Now tell me what is the difference between this one and the below one</p>
    <div style="text-align: center;clear:both">
        <a href="http://lh6.ggpht.com/-ps4dX_FO-B0/T1J8MhVBtwI/AAAAAAAAATo/u003U24qiBo/s1600-h/image%25255B42%25255D.png">
            <img src="http://lh3.ggpht.com/-i5zAV0v0JfY/T1J8O7pNIiI/AAAAAAAAATw/Fuo_4WMsFzk/image_thumb%25255B27%25255D.png?imgmax=800" />
        </a>
    </div>
    <p>
        Apart from the test method name everything is same. Is the test clean ? Is the test clearly saying what it is trying to assert ?
        What would happen if we got the requirement to add one more attribute or even more? Think !!
    </p>

    <p>But at the same time the tests which written using XElement assertion would remain healthy and their test method name mean what it is testing </p>
    <p>
        <a href="http://lh6.ggpht.com/-t5GRHpUvWSI/T1J8Qh6dvqI/AAAAAAAAAT4/WaaIvzaEKCY/s1600-h/image%25255B47%25255D.png">
            <img src="http://lh3.ggpht.com/-fQ_eFoBZqnE/T1J8TPZgtFI/AAAAAAAAAUA/1wGDDsT5J8Y/image_thumb%25255B30%25255D.png?imgmax=800" />
        </a>
    </p>
    <p>I leave it you to decide which one is cleaner. </p>
    <h4>Summary</h4>
    <p>Here is the implementation of “Button HtmlHelper” that we unit tested so far</p>
    <div style="text-align: center;clear:both">
        <img src="http://lh4.ggpht.com/-lg0jE79JCVI/T1J8Y3QGqOI/AAAAAAAAAUQ/gif78dMv6XI/image_thumb%25255B33%25255D.png?imgmax=800" />
    </div>
    <p>
        My humble request to the readers of this blog post, please take care of your “Unit tests” and give some more importance to it.
        An hour spent upfront would save a day in future.
    </p>
    <p>“Beauty is in the eye of the beholder”, If you have a better idea to do the same, kindly leave a comment, I am open to learn from you.</p>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Practice, Practice, Practice !!]]></title>
    <link href="http://blog.tamizhvendan.in/blog/2011/09/15/practice-practice-practice/"/>
    <updated>2011-09-15T00:00:00+05:30</updated>
    <id>http://blog.tamizhvendan.in/blog/2011/09/15/practice-practice-practice</id>
    <content type="html"><![CDATA[<div class="post">
<div>
	<p>In the pursuit of becoming a better programmer, I have come across lot of good things, which in fact have a lot of positive impact on my thinking, attitude and the way I approach a problem. &nbsp;One of such thing is the book “<a href="http://pragprog.com/book/cfcar2/the-passionate-programmer">Passionate Programmer</a>” which I am currently reading. It is all about creating a remarkable career in software development. If you are a developer, it is a highly recommended book. &nbsp;&nbsp;&nbsp;&nbsp;</p>

	<p>There are a lot of impressive tips we can learn from this book of wisdom. One of Such tip is “Practice, Practice, and Practice!!” It talks about how to practice as a software developer. Though it seems like a mighty task, the author “Chad Fowler” convey this by breaking the might task into the following three category (Divide and Conquer Approach).</p>

<dl>
	<dt>Physical/Coordination</dt>
	<dd>
		<ul>
			<li>Learn and master the unexplored areas of the language that you are working with. Say for example, Regular Expressions</li>
			<li>Dig your language’s API and don’t reinvent the wheel</li>
		</ul>
	</dd>
	<dt>Sight Reading</dt>
	<dd>
		<ul>
			<li>Learn by reading the code </li>
			<li>Pick any of your favorite open source, explore it understand and learn the tips and tricks of the trade</li>
			<li>Add some new feature</li>
			<li>Be sure to vary the software you work with</li>
		</ul>
	</dd>
	<dt>Improvisation</dt>
	<dd>
		<ul>
			<li>Takes some structure or constraint and creating something new, on the fly on top of that structure. For example pick a simple program and try to write it with the self-imposed constraints</li>
			<li>Play with <a href="http://codekata.pragprog.com/">Code Katas</a></li>
		</ul>
	</dd> 
</dl>

<h4>It’s time for action</h4>

<p>I believe these three very fundamental aspects makes a lot of difference. So, I’ve decided to get my hands dirty with these three things and here is my list of to dos.</p>

<dl>
	<dt>Physical/Coordination – (I pick C# as its my primary language in my current role)</dt>
	<dd>
		<ul>
			<li>Regular Expressions</li>
			<li>Dynamic Programming</li>
			<li>Multithreading</li>
			<li>Parallel Programming</li>
			<li>LINQ</li>
			<li>Reflection</li>
			<li>Streams and Networking</li>
			<li>Entity Framework</li>
			<li>Data Structures and Algorithms</li>
			<li>Customizing MVC3 Framework</li>
		</ul>
	</dd>
	<dt>Sight Reading</dt>
	<dd>
		<ul>
			<li>Exploring ASP.NET MVC3 source code</li>
			<li>Exploring Nunit source Code</li>
			<li>Blog my understanding during this exploration</li>
		</ul>
	</dd>
	<dt>Improvisation</dt>
	<dd>
		<ul>
			<li>Make most of Code Katas</li>
			<li>Active participation in Technical Forums</li>
		</ul>
	</dd>
</dl>	
</div>
</div>
]]></content>
  </entry>
  
</feed>
